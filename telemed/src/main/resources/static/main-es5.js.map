{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/clinic/clinic.component.ts","webpack:///src/app/components/clinic/clinic.component.html","webpack:///src/app/components/doctor-over-view/doctor-over-view.component.ts","webpack:///src/app/components/doctor-over-view/doctor-over-view.component.html","webpack:///src/app/components/doctor/doctor.component.ts","webpack:///src/app/components/doctor/doctor.component.html","webpack:///src/app/components/patient/patient.component.ts","webpack:///src/app/components/patient/patient.component.html","webpack:///src/app/components/rating-star/rating-star.component.ts","webpack:///src/app/components/rating-star/rating-star.component.html","webpack:///src/app/components/review-form/review-form.component.ts","webpack:///src/app/components/review-form/review-form.component.html","webpack:///src/app/components/review/review.component.ts","webpack:///src/app/components/review/review.component.html","webpack:///src/app/components/reviews/reviews.component.ts","webpack:///src/app/components/reviews/reviews.component.html","webpack:///src/app/components/search-box/search-box.component.ts","webpack:///src/app/components/search-box/search-box.component.html","webpack:///src/app/layout/footer/footer.component.ts","webpack:///src/app/layout/footer/footer.component.html","webpack:///src/app/layout/header/header.component.ts","webpack:///src/app/layout/header/header.component.html","webpack:///src/app/models/Appointment.ts","webpack:///src/app/models/CallState.ts","webpack:///src/app/models/Clinic.ts","webpack:///src/app/models/ClinicLocation.ts","webpack:///src/app/models/Contact.ts","webpack:///src/app/models/Like.ts","webpack:///src/app/models/Password.ts","webpack:///src/app/models/Review.ts","webpack:///src/app/pages/about/about.component.ts","webpack:///src/app/pages/about/about.component.html","webpack:///src/app/pages/admin/admin-login/admin-login.component.ts","webpack:///src/app/pages/admin/admin-login/admin-login.component.html","webpack:///src/app/pages/admin/admin-profile/admin-profile.component.ts","webpack:///src/app/pages/admin/admin-profile/admin-profile.component.html","webpack:///src/app/pages/booking/booking.component.ts","webpack:///src/app/pages/booking/booking.component.html","webpack:///src/app/pages/contact/contact.component.ts","webpack:///src/app/pages/contact/contact.component.html","webpack:///src/app/pages/doctor/clinic-settings/clinic-settings.component.ts","webpack:///src/app/pages/doctor/clinic-settings/clinic-settings.component.html","webpack:///src/app/pages/doctor/doctor-appointment/doctor-appointment.component.ts","webpack:///src/app/pages/doctor/doctor-appointment/doctor-appointment.component.html","webpack:///src/app/pages/doctor/doctor-appointments/doctor-appointments.component.ts","webpack:///src/app/pages/doctor/doctor-appointments/doctor-appointments.component.html","webpack:///src/app/pages/doctor/doctor-change-password/doctor-change-password.component.ts","webpack:///src/app/pages/doctor/doctor-change-password/doctor-change-password.component.html","webpack:///src/app/pages/doctor/doctor-dash-board/doctor-dash-board.component.ts","webpack:///src/app/pages/doctor/doctor-dash-board/doctor-dash-board.component.html","webpack:///src/app/pages/doctor/doctor-profile-settings/doctor-profile-settings.component.ts","webpack:///src/app/pages/doctor/doctor-profile-settings/doctor-profile-settings.component.html","webpack:///src/app/pages/doctor/doctor-review/doctor-review.component.ts","webpack:///src/app/pages/doctor/doctor-review/doctor-review.component.html","webpack:///src/app/pages/doctor/doctor-reviews/doctor-reviews.component.ts","webpack:///src/app/pages/doctor/doctor-reviews/doctor-reviews.component.html","webpack:///src/app/pages/doctor/doctor-side-bar/doctor-side-bar.component.ts","webpack:///src/app/pages/doctor/doctor-side-bar/doctor-side-bar.component.html","webpack:///src/app/pages/doctor/login/login.component.ts","webpack:///src/app/pages/doctor/login/login.component.html","webpack:///src/app/pages/doctor/profile/profile.component.ts","webpack:///src/app/pages/doctor/profile/profile.component.html","webpack:///src/app/pages/doctor/signup/signup.component.ts","webpack:///src/app/pages/doctor/signup/signup.component.html","webpack:///src/app/pages/doctor/video-chat/video-chat.component.html","webpack:///src/app/pages/doctor/video-chat/video-chat.component.ts","webpack:///src/app/pages/home/home.component.ts","webpack:///src/app/pages/home/home.component.html","webpack:///src/app/pages/patient/change-password/change-password.component.ts","webpack:///src/app/pages/patient/change-password/change-password.component.html","webpack:///src/app/pages/patient/login/login.component.ts","webpack:///src/app/pages/patient/login/login.component.html","webpack:///src/app/pages/patient/patient-appointment/patient-appointment.component.ts","webpack:///src/app/pages/patient/patient-appointment/patient-appointment.component.html","webpack:///src/app/pages/patient/patient-appointments/patient-appointments.component.ts","webpack:///src/app/pages/patient/patient-appointments/patient-appointments.component.html","webpack:///src/app/pages/patient/patient-side-bar/patient-side-bar.component.ts","webpack:///src/app/pages/patient/patient-side-bar/patient-side-bar.component.html","webpack:///src/app/pages/patient/profile/profile.component.ts","webpack:///src/app/pages/patient/profile/profile.component.html","webpack:///src/app/pages/patient/signup/signup.component.ts","webpack:///src/app/pages/patient/signup/signup.component.html","webpack:///src/app/pages/patient/video-chat/video-chat.component.html","webpack:///src/app/pages/patient/video-chat/video-chat.component.ts","webpack:///src/app/pages/search/search.component.ts","webpack:///src/app/pages/search/search.component.html","webpack:///src/app/services/admin-auth.guard.ts","webpack:///src/app/services/appointment.service.ts","webpack:///src/app/services/auth-interceptor.service.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/contact.service.ts","webpack:///src/app/services/doctor-auth.guard.ts","webpack:///src/app/services/doctor.service.ts","webpack:///src/app/services/patient-auth-guard.ts","webpack:///src/app/services/patient.service.ts","webpack:///src/app/services/review.service.ts","webpack:///src/app/services/token-storage.service.ts","webpack:///src/app/shared.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","pathMatch","redirectTo","component","AppRoutingModule","forRoot","imports","AppComponent","tokenStorageService","isLoggedIn","showAdminBoard","showModeratorBoard","getToken","user","getUser","username","signOut","window","location","reload","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","ClinicComponent","doctorService","console","log","JSON","stringify","clinic","getClinicPhotos","doctor","subscribe","photos","filter","photo","clinicPhotos","map","image","data","DoctorOverViewComponent","DoctorComponent","showDefaultAvatar","getAvatar","res","retrieveResonse","base64Data","retrievedAvatar","undefined","getClinic","PatientComponent","RatingStarComponent","currentRateChange","readonly","max","ReviewFormComponent","authService","addReview","getCurrentUser","authorId","rating","review","content","emit","onSubmit","ReviewComponent","patientService","reviewService","autheService","deleteReview","editReview","getById","patientId","author","avatar","currentUserId","like","setLiked","isLiked","likes","includes","likeReview","push","unlikeReview","index","indexOf","splice","toggleLike","ReviewsComponent","refresh","refreshReviews","updateReview","getReviews","reviews","SearchBoxComponent","router","city","query","navigate","queryParams","search","DOCTOR","PATIENT","ADMIN","FooterComponent","showDoctorMenu","showPatientMenu","showAdminMenu","getLoggedInUser","updateFooter","userType","getUserType","roles","loggedInUser","HeaderComponent","isMenuCollapsed","updateHeader","Appointment","CallState","Clinic","name","description","services","specialities","country","address","minPrice","maxPrice","consultPrice","ClinicLocation","latitude","longitude","zoom","Contact","Like","Password","oldPassword","newPassword","Review","AboutComponent","AdminLoginComponent","tokenStorage","activatedRoute","form","isLoginFailed","errorMessage","retUrl","queryParamMap","params","get","adminLogin","saveToken","accessToken","saveUser","saveUserType","err","error","message","AdminProfileComponent","BookingComponent","route","appointmentService","appointment","successMessage","doctorId","doctorAvatar","patient","bookingDate","Date","state","toISOString","add","setTimeout","ContactComponent","contactService","contact","submitted","addContact","ClinicSettingsComponent","empty","join","split","updateClinic","photoId","deleteClinicPhoto","event","currentSelectedPhoto","target","files","item","uploadClinicPhoto","type","UploadProgress","uploadProgress","Math","round","loaded","total","uploadErrorMessage","DoctorAppointmentComponent","appointmentDate","update","DoctorAppointmentsComponent","autService","appotmentService","getAllDoctorAppoitments","apps","appointments","DoctorChangePasswordComponent","doctorSerive","isPasswordFailed","isPasswordSuccess","passwordMatch","doc","confirmPassword","password","updatePassword","DoctorDashBoardComponent","DoctorProfileSettingsComponent","updateDoctor","currentSelectedAvatar","uploadAvatar","DoctorReviewComponent","patientAvatar","DoctorReviewsComponent","DoctorSideBarComponent","logout","LoginComponent","doctorLogin","ProfileComponent","isPatient","SignupComponent","isSuccessful","isSignUpFailed","doctorRegister","offerOptions","offerToReceiveAudio","offerToReceiveVideo","VideoChatComponent","websocketUrl","callState","Idle","callerName","myName","conn","WebSocket","onopen","ev","onOpen","onmessage","msg","onMessage","localeVideo","remoteVideo","parse","handleOffer","handleAnswer","handleCandidate","handleCall","handleAcceptCall","handleDenyCall","handleEndCall","configuration","iceServers","urls","peerConnection","RTCPeerConnection","onicecandidate","candidate","send","ontrack","gotRemoteStream","initializePeer","constraints","video","audio","navigator","mediaDevices","getUserMedia","stream","getTracks","forEach","track","addTrack","gotStream","createOffer","offer","setLocalDescription","alert","setRemoteDescription","RTCSessionDescription","createAnswer","answer","addIceCandidate","RTCIceCandidate","caller","Ringing","Ongoing","Denied","Ended","stop","initializingCall","calleeId","callerId","Canceled","streams","nativeElement","srcObject","src","URL","createObjectURL","localstream","close","HomeComponent","ChangePasswordComponent","patientLogin","PatientAppointmentComponent","doctorSerivce","config","leftTime","size","demand","floor","getTime","onFinished","PatientAppointmentsComponent","getAllPatientAppoitments","PatientSideBarComponent","birthday","updatePatient","patientRegister","appointmentId","cd","begin","handleCancelCall","width","height","SearchComponent","doctors","searchCity","searchQuery","AdminAuthGuard","authStorage","next","url","providedIn","AppointmentService","http","appoitmentUrl","appURL","post","put","TOKEN_HEADER_KEY","USER_TYPE_HEADER_KEY","AuthInterceptor","token","authReq","headers","set","clone","handle","AUTH_API","USER","AUTH_USER","DOCTOR_API","PATIENT_API","ADMIN_API","httpOptions","AuthService","credentials","api","email","phone","lastname","firstname","login","register","ContactService","contactUrl","contactURL","DoctorAuthGuard","API_URL","DoctorService","doctorUrl","doctorURL","file","formData","FormData","append","reportProgress","responseType","request","PatientAuthGuard","baseUrl","PATIENT_URL","PatientService","patirnt","ReviewService","doctorsURL","reviewId","TOKEN_KEY","USER_KEY","USER_TYPE","TokenStorageService","localStorage","clear","removeItem","setItem","getItem","BASE_URL","origin","BASE_SOCKET_URL","hostname","port","REST","CHAT","AUTH","environment","production","bootstrapModule"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,ykE,CA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,QAAMC,MAAM,GAAW,CACrB;AAAEC,UAAI,EAAG,EAAT;AAAaC,eAAS,EAAE,MAAxB;AAAgCC,gBAAU,EAAE;AAA5C,KADqB,EAErB;AAAEF,UAAI,EAAE,MAAR;AAAgBG,eAAS,EAAE;AAA3B,KAFqB,EAGrB;AAAEH,UAAI,EAAE,SAAR;AAAoBG,eAAS,EAAE;AAA/B,KAHqB,EAIrB;AAAEH,UAAI,EAAE,OAAR;AAAkBG,eAAS,EAAE;AAA7B,KAJqB,EAKrB;AAAEH,UAAI,EAAE,oBAAR;AAA+BG,eAAS,EAAE;AAA1C,KALqB,EAMrB;AAAEH,UAAI,EAAE,cAAR;AAAyBG,eAAS,EAAE;AAApC,KANqB,EAOrB;AAAEH,UAAI,EAAE,eAAR;AAA0BG,eAAS,EAAE;AAArC,KAPqB,EAQrB;AAAEH,UAAI,EAAE,kBAAR;AAA6BG,eAAS,EAAE;AAAxC,KARqB,EASrB;AAAEH,UAAI,EAAE,yBAAR;AAAoCG,eAAS,EAAE;AAA/C,KATqB,EAUrB;AAAEH,UAAI,EAAE,wBAAR;AAAmCG,eAAS,EAAE;AAA9C,KAVqB,EAWrB;AAAEH,UAAI,EAAE,qBAAR;AAAgCG,eAAS,EAAE;AAA3C,KAXqB,EAYrB;AAAEH,UAAI,EAAE,gBAAR;AAA2BG,eAAS,EAAE;AAAtC,KAZqB,EAarB;AAAEH,UAAI,EAAE,wBAAR;AAAkCG,eAAS,EAAE;AAA7C,KAbqB,EAcrB;AAAEH,UAAI,EAAE,uBAAR;AAAiCG,eAAS,EAAE;AAA5C,KAdqB,EAerB;AAAEH,UAAI,EAAE,iBAAR;AAA4BG,eAAS,EAAE;AAAvC,KAfqB,EAgBrB;AAAEH,UAAI,EAAE,eAAR;AAA0BG,eAAS,EAAE;AAArC,KAhBqB,EAiBrB;AAAEH,UAAI,EAAE,gBAAR;AAA2BG,eAAS,EAAE;AAAtC,KAjBqB,EAkBrB;AAAEH,UAAI,EAAE,wBAAR;AAAkCG,eAAS,EAAE;AAA7C,KAlBqB,EAmBrB;AAAEH,UAAI,EAAE,QAAR;AAAmBG,eAAS,EAAE;AAA9B,KAnBqB,EAoBrB;AAAEH,UAAI,EAAE,aAAR;AAAwBG,eAAS,EAAE;AAAnC,KApBqB,EAqBrB;AAAEH,UAAI,EAAE,sBAAR;AAAiCG,eAAS,EAAE;AAA5C,KArBqB,EAsBrB;AAAEH,UAAI,EAAE,yBAAR;AAAoCG,eAAS,EAAE;AAA/C,KAtBqB,EAuBrB;AAAEH,UAAI,EAAE,IAAR;AAAcE,gBAAU,EAAE;AAA1B,KAvBqB,CAuBc;AAvBd,KAAvB;;QA+BaE,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBN,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBK,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBN,MAArB,CAAD,CADD;AAERF,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACrF7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaU,Y;;;AAOX,4BAAoBC,mBAApB,EAA8D;AAAA;;AAA1C,aAAAA,mBAAA,GAAAA,mBAAA;AALpB,aAAAC,UAAA,GAAa,KAAb;AACA,aAAAC,cAAA,GAAiB,KAAjB;AACA,aAAAC,kBAAA,GAAqB,KAArB;AAGiE;;;;mCAEtD;AACT,eAAKF,UAAL,GAAkB,CAAC,CAAC,KAAKD,mBAAL,CAAyBI,QAAzB,EAApB;;AAEA,cAAI,KAAKH,UAAT,EAAqB;AACnB,gBAAMI,IAAI,GAAG,KAAKL,mBAAL,CAAyBM,OAAzB,EAAb,CADmB,CAEnB;AACA;AAEA;AACD;;AAEC,iBAAKC,QAAL,GAAgBF,IAAI,CAACE,QAArB;AACD;AACF;;;iCAEQ;AACP,eAAKP,mBAAL,CAAyBQ,OAAzB;AACAC,gBAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;;;;;;uBA3BUZ,Y,EAAY,oJ;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACRzB;;AACA;;AACA;;;;;;;;;sEDMaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTa,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;;;AERzyHaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAVT,CACT;AAAEC,eAAO,EAAE,sEAAX;AAA8BC,gBAAQ,EAAE,mFAAxC;AAAyDC,aAAK,EAAE;AAAhE,OADS,EAET;AAACF,eAAO,EAAE,gEAAV;AAA4BC,gBAAQ,EAAE;AAAtC,OAFS,EAGT,4EAHS,EAIT,8EAJS,EAKT,0EALS,EAMT,mEANS,C;AAOV,gBAhBQ,CACP,uEADO,EAEP,oEAFO,EAGP,qEAHO,EAIP,0DAJO,EAKP,6DALO,EAMP,oEANO,EAOP,wDAAcpB,OAAd,CAAsB,EAAtB,CAPO,CAOmB;AAPnB,OAgBR;;;;0HAGUkB,S,EAAS;AAAA,uBA/DlB,2DA+DkB,EA9DlB,gFA8DkB,EA7DlB,gFA6DkB,EA5DlB,4EA4DkB,EA3DlB,kFA2DkB,EA1DlB,yEA0DkB,EAzDlB,+EAyDkB,EAxDlB,oFAwDkB,EAvDlB,+GAuDkB,EAtDlB,4HAsDkB,EArDlB,yHAqDkB,EApDlB,oIAoDkB,EAnDlB,6GAmDkB,EAlDlB,0GAkDkB,EAjDlB,iGAiDkB,EAhDlB,yFAgDkB,EA/ClB,sFA+CkB,EA9ClB,mFA8CkB,EA7ClB,oFA6CkB,EA5ClB,qHA4CkB,EA3ClB,kGA2CkB,EA1ClB,oFA0CkB,EAzClB,gHAyCkB,EAxClB,uIAwCkB,EAvClB,gHAuCkB,EAtClB;AACA,+FAqCkB,EApClB,uFAoCkB,EAnClB,gIAmCkB,EAlClB,6HAkCkB,EAjClB,0FAiCkB,EAhClB,kGAgCkB,EA/BlB,mHA+BkB,EA9BlB;AACA,iHA6BkB,EA5BlB,mGA4BkB,EA3BlB;AACA,yHA0BkB,EAzBlB,oFAyBkB,EAxBlB,uFAwBkB,EAvBlB,kFAuBkB,EAtBlB,kGAsBkB,EArBlB,+FAqBkB;AArBA,kBAGlB,uEAHkB,EAIlB,oEAJkB,EAKlB,qEALkB,EAMlB,0DANkB,EAOlB,6DAPkB,EAQlB,oEARkB,EAQP,uDARO;AAqBA,O;AAbP,K;;;;;sEAaFA,S,EAAS;cAjErB,sDAiEqB;eAjEZ;AACRI,sBAAY,EAAE,CACZ,2DADY,EAEZ,gFAFY,EAGZ,gFAHY,EAIZ,4EAJY,EAKZ,kFALY,EAMZ,yEANY,EAOZ,+EAPY,EAQZ,oFARY,EASZ,+GATY,EAUZ,4HAVY,EAWZ,yHAXY,EAYZ,oIAZY,EAaZ,6GAbY,EAcZ,0GAdY,EAeZ,iGAfY,EAgBZ,yFAhBY,EAiBZ,sFAjBY,EAkBZ,mFAlBY,EAmBZ,oFAnBY,EAoBZ,qHApBY,EAqBZ,kGArBY,EAsBZ,oFAtBY,EAuBZ,gHAvBY,EAwBZ,uIAxBY,EAyBZ,gHAzBY,EA0BZ;AACA,iGA3BY,EA4BZ,uFA5BY,EA6BZ,gIA7BY,EA8BZ,6HA9BY,EA+BZ,0FA/BY,EAgCZ,kGAhCY,EAiCZ,mHAjCY,EAkCZ;AACA,mHAnCY,EAoCZ,mGApCY,EAqCZ;AACA,2HAtCY,EAuCZ,oFAvCY,EAwCZ,uFAxCY,EAyCZ,kFAzCY,EA0CZ,kGA1CY,EA2CZ,+FA3CY,CADN;AA8CRrB,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,qEAHO,EAIP,0DAJO,EAKP,6DALO,EAMP,oEANO,EAOP,wDAAcD,OAAd,CAAsB,EAAtB,CAPO,CAOmB;AAPnB,WA9CD;AAuDRuB,mBAAS,EAAE,CACT;AAAEJ,mBAAO,EAAE,sEAAX;AAA8BC,oBAAQ,EAAE,mFAAxC;AAAyDC,iBAAK,EAAE;AAAhE,WADS,EAET;AAACF,mBAAO,EAAE,gEAAV;AAA4BC,oBAAQ,EAAE;AAAtC,WAFS,EAGT,4EAHS,EAIT,8EAJS,EAKT,0EALS,EAMT,mEANS,CAvDH;AA+DRI,mBAAS,EAAE,CAAC,2DAAD;AA/DH,S;AAiEY,Q;;;;;;;;;;;;;;;;;;ACzHtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACaoB;;AACI;;AACI;;AACJ;;AACJ;;;;;;AAHO;;AAAA;;AACM;;AAAA;;;;QDLpBC,e;;;AAKX,+BACUC,aADV,EACqC;AAAA;;AAA3B,aAAAA,aAAA,GAAAA,aAAA;AACL;;;;mCAEG;AAAA;;AACNC,iBAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,IAAI,CAACC,SAAL,CAAe,KAAKC,MAApB,CAAxB;AACA,eAAKL,aAAL,CAAmBM,eAAnB,CAAmC,KAAKC,MAAL,CAAYxC,EAA/C,EAAmDyC,SAAnD,CAA6D,UAAAC,MAAM,EAAI;AACrEA,kBAAM,CAACC,MAAP,CAAc,UAAAC,KAAK,EAAI;AACrBV,qBAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBS,KAAtB;AACA,qBAAOA,KAAK,KAAK,IAAjB;AACD,aAHD;AAIA,iBAAI,CAACC,YAAL,GAAoBH,MAAM,CAACI,GAAP,CAAW,UAAAF,KAAK,EAAI;AACtC,qBAAO;AACL,sBAAMA,KAAK,CAAC5C,EADP;AAEL,yBAAS,4BAA4B4C,KAAK,CAACG,KAAN,CAAYC;AAF5C,eAAP;AAID,aALmB,CAApB;AAMD,WAXD;AAYD;;;;;;;uBAvBUhB,e,EAAe,8I;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,c;AAAA,of;AAAA;AAAA;ACV5B;;AAEI;;AACI;;AACI;;AAAwB;;AAAgB;;AACxC;;AAA0B;;AAAsB;;AAKhD;;AACI;;AAA6B;;AAAsC;;AAAkB;;AACrF;;AACI;;AAKJ;;AACJ;;AACJ;;AACJ;;AAGA;;AACI;;AACE;;AAAgD;;;;AAClD;;AACJ;;AACA;;AACI;;AAA8B;;AAC1B;;AAAgB;;AADpB;;AAEA;;AAIA;;AAKJ;;AACA;;AACJ;;;;AAvCoC;;AAAA;;AACE;;AAAA;;AAM6C;;AAAA;;AAE3D;;AAAA;;AAakC;;AAAA;;AAOlD;;AAAA,6GAAqC,WAArC,EAAqC,6BAArC,EAAqC,MAArC,EAAqC,wBAArC;;AAII;;AAAA,6GAAqC,WAArC,EAAqC,6BAArC,EAAqC,iBAArC,EAAqC,KAArC;;;;;;;;;;sED3BCA,e,EAAe;cAL3B,uDAK2B;eALjB;AACTV,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;gBAEzB;;;gBACA;;;;;;;;;;;;;;;;;;;;AEbH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgBgB;;AAA6C;;AAAY;;;;;;AAAZ;;AAAA;;;;;;AAS7C;;AAAoD;;AAAe;;;;;;AAAf;;AAAA;;;;QDhBvDyB,uB;;;AAIX,yCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBAPUA,uB;AAAuB,K;;;YAAvBA,uB;AAAuB,oC;AAAA;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,2K;AAAA;AAAA;ACTpC;;AAEI;;AAGI;;AACI;;AAAyB;;AAAQ;;AACjC;;AAAG;;AAAmB;;AAC1B;;AAKA;;AACI;;AAAI;;AAAQ;;AACZ;;AACI;;AACJ;;AACJ;;AAIA;;AACI;;AAAI;;AAAe;;AACnB;;AACI;;AACJ;;AACJ;;AAEJ;;AAEJ;;;;AAxBe;;AAAA;;AASK;;AAAA;;AASA;;AAAA;;;;;;;;;sEDhBPA,uB,EAAuB;cALnC,uDAKmC;eALzB;AACT3B,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,mCAFJ;AAGTC,mBAAS,EAAE,CAAC,kCAAD;AAHF,S;AAKyB,Q;;;;gBAEjC;;;gBACA;;;;;;;;;;;;;;;;;;;;AEZH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACQ4B;;;;;;AAAgC;;;;;;AAChC;;;;;;AAgBI;;AACI;;AACA;;AACA;;AACJ;;;;;;;;AAHO;;AAAA;;AACE;;AAAA;;;;;;AAMb;;AAA8E;;AAAkB;;;;;;AAAlB;;AAAA;;;;QDvB7F0B,e;;;AAUX,+BAAoBjB,aAApB,EAAiD;AAAA;;AAA7B,aAAAA,aAAA,GAAAA,aAAA;AAFpB,aAAAkB,iBAAA,GAA4B,KAA5B;AAEoD;;;;mCAE5C;AAAA;;AACN;AACA,eAAKlB,aAAL,CAAmBmB,SAAnB,CAA6B,KAAKZ,MAAL,CAAYxC,EAAzC,EAA6CyC,SAA7C,CAAuD,UAAAY,GAAG,EAAG;;;AAC3D,kBAAI,CAACC,eAAL,GAAuBD,GAAvB;AACA,kBAAI,CAACE,UAAL,GAAkB,CAAH,WAAG,MAAI,CAACD,eAAR,MAAuB,IAAvB,IAAuB,aAAvB,GAAuB,MAAvB,GAAuB,GAAEP,KAAtB,MAA2B,IAA3B,IAA2B,aAA3B,GAA2B,MAA3B,GAA2B,GAAEC,IAA/C;AACA,kBAAI,CAACQ,eAAL,GAAuB,4BAA4B,MAAI,CAACD,UAAxD;AACArB,mBAAO,CAACC,GAAR,CAAYkB,GAAZ,EAJ2D,CAK3D;;AACAnB,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,MAAI,CAACqB,eAAtC;;AACA,gBAAI,aAAAH,GAAA,MAAG,IAAH,IAAG,aAAH,GAAG,MAAH,GAAG,GAAEN,KAAL,MAAU,IAAV,IAAU,aAAV,GAAU,MAAV,GAAU,GAAEC,IAAZ,MAAqBS,SAAzB,EAAmC;AACjC,oBAAI,CAACN,iBAAL,GAAyB,IAAzB;AACAjB,qBAAO,CAACC,GAAR,CAAY,cAAZ;AAED;AACF,WAZD,EAFM,CAeN;;AACA,eAAKF,aAAL,CAAmByB,SAAnB,CAA6B,KAAKlB,MAAL,CAAYxC,EAAzC,EAA6CyC,SAA7C,CAAuD,UAAAY,GAAG,EAAI;AAC5D,kBAAI,CAACf,MAAL,GAAce,GAAd;AACD,WAFD,EAhBM,CAoBN;;AACA,eAAKpB,aAAL,CAAmBM,eAAnB,CAAmC,KAAKC,MAAL,CAAYxC,EAA/C,EAAmDyC,SAAnD,CAA6D,UAAAY,GAAG,EAAI;AAClE;AACA,kBAAI,CAACR,YAAL,GAAoBQ,GAAG,CAACP,GAAJ,CAAQ,UAAAF,KAAK;AAAA,qBAAI,4BAA4BA,KAAK,CAACG,KAAN,CAAYC,IAA5C;AAAA,aAAb,CAApB;AACD,WAHD;AAKD;;;;;;;uBAtCUE,e,EAAe,8I;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,c;AAAA,kyC;AAAA;AAAA;ACV5B;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAEI;;AACA;;AAEJ;;AACJ;;AACA;;AACI;;AAAqB;;AAA+C;;;;;;AAAkE;;AAAI;;AAC1I;;AAAoC;;AAAuB;;AAC3D;;AAAyB;;AAAsB;;AAC/C;;AACI;;AAEA;;AAAgC;;AAA2B;;AAC/D;;AACA;;AACI;;AAAwB;;AAAuC;;;;;;AAA6D;;AAC5H;;AACI;;AAKJ;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;AACJ;;AAEJ;;AACA;;AACI;;AACI;;AACI;;AAAI;;AAA8B;;AAAoC;;AACtE;;AAAI;;AAAqC;;AAAwC;;AACjF;;AAAI;;AAAqC;;;;;;AAAmE;;AAChH;;AACJ;;AACA;;AACI;;AAA2E;;AAAW;;AACtF;;AAAwD;;AAAgB;;AAC5E;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAhD2B;;AAAA;;AAEM;;AAAA;;AACA;;AAAA;;AAKe;;AAAA;;AAA4C;;AAAA;;AAChC;;AAAA;;AACX;;AAAA;;AAEJ;;AAAA;;AAEe;;AAAA;;AAG+B;;AAAA;;AAEvD;;AAAA;;AAQqB;;AAAA;;AASC;;AAAA;;AACO;;AAAA;;AACA;;AAAA;;AAId;;AAAA;;AACZ;;AAAA;;;;;;;;;;sEDvC1BA,e,EAAe;cAL3B,uDAK2B;eALjB;AACT5B,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;gBACzB;;;;;;;;;;;;;;;;;;;;AEXH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOamC,gB;;;AAEX,kCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,gB;AAAgB,K;;;YAAhBA,gB;AAAgB,kC;AAAA,c;AAAA,a;AAAA;AAAA;ACP7B;;AAAG;;AAAc;;;;;;;;sEDOJA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTrC,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;AEP7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKE;;AACE;;AAA0C;;AAAO;;AAAO;;AAC1D;;;;;;AAFmB;;AACE;;AAAA;;;;QDCVoC,mB;;;AAOX;AAED;AAAA;;AAPC;AACU,aAAAC,iBAAA,GAAoB,IAAI,0DAAJ,EAApB;AAED,aAAAC,QAAA,GAAmB,IAAnB;AACD,aAAAC,GAAA,GAAa,CAAb;AAGM;;;;mCAEP,CACP;;;;;;;uBAZWH,mB;AAAmB,K;;;YAAnBA,mB;AAAmB,sC;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,iH;AAAA;AAAA;ACHhC;;AAMA;;AAAY;AAAA;AAAA;;AAAwE;;;;;;AAAxE;;AAAA,4FAAsB,cAAtB,EAAsB,KAAtB,EAAsB,UAAtB,EAAsB,IAAtB,EAAsB,KAAtB,EAAsB,OAAtB;;;;;;;;;sEDHCA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACTtC,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;gBAG7B;;;gBACA;;;gBACA;;;gBACD;;;;;;;;;;;;;;;;;;;;AEbF;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACIY;;AACE;;AAA0C;;AAAO;;AAAO;;AAC1D;;;;;;AAFmB;;AACE;;AAAA;;;;QDKpBwC,mB;;;AAOX,mCAAoBC,WAApB,EAA6C;AAAA;;AAAzB,aAAAA,WAAA,GAAAA,WAAA;AALV,aAAAC,SAAA,GAAiC,IAAI,0DAAJ,EAAjC;AAKsC;;;;mCAExC;AAAA;;AACL,eAAKD,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAAY,GAAG,EAAI;AAClD,kBAAI,CAACe,QAAL,GAAgBf,GAAG,CAACrD,EAApB;AACAkC,mBAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,MAAI,CAACiC,QAAzC;AACD,WAHA;AAKF;;;mCAEO;AACNlC,iBAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAKiC,QAA5C;AACAlC,iBAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKkC,MAA5B;;AACA,cAAI,CAAC,KAAKA,MAAV,EAAiB;AACfnC,mBAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACD;;AACD,cAAImC,MAAM,GAAG,IAAI,4DAAJ,CAAW,KAAKC,OAAhB,EAAyB,EAAzB,EAA6B,KAAKF,MAAlC,EAA0C,KAAKD,QAA/C,CAAb;AACAlC,iBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,IAAI,CAACC,SAAL,CAAeiC,MAAf,CAAzB;AACA,eAAKJ,SAAL,CAAeM,IAAf,CAAoBF,MAApB;AACA,eAAKC,OAAL,GAAe,EAAf;AACA,eAAKF,MAAL,GAAc,CAAd;AACD;;;;;;;uBA7BUL,mB,EAAmB,0I;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,+Z;AAAA;AAAA;ACVhC;;AAAM;AAAA,mBAAY,IAAAS,QAAA,EAAZ;AAAsB,WAAtB;;AACF;;AACI;;AAAO;;AAAM;;AAAS;;AACtB;;AAME;;AAAY;AAAA;AAAA;;AAAkE;;AACpF;;AACA;;AACI;;AAAO;;AAAW;;AAClB;;AACoC;AAAA;AAAA;;AAAsB;;AAE5D;;AAAiD;;AAA0B;;AAAiB;;AAAG;;AAAQ;;AAAoB;;AAAQ;;AACrI;;AACA;;AACA;;AACI;;AAA8C;;AAAU;;AAC5D;;AACJ;;;;;;AAbsB;;AAAA,uFAAiB,cAAjB,EAAiB,KAAjB,EAAiB,UAAjB,EAAiB,KAAjB,EAAiB,KAAjB,EAAiB,CAAjB;;AAKsB;;AAAA;;;;;;;;;sEDJ/BT,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACT1C,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;gBAE7B;;;;;;;;;;;;;;;;;;;;AEZH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACIoC;;;;;;AAAkC;;;;;;AAClD;;;;;;AACgB;;AAAgC;;;;;;AAAgE;;;;;;AAAhE;;AAAA;;;;;;AAexC;;AAAgC;;;;;;AAAgE;;;;;;AAAhE;;AAAA;;;;;;;;AAUhC;;AAAiE;AAAA;;AAAA;;AAAA;AAAA;;AAC7D;;AACJ;;;;QDnBfkD,e;;;AAUX;AACA,+BACUC,cADV,EAEUC,aAFV,EAGUC,YAHV,EAGoC;AAAA;;AAF1B,aAAAF,cAAA,GAAAA,cAAA;AACA,aAAAC,aAAA,GAAAA,aAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AANA,aAAAC,YAAA,GAAoC,IAAI,0DAAJ,EAApC;AACA,aAAAC,UAAA,GAAkC,IAAI,0DAAJ,EAAlC;AAK6B;;;;mCAE/B;AAAA;;AACN;AAEA,eAAKJ,cAAL,CAAoBK,OAApB,CAA4B,KAAKV,MAAL,CAAYW,SAAxC,EAAmDxC,SAAnD,CAA6D,UAAAY,GAAG,EAAI;AAClE,kBAAI,CAAC6B,MAAL,GAAc7B,GAAd;AACD,WAFD;AAGA,eAAKsB,cAAL,CAAoBvB,SAApB,CAA8B,KAAKkB,MAAL,CAAYW,SAA1C,EAAqDxC,SAArD,CAA+D,UAAAY,GAAG,EAAG;;;AACjE,kBAAI,CAAC8B,MAAL,GAAc,6BAAyB,YAAG9B,GAAH,MAAM,IAAN,IAAM,aAAN,GAAM,MAAN,GAAM,GAAEN,KAAR,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAEC,IAAxC,CAAd;AACAd,mBAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,MAAI,CAACgD,MAA7B;AACH,WAHD;AAIA,eAAKN,YAAL,CAAkBV,cAAlB,GAAmC1B,SAAnC,CAA6C,UAAAY,GAAG,EAAI;AAClD,kBAAI,CAAC+B,aAAL,GAAqB/B,GAAG,CAACrD,EAAzB;AACA,kBAAI,CAACqF,IAAL,GAAY,IAAI,wDAAJ,CAAS,MAAI,CAACD,aAAd,CAAZ;;AACA,kBAAI,CAACE,QAAL,CAAc,MAAI,CAACD,IAAnB;AACD,WAJD;AAOD;;;iCAEQA,I,EAAS;AAChB,eAAKE,OAAL,GAAe,KAAKjB,MAAL,CAAYkB,KAAZ,CAAkBC,QAAlB,CAA2BJ,IAA3B,CAAf;AACAnD,iBAAO,CAACC,GAAR,CAAY,cAAc,KAAKoD,OAA/B;AACD;;;mCACO;AACN,iBAAO,KAAKjB,MAAL,CAAYkB,KAAZ,CAAkBC,QAAlB,CAA2B,KAAKJ,IAAhC,CAAP;AACD;;;qCAES;AAAA;;AAER,cAAG,CAAC,KAAKE,OAAT,EAAiB;AACfrD,mBAAO,CAACC,GAAR,CAAY,QAAZ;AACA,iBAAKyC,aAAL,CAAmBc,UAAnB,CACE,KAAKpB,MAAL,CAAYtE,EADd,EACkB,KAAKqF,IADvB,EAC6B5C,SAD7B,CACuC,UAAAY,GAAG,EAAI;AAC1CnB,qBAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,IAAI,CAACC,SAAL,CAAegB,GAAf,CAAxB;;AACA,oBAAI,CAACiB,MAAL,CAAYkB,KAAZ,CAAkBG,IAAlB,CAAuB,MAAI,CAACN,IAA5B;;AACA,oBAAI,CAACE,OAAL,GAAe,IAAf;AACD,aALH;AAMD;;AACD,cAAG,KAAKA,OAAR,EAAgB;AACdrD,mBAAO,CAACC,GAAR,CAAY,UAAZ;AACA,iBAAKyC,aAAL,CAAmBgB,YAAnB,CACE,KAAKtB,MAAL,CAAYtE,EADd,EACkB,KAAKqF,IADvB,EAC6B5C,SAD7B,CACuC,UAAAY,GAAG,EAAI;AAC1CnB,qBAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,IAAI,CAACC,SAAL,CAAegB,GAAf,CAA1B;AACA,kBAAImC,KAAK,GAAG,MAAI,CAAClB,MAAL,CAAYkB,KAAxB;AACAtD,qBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,IAAI,CAACC,SAAL,CAAemD,KAAf,CAA7B;AACA,kBAAMK,KAAK,GAAGL,KAAK,CAACM,OAAN,CAAc,MAAI,CAACT,IAAnB,EAAyB,CAAzB,CAAd;;AACA,kBAAIQ,KAAK,GAAG,CAAC,CAAb,EAAgB;AACbL,qBAAK,CAACO,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACF;;AACD3D,qBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,IAAI,CAACC,SAAL,CAAemD,KAAf,CAA7B;AACA,oBAAI,CAAClB,MAAL,CAAYkB,KAAZ,GAAoBA,KAApB;AACA,oBAAI,CAACD,OAAL,GAAe,KAAf;AACD,aAZH;AAaD;AACF;;;iCAEK;AACJ,eAAKR,UAAL,CAAgBP,IAAhB,CAAqB,KAAKF,MAA1B;AACD;;;mCAEO;AACN,eAAKQ,YAAL,CAAkBN,IAAlB,CAAuB,KAAKF,MAA5B;AACD;;;mCAEO;AACN,iBAAO;AACL,qBAAQ,KAAKiB,OADR;AAEL,kBAAM,IAFD;AAGL,4BAAgB;AAHX,WAAP;AAKD;;;;;;;uBAtFUb,e,EAAe,gJ,EAAA,8I,EAAA,0I;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,c;AAAA,+0B;AAAA;AAAA;ACd5B;;AACI;;AACI;;AACI;;AACI;;AAAoB;;AAChB;;AADJ;;AAEA;;AAAoB;;AAAuG;;AAC/H;;AAEJ;;AACA;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAAG;;AAAmB;;AAC1B;;AACA;;AACI;;AAEJ;;AACA;;AACI;;AAAG;AAAA,mBAAS,IAAAsB,UAAA,EAAT;AAAqB,WAArB;;AACC;;AAA+B;;AACnC;;AAIA;;AAGJ;;AAEJ;;AAEJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAtCyC;;AAAA;;AACqB;;AAAA;;AACpB;;AAAA;;AAOL;;AAAA,iIAA8B,UAA9B,EAA8B,IAA9B;;AAKN;;AAAA;;AAGG;;AAAA;;AAKC;;AAAA;;AAA4B;;AAAA;;AAKhC;;AAAA;;;;;;;;;;sEDjBlBtB,e,EAAe;cAL3B,uDAK2B;eALjB;AACTpD,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;gBAOzB;;;gBACA;;;gBACA;;;;;;;;;;;;;;;;;;;;AEvBH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACGQ;;AAGA;AAAA;;AAAA;;AAAA;AAAA,WAAqC,YAArC,EAAqC;AAAA;;AAAA;;AAAA;AAAA,SAArC;;AACkC;;;;;;AAFlC;;;;;;;;AAQP;;AACG;;AAAI;;AAAmB;;AAAS;;;;;;AAAsE;;AAAS;;AAG/G;;AAAiB;AAAA;;AAAA;;AAAA;AAAA;;AAAgC;;AAGrD;;;;;;AANoC;;AAAA;;;;QDJvByE,gB;;;AAOX,gCAAoBrB,aAApB,EAAiD;AAAA;;AAA7B,aAAAA,aAAA,GAAAA,aAAA;AAHV,aAAAsB,OAAA,GAA4B,IAAI,0DAAJ,EAA5B;AAG0C;;;;mCAE5C;AACN,eAAKC,cAAL;AACD;;;kCAGS7B,M,EAAa;AAAA;;AACrBpC,iBAAO,CAACC,GAAR,CAAY,cAAcC,IAAI,CAACC,SAAL,CAAeiC,MAAf,CAA1B;AACA,eAAKM,aAAL,CAAmBV,SAAnB,CAA6B,KAAK1B,MAAL,CAAYxC,EAAzC,EAA6CsE,MAA7C,EAAqD7B,SAArD,CAA+D,UAAAY,GAAG,EAAI;AACpEnB,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,IAAI,CAACC,SAAL,CAAegB,GAAf,CAAjC;;AACA,kBAAI,CAAC8C,cAAL;AACD,WAHD;AAID;;;qCAEY7B,M,EAAa;AAAA;;AACxB,eAAKM,aAAL,CAAmBE,YAAnB,CAAgC,KAAKtC,MAAL,CAAYxC,EAA5C,EAAgDsE,MAAM,CAACtE,EAAvD,EAA2DyC,SAA3D,CAAqE,UAAAY,GAAG,EAAI;AAC1EnB,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,IAAI,CAACC,SAAL,CAAegB,GAAf,CAAjC,EAD0E,CAE1E;AACA;AACA;AACA;;AACA,kBAAI,CAAC8C,cAAL;AACD,WAPD;AAQD;;;mCAEU7B,M,EAAa;AAAA;;AACtB,eAAKM,aAAL,CAAmBwB,YAAnB,CAAgC,KAAK5D,MAAL,CAAYxC,EAA5C,EAAgDsE,MAAhD,EAAwD7B,SAAxD,CAAkE,UAAAY,GAAG,EAAI;AACvEnB,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,IAAI,CAACC,SAAL,CAAegB,GAAf,CAAjC;;AACA,kBAAI,CAAC8C,cAAL;AACD,WAHD;AAID;;;yCAEa;AAAA;;;;AACZjE,iBAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,IAAI,CAACC,SAAL,CAAe,KAAKG,MAApB,CAAxB;AACA,eAAK0D,OAAL,CAAa1B,IAAb,CAAkB,SAAlB;AACA,eAAKI,aAAL,CAAmByB,UAAnB,CAA8B,CAAD,KAAC,KAAK7D,MAAL,MAAW,IAAX,IAAW,aAAX,GAAW,MAAX,GAAW,GAAExC,EAA3C,EAA+CyC,SAA/C,CAAyD,UAAAY,GAAG,EAAI;AAC9DnB,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,IAAI,CAACC,SAAL,CAAegB,GAAf,CAAjC;AACA,kBAAI,CAACiD,OAAL,GAAejD,GAAf;AACD,WAHD;AAID;;;;;;;uBA/CU4C,gB,EAAgB,8I;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,kO;AAAA;AAAA;ACT7B;;AACI;;AACI;;AAKJ;;AACJ;;AAIC;;;;AATO;;AAAA;;AASF;;AAAA;;;;;;;;;;sEDHOA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACT3E,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;gBAE1B;;;gBACA;;;gBACA;;;;;;;;;;;;;;;;;;;;AEdH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa+E,kB;;;AAEX,kCAAoBC,MAApB,EAAmC;AAAA;;AAAf,aAAAA,MAAA,GAAAA,MAAA;AAAkB;;;;mCAE9B,CACP;;;+BAEMC,I,EAAaC,K,EAAY;AAC9BxE,iBAAO,CAACC,GAAR,CAAY,WAAWsE,IAAvB,EAA6B,aAAaC,KAA1C;AACA,eAAKF,MAAL,CAAYG,QAAZ,CAAqB,CAAC,QAAD,CAArB,EAAiC;AAAEC,uBAAW,EAAE;AAAE,sBAAQH,IAAV;AAAgB,uBAASC;AAAzB;AAAf,WAAjC;AACD;;;;;;;uBAVUH,kB,EAAkB,uH;AAAA,K;;;YAAlBA,kB;AAAkB,qC;AAAA,e;AAAA,a;AAAA,ggB;AAAA;AAAA;;;ACR/B;;AACI;;AACI;;AACI;;AACI;;AACI;;AACA;;AAAwB;;AAAkB;;AAC9C;;AACJ;;AACA;;AACI;;AACI;;AAEA;;AAAwB;;AAAiC;;AAC7D;;AACJ;;AACA;;AACI;;AAAQ;AAAA;;AAAA;;AAAA;;AAAA,mBAAS,IAAAM,MAAA,0BAAT;AAAwC,WAAxC;;AAAsF;;AAC5D;;AAAM;;AAAM;;AAAO;;AAAS;;AACtE;;AACJ;;AACJ;;;;;;;;;sEDbaN,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTjF,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;;;;;;;;;;;AER/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACiB+D;;AAAsE;;AAAK;;;;;;AAAtH;;AAA2C;;AAA+E;;;;;;AAA5E;;AAAA;;;;;;AAC9C;;AAA4C;;AAAmD;;AAAO;;AAAI;;;;;;AAC1G;;AAA+C;;AAAmD;;AAAiB;;AAAI;;;;;;AAN/H;;AACI;;AACI;;AAAI;;AAAI;;AAAQ;;AAAK;;AACrB;;AAAqB;;AAA2C;;AAAkB;;AAAI;;AACtF;;AACA;;AACA;;AACJ;;AACJ;;;;;;AAJY;;AAAA;;AACC;;AAAA;;AACD;;AAAA;;;;;;AAMJ;;AAA0C;;AAAgD;;AAAK;;AAAI;;;;;;AACnG;;AAA0C;;AAAiD;;AAAO;;AAAI;;;;;;AACtG;;AAA4C;;AAAwD;;AAAY;;AAAI;;;;ADtBtI,QAAMsF,MAAM,GAAG,QAAf;AACA,QAAMC,OAAO,GAAG,SAAhB;AACA,QAAMC,KAAK,GAAG,OAAd;;QAOWC,e;;;AAYX,+BACUhD,WADV,EAEUvD,mBAFV,EAEmD;AAAA;;AADzC,aAAAuD,WAAA,GAAAA,WAAA;AACA,aAAAvD,mBAAA,GAAAA,mBAAA;AAXV,aAAAC,UAAA,GAAa,KAAb,CAWmD,CAVnD;AACA;;AACA,aAAAuG,cAAA,GAAiB,KAAjB;AACA,aAAAC,eAAA,GAAkB,KAAlB;AACA,aAAAC,aAAA,GAAgB,KAAhB;AAMsD;;;;mCAE9C;AAAA;;AACN,eAAKzG,UAAL,GAAkB,CAAC,CAAC,KAAKD,mBAAL,CAAyBI,QAAzB,EAApB;AACA,eAAKmD,WAAL,CAAiBoD,eAAjB,CAAiC5E,SAAjC,CAA2C,UAAC1B,IAAD;AAAA,mBAAe,OAAI,CAACuG,YAAL,CAAkBvG,IAAlB,CAAf;AAAA,WAA3C;;AAEA,cAAI,KAAKJ,UAAT,EAAqB;AACnB,gBAAMI,IAAI,GAAG,KAAKL,mBAAL,CAAyBM,OAAzB,EAAb;AACA,gBAAMuG,QAAQ,GAAG,KAAK7G,mBAAL,CAAyB8G,WAAzB,EAAjB;AACA,iBAAKC,KAAL,GAAa1G,IAAI,CAAC0G,KAAlB,CAHmB,CAKnB;AACA;;AACA,iBAAKP,cAAL,GAAsBK,QAAQ,IAAIT,MAAlC;AACA,iBAAKK,eAAL,GAAuBI,QAAQ,IAAIR,OAAnC;AACA,iBAAKK,aAAL,GAAqBG,QAAQ,IAAIP,KAAjC;AACA9E,mBAAO,CAACC,GAAR,CAAY,cAAcoF,QAA1B;AACArF,mBAAO,CAACC,GAAR,CAAY,qBAAsB,KAAK+E,cAAvC;AACA,iBAAKjG,QAAL,GAAgBF,IAAI,CAACE,QAArB;AACD;AACF;;;qCAEYF,I,EAAS;AACpBmB,iBAAO,CAACC,GAAR,CAAY,kBAAkBpB,IAA9B;AACE,eAAKJ,UAAL,GAAkB,IAAlB;AACA,eAAK+G,YAAL,GAAoB3G,IAApB;AACAmB,iBAAO,CAACC,GAAR,CAAY,sBAAsB,KAAKuF,YAAvC;AACA,eAAKR,cAAL,GAAsBnG,IAAI,CAACwG,QAAL,IAAiBT,MAAvC;AACA5E,iBAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,iBAAO,CAACC,GAAR,CAAY,KAAK+E,cAAjB;AACA,eAAKC,eAAL,GAAuBpG,IAAI,CAACwG,QAAL,IAAiBR,OAAxC;AACA7E,iBAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,iBAAO,CAACC,GAAR,CAAY,KAAKgF,eAAjB;AACA,eAAKC,aAAL,GAAqBrG,IAAI,CAACwG,QAAL,IAAiBP,KAAtC;AACA9E,iBAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,iBAAO,CAACC,GAAR,CAAY,KAAKiF,aAAjB;AACH;;;;;;;uBAlDUH,e,EAAe,0I,EAAA,2J;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,e;AAAA,a;AAAA,45B;AAAA;AAAA;ACd5B;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAI;;AAAO;;AACX;;AAAG;;AAAwC;;AAC/C;;AAEJ;;AAEJ;;AACA;;AACI;;AASA;;AACI;;AACI;;AAAI;;AAAI;;AAAO;;AAAK;;AACpB;;AACA;;AACA;;AACA;;AAAsB;;AAA2C;;AAAM;;AAAI;;AAC/E;;AACJ;;AACJ;;AACJ;;AAGA;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;;;AAvCiB;;AAAA;;AAYO;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;;;;;;;;sEDbXA,e,EAAe;cAL3B,uDAK2B;eALjB;AACT3F,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEd5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;ACQI;;AACI;;AACI;;AAEA;;AACI;;AAA8F;AAAA;;AAAA;;AAAA,4CAA2B,IAA3B;AAA+B,SAA/B;;AAAiC;;AAAO;;AAC1I;;AACA;;AACI;;AAAuD;AAAA;;AAAA;;AAAA,4CAA2B,IAA3B;AAA+B,SAA/B;;AAAiC;;AAAK;;AACjG;;AACJ;;AACJ;;;;;;AAXmE;;AAKtB;;AAAA;;AAGb;;AAAA;;;;;;;;AAexB;;AACI;;AAA6B;AAAA;;AAAA;;AAAA,qCAA2B,IAA3B;AAAiC,iBAAF,iBAAE;AAAF,SAA/B;;AAA2C;;AAAM;;AAClF;;;;;;;;;;;;;;;;AAZR;;AACI;;AACI;;AACI;;AAAiG;AAAA;;AAAA;;AAAA,4CAA2B,IAA3B;AAA+B,SAA/B;;AAAiC;;AAAa;;AACnJ;;AACA;;AACI;;AAAmF;AAAA;;AAAA;;AAAA,4CAA2B,IAA3B;AAA+B,SAA/B;;AAAiC;;AAAM;;AAC9H;;AACA;;AAEA;;AAGJ;;AACJ;;;;;;AAdkE;;AAGxB;;AAAA;;AAGA;;AAAA;;AAIyB;;AAAA;;;;;;;;AAa3D;;AACI;;AAA6B;AAAA;;AAAA;;AAAA,qCAA2B,IAA3B;AAAiC,iBAAF,iBAAE;AAAF,SAA/B;;AAA2C;;AAAM;;AAClF;;;;;;;;;;;;AATR;;AACI;;AACI;;AACI;;AAA+F;AAAA;;AAAA;;AAAA,4CAA2B,IAA3B;AAA+B,SAA/B;;AAAiC;;AAAS;;AAC7I;;AACA;;AAEA;;AAGJ;;AACJ;;;;;;AAXkE;;AAGxB;;AAAA;;AAIyB;;AAAA;;;;;;AAMnE;;;;;;AAAkE;;;;AD3CpE,QAAMsF,MAAM,GAAG,QAAf;AACA,QAAMC,OAAO,GAAG,SAAhB;AACA,QAAMC,KAAK,GAAG,OAAd;;QAOWW,e;;;AAeX,+BACUjH,mBADV,EAEUuD,WAFV,EAGUuC,MAHV,EAGyB;AAAA;;AAFf,aAAA9F,mBAAA,GAAAA,mBAAA;AACA,aAAAuD,WAAA,GAAAA,WAAA;AACA,aAAAuC,MAAA,GAAAA,MAAA,CAAe,CAhBzB;;AACO,aAAAoB,eAAA,GAAkB,IAAlB;AAGP,aAAAjH,UAAA,GAAa,KAAb,CAYyB,CAXzB;AACA;;AACA,aAAAuG,cAAA,GAAiB,KAAjB;AACA,aAAAC,eAAA,GAAkB,KAAlB;AACA,aAAAC,aAAA,GAAgB,KAAhB;AAO4B;;;;mCAEjB;AAAA;;AACT,eAAKzG,UAAL,GAAkB,CAAC,CAAC,KAAKD,mBAAL,CAAyBI,QAAzB,EAApB;AACA,eAAKmD,WAAL,CAAiBoD,eAAjB,CAAiC5E,SAAjC,CAA2C,UAAC1B,IAAD;AAAA,mBAAe,OAAI,CAAC8G,YAAL,CAAkB9G,IAAlB,CAAf;AAAA,WAA3C;;AAEA,cAAI,KAAKJ,UAAT,EAAqB;AACnB,gBAAMI,IAAI,GAAG,KAAKL,mBAAL,CAAyBM,OAAzB,EAAb;AACA,gBAAMuG,QAAQ,GAAG,KAAK7G,mBAAL,CAAyB8G,WAAzB,EAAjB;AACA,iBAAKC,KAAL,GAAa1G,IAAI,CAAC0G,KAAlB,CAHmB,CAKnB;AACA;;AACA,iBAAKP,cAAL,GAAsBK,QAAQ,IAAIT,MAAlC;AACA,iBAAKK,eAAL,GAAuBI,QAAQ,IAAIR,OAAnC;AACA,iBAAKK,aAAL,GAAqBG,QAAQ,IAAIP,KAAjC;AACA9E,mBAAO,CAACC,GAAR,CAAY,cAAcoF,QAA1B;AACArF,mBAAO,CAACC,GAAR,CAAY,qBAAsB,KAAK+E,cAAvC;AACA,iBAAKjG,QAAL,GAAgBF,IAAI,CAACE,QAArB;AACD;AACF;;;iCAEQ;AACP,eAAKP,mBAAL,CAAyBQ,OAAzB,GADO,CAEP;;AACA,eAAKsF,MAAL,CAAYG,QAAZ,CAAqB,CAAC,MAAD,CAArB,EAA+BlH,IAA/B,CAAoC,YAAK;AACvC0B,kBAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,WAFD;AAGD;;;qCAEYN,I,EAAS;AACpBmB,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BpB,IAA7B;AACE,eAAKJ,UAAL,GAAkB,IAAlB;AACA,eAAK+G,YAAL,GAAoB3G,IAApB;AACAmB,iBAAO,CAACC,GAAR,CAAY,sBAAsB,KAAKuF,YAAvC;AACA,eAAKR,cAAL,GAAsBnG,IAAI,CAACwG,QAAL,IAAiBT,MAAvC;AACA5E,iBAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,iBAAO,CAACC,GAAR,CAAY,KAAK+E,cAAjB;AACA,eAAKC,eAAL,GAAuBpG,IAAI,CAACwG,QAAL,IAAiBR,OAAxC;AACA7E,iBAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,iBAAO,CAACC,GAAR,CAAY,KAAKgF,eAAjB;AACA,eAAKC,aAAL,GAAqBrG,IAAI,CAACwG,QAAL,IAAiBP,KAAtC;AACA9E,iBAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,iBAAO,CAACC,GAAR,CAAY,KAAKiF,aAAjB;AACH;;;;;;;uBA9DUO,e,EAAe,2J,EAAA,0I,EAAA,uH;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA,+xB;AAAA;AAAA;ACf5B;;AACI;;AAA2C;;AAAO;;AAElD;;AAAwD;AAAA;AAAA;;AACpD;;AACJ;;AAEA;;AAaA;;AAgBA;;AAaA;;AAiBJ;;;;AAjE4B;;AAAA;;AAMnB;;AAAA;;AAaA;;AAAA;;AAgBA;;AAAA;;AAaA;;AAAA;;;;;;;;;sEDlCIA,e,EAAe;cALzB,uDAKyB;eALf;AACTrG,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEhB5B;AAAA;;;AAAA;AAAA;AAAA;;QAAasG,W;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;;AAAA,QAAYC,SAAZ;;AAAA,eAAYA,SAAZ,EAAqB;AACjB;AACA;AACA;AACA;AACA;AACA;AACH,KAPD,EAAYA,SAAS,KAATA,SAAS,MAArB;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QACaC,M;;;;;;;;;gCAaG;AACR,iBAAO;AACHC,gBAAI,EAAC,EADF;AAEHC,uBAAW,EAAC,EAFT;AAGHC,oBAAQ,EAAC,EAHN;AAIHC,wBAAY,EAAC,EAJV;AAKH3B,gBAAI,EAAC,EALF;AAMH4B,mBAAO,EAAC,EANL;AAOHC,mBAAO,EAAC,EAPL;AAQHC,oBAAQ,EAAC,CARN;AASHC,oBAAQ,EAAC,CATN;AAUHC,wBAAY,EAAC,CAVV;AAWHrH,oBAAQ,EAAC,IAAI,8DAAJ,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AAXN,WAAP;AAaH;;;;;;;;;;;;;;;;;;;;;AC5BL;AAAA;;;AAAA;AAAA;AAAA;;QAAasH,c,GAKT,wBAAYC,QAAZ,EAA6BC,SAA7B,EAA+CC,IAA/C,EAA0D;AAAA;;AACtD,WAAKF,QAAL,GAAgBA,QAAhB;AACA,WAAKC,SAAL,GAAiBA,SAAjB;AACA,WAAKC,IAAL,GAAYA,IAAZ;AACH,K;;;;;;;;;;;;;;;;;ACTL;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,O;;;;;;;;;;;;;;;;;;;ACAb;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,I,GAGT,cAAY3E,QAAZ,EAA2B;AAAA;;AACvB,WAAKA,QAAL,GAAgBA,QAAhB;AACH,K;;;;;;;;;;;;;;;;;ACLL;AAAA;;;AAAA;AAAA;AAAA;;QAAa4E,Q,GAIT,kBAAYC,WAAZ,EAAgCC,WAAhC,EAAkD;AAAA;;AAC9C,WAAKD,WAAL,GAAmBA,WAAnB;AACA,WAAKC,WAAL,GAAmBA,WAAnB;AACH,K;;;;;;;;;;;;;;;;;ACLL;AAAA;;;AAAA;AAAA;AAAA;;QAAaC,M,GAOT,gBAAY5E,OAAZ,EAA4BiB,KAA5B,EAA0CnB,MAA1C,EAAyDD,QAAzD,EAAwE;AAAA;;AACpE,WAAKG,OAAL,GAAeA,OAAf;AACA,WAAKiB,KAAL,GAAaA,KAAb;AACA,WAAKnB,MAAL,GAAcA,MAAd;AACA,WAAKY,SAAL,GAAiBb,QAAjB;AACH,K;;;;;;;;;;;;;;;;;ACdL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOagF,c;;;AAEX,gCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,c;AAAc,K;;;YAAdA,c;AAAc,gC;AAAA,c;AAAA,a;AAAA,4H;AAAA;AAAA;ACN3B;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAG;;AAGkB;;AACzB;;AAEJ;;AACJ;;AACJ;;AACJ;;;;;;;;sEDRaA,c,EAAc;cAL1B,uDAK0B;eALhB;AACT9H,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;AEP3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACkBoC;;AAKE;;AACF;;;;;;AADE;;AAAA;;;;;;AASF;;AAAmF;;AAAkB;;;;;;AAS7F;;AAAsC;;AAAoB;;;;;;AAC1D;;AACI;;AACJ;;;;;;AALR;;AAEQ;;AACA;;AAGJ;;;;;;;;AAJS;;AAAA;;AACA;;AAAA;;;;;;;;AA3BrB;;AAAsC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAElC;;AACI;;AAOF;;AACF;;AACI;;AAAyC;AAAA;;AAAA;;AAAA;AAAA;;AAAzC;;AAEA;;AAA2B;;AAAK;;AAEhC;;AACA;;AACA;;AACI;;AAAuB;AAAA;;AAAA;;AAAA;AAAA;;AAAvB;;AAEA;;AAA2B;;AAAQ;;AAEvC;;AACA;;AAOA;;AACI;;AAA4D;;AAAiB;;AACjF;;AACA;;AACkB;;AAAK;;AAE/B;;;;;;;;;;;;AA/BU;;AAAA;;AAMuC;;AAAA;;AAKI;;AAAA;;AAElB;;AAAA;;AAMnB;;AAAA;;;;QD5B/B6H,mB;;;AAQX,mCACUpF,WADV,EAEUqF,YAFV,EAGU9C,MAHV,EAIU+C,cAJV,EAIyC;AAAA;;AAH/B,aAAAtF,WAAA,GAAAA,WAAA;AACA,aAAAqF,YAAA,GAAAA,YAAA;AACA,aAAA9C,MAAA,GAAAA,MAAA;AACA,aAAA+C,cAAA,GAAAA,cAAA;AAXV,aAAAC,IAAA,GAAY,EAAZ;AACA,aAAA7I,UAAA,GAAa,KAAb;AACA,aAAA8I,aAAA,GAAgB,KAAhB;AACA,aAAAC,YAAA,GAAe,EAAf;AACA,aAAAjC,KAAA,GAAkB,EAAlB;AACA,aAAAkC,MAAA,GAAgB,eAAhB;AAM4C;;;;mCAEjC;AAAA;;AACT,cAAI,KAAKL,YAAL,CAAkBxI,QAAlB,EAAJ,EAAkC;AAChC,iBAAKH,UAAL,GAAkB,IAAlB;AACA,iBAAK8G,KAAL,GAAa,KAAK6B,YAAL,CAAkBtI,OAAlB,GAA4ByG,KAAzC;AACD;;AACD,eAAK8B,cAAL,CAAoBK,aAApB,CACanH,SADb,CACuB,UAAAoH,MAAM,EAAI;AACzB,mBAAI,CAACF,MAAL,GAAcE,MAAM,CAACC,GAAP,CAAW,QAAX,CAAd;AACA5H,mBAAO,CAACC,GAAR,CAAa,6BAA4B,OAAI,CAACwH,MAA9C;AACH,WAJL;AAKD;;;mCAEU;AAAA;;AACT,eAAK1F,WAAL,CAAiB8F,UAAjB,CAA4B,KAAKP,IAAjC,EAAuC/G,SAAvC,CACE,UAAC1B,IAAD,EAAe;AACb,mBAAI,CAACuI,YAAL,CAAkBU,SAAlB,CAA4BjJ,IAAI,CAACkJ,WAAjC;;AACA,mBAAI,CAACX,YAAL,CAAkBY,QAAlB,CAA2BnJ,IAA3B;;AACA,mBAAI,CAACuI,YAAL,CAAkBa,YAAlB,CAA+BpJ,IAAI,CAACwG,QAApC;;AAEA,mBAAI,CAACkC,aAAL,GAAqB,KAArB;AACA,mBAAI,CAAC9I,UAAL,GAAkB,IAAlB;AACA,mBAAI,CAAC8G,KAAL,GAAa,OAAI,CAAC6B,YAAL,CAAkBtI,OAAlB,GAA4ByG,KAAzC;;AACA,mBAAI,CAACxD,WAAL,CAAiBoD,eAAjB,CAAiC7C,IAAjC,CAAsCzD,IAAtC;;AACAmB,mBAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,mBAAO,CAACC,GAAR,CAAY,OAAI,CAACmH,YAAL,CAAkBtI,OAAlB,EAAZ;AACAkB,mBAAO,CAACC,GAAR,CAAa,eAAc,OAAI,CAACwH,MAAhC;;AACG,gBAAI,OAAI,CAACA,MAAL,IAAa,IAAjB,EAAuB;AAClB,qBAAI,CAACnD,MAAL,CAAYG,QAAZ,CAAsB,CAAC,OAAI,CAACgD,MAAN,CAAtB;AACJ,aAFD,MAEO;AACF,qBAAI,CAACnD,MAAL,CAAYG,QAAZ,CAAsB,CAAC,eAAD,CAAtB;AACJ;AAGL,WApBH,EAqBE,UAAAyD,GAAG,EAAI;AACL,mBAAI,CAACV,YAAL,GAAoBU,GAAG,CAACC,KAAJ,CAAUC,OAA9B;AACA,mBAAI,CAACb,aAAL,GAAqB,IAArB;AACD,WAxBH;AA0BD;;;;;;;uBArDUJ,mB,EAAmB,mI,EAAA,oJ,EAAA,uH,EAAA,+H;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,e;AAAA,a;AAAA,ioC;AAAA;AAAA;ACZhC;;AACI;;AACI;;AACI;;AAGI;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AAAI;;AAAM;;AAAM;;AAAM;;AAAO;;AACjC;;AACA;;AAsCJ;;AACJ;;AACJ;;AAGJ;;AACJ;;AAEJ;;AAEJ;;;;AAhDkC;;AAAA;;;;;;;;;sEDHrBA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACT/H,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEZhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa+I,qB;;;AAEX,uCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,qB;AAAqB,K;;;YAArBA,qB;AAAqB,wC;AAAA,c;AAAA,a;AAAA;AAAA;ACPlC;;AAAG;;AAAoB;;;;;;;;sEDOVA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTjJ,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;AEPlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgC4B;;AACI;;AACJ;;;;;;AAF8D;;AACV;;AAAA;;;;;;AAEpD;;AACI;;AACJ;;;;;;AANJ;;AACI;;AAGA;;AAGJ;;;;;;AANO;;AAAA;;AAGA;;AAAA;;;;;;AA2CX;;AACI;;AAAQ;;AAAQ;;AAAU;;AAC9B;;;;;;AAD8B;;AAAA;;;;QD9DrCgJ,gB;;;AAOX,gCACUC,KADV,EAEE;AACQjE,YAHV,EAIUvC,WAJV,EAKUhC,aALV,EAMU0C,cANV,EAOU+F,kBAPV,EAOiD;AAAA;;AANvC,aAAAD,KAAA,GAAAA,KAAA;AAEA,aAAAjE,MAAA,GAAAA,MAAA;AACA,aAAAvC,WAAA,GAAAA,WAAA;AACA,aAAAhC,aAAA,GAAAA,aAAA;AACA,aAAA0C,cAAA,GAAAA,cAAA;AACA,aAAA+F,kBAAA,GAAAA,kBAAA;AAVV,aAAAC,WAAA,GAA0B,IAAI,sEAAJ,EAA1B,CAUiD,CATjD;;AACA,aAAAC,cAAA,GAAsB,EAAtB;AAQoD;;;;mCAE5C;AAAA;;AACN,eAAKH,KAAL,CAAWZ,MAAX,CACDpH,SADC,CAEA,UAACoH,MAAD,EAAoB;AACjBA,kBAAM,CAAC,IAAD,CAAN;;AACD,mBAAI,CAAC5H,aAAL,CAAmB+C,OAAnB,CAA2B6E,MAAM,CAAC,IAAD,CAAjC,EAAyCpH,SAAzC,CAAmD,UAAAY,GAAG,EAAG;AACvD,qBAAI,CAACb,MAAL,GAAca,GAAd;AACA,qBAAI,CAACsH,WAAL,CAAiBE,QAAjB,GAA4B,OAAI,CAACrI,MAAL,CAAYxC,EAAxC;AAEAkC,qBAAO,CAACC,GAAR,CAAY,aAAa,OAAI,CAACK,MAAL,CAAYxC,EAArC;AACD,aALD;;AAMA,mBAAI,CAACiC,aAAL,CAAmBmB,SAAnB,CAA6ByG,MAAM,CAAC,IAAD,CAAnC,EAA2CpH,SAA3C,CAAqD,UAAA0C,MAAM,EAAG;;;AAC5D,qBAAI,CAAC2F,YAAL,GAAoB,6BAAyB,YAAG3F,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAApB;AACD,aAFD;AAGH,WAbC;AAcF,eAAKiB,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAA1B,IAAI,EAAI;AAClD,mBAAI,CAAC4D,cAAL,CAAoBK,OAApB,CAA4BjE,IAAI,CAACf,EAAjC,EAAqCyC,SAArC,CAA+C,UAAAY,GAAG,EAAI;AACpD,qBAAI,CAAC0H,OAAL,GAAe1H,GAAf;AACA,qBAAI,CAACsH,WAAL,CAAiB1F,SAAjB,GAA6B,OAAI,CAAC8F,OAAL,CAAa/K,EAA1C;AACAkC,qBAAO,CAACC,GAAR,CAAY,cAAc,OAAI,CAAC4I,OAAL,CAAa/K,EAAvC;AACD,aAJD;AAKD,WAND;AAQD;;;mCAEO;AAAA;;AACN;AACA;AACA;AACA,cAAMgL,WAAW,GAAG,IAAIC,IAAJ,EAApB,CAJM,CAI0B;;AAChC,eAAKN,WAAL,CAAiBO,KAAjB,GAAyB,SAAzB,CALM,CAMN;;AACA,eAAKP,WAAL,CAAiBK,WAAjB,GAA+BA,WAAW,CAACG,WAAZ,EAA/B;AACAjJ,iBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC6I,WAAW,CAACG,WAAZ,EAAhC;AACAjJ,iBAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,IAAI,CAACC,SAAL,CAAe,KAAKsI,WAApB,CAAtB;AACA,eAAKD,kBAAL,CAAwBU,GAAxB,CAA4B,KAAKT,WAAjC,EAA8ClI,SAA9C,CAAwD,UAAAY,GAAG,EAAI;AAC7DnB,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,IAAI,CAACC,SAAL,CAAegB,GAAf,CAAjC,EAD6D,CAE7D;;AACA,mBAAI,CAACsH,WAAL,CAAiBzC,WAAjB,GAA+B,EAA/B;AACA,mBAAI,CAAC0C,cAAL,GAAsB,mBAAtB;AACAS,sBAAU,CAAC,YAAI;AACb,qBAAI,CAACT,cAAL,GAAsB,EAAtB;AACJ,aAFY,EAEV,IAFU,CAAV;AAGD,WARD,EAVM,CAoBN;AACA;AACD;;;;;;;uBA/DYJ,gB,EAAgB,+H,EAAA,uH,EAAA,0I,EAAA,8I,EAAA,gJ,EAAA,wJ;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,e;AAAA,c;AAAA,qtC;AAAA;AAAA;AChB7B;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAA4B;;AAAkB;;AAAI;;AAAI;;AACtD;;AAAuD;;AAAO;;AAClE;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AAIA;;AACI;;AACI;;AACI;;AACI;;AACI;;AAQI;;AASA;;AACI;;AAAI;;AAAsE;;;;;;AACjC;;AAAI;;AAC7C;;AACJ;;AAEJ;;AACJ;;AACJ;;AAGA;;AACI;;AACI;;AACI;;AACI;;AACI;;AAA6B;;AAAW;;AACxC;;AAAU;AAAA;AAAA;;AACG;;AACjB;;AACJ;;AAUA;;AACI;;AAAO;AAAA,mBAAS,IAAA/F,QAAA,EAAT;AAAmB,WAAnB;;AAAP;;AACJ;;AAKJ;;AACA;;AAGJ;;AACJ;;AAGJ;;AACJ;;AACJ;;;;AAxD4C;;AAAA;;AAUc;;AAAA;;AAA4C;;AAAA;;AAEzD;;AAAA,iIAA8B,UAA9B,EAA8B,IAA9B;;AAcH;;AAAA;;AAqBjB;;AAAA;;;;;;;;;;sED7DZ+F,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTlJ,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEf7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACQkB;;AACE;;AACF;;;;;;AAHF;;AACE;;AAGF;;;;;;;;AAHO;;AAAA;;;;;;AAQL;;AAAmC;;AAAkB;;;;;;AACrD;;AAAgC;;AAAoC;;;;;;AAFtE;;AACE;;AACA;;AACF;;;;;;;;AAFO;;AAAA;;AACA;;AAAA;;;;;;AASL;;AAAqC;;AAAoB;;;;;;AAD3D;;AACE;;AACF;;;;;;;;AADO;;AAAA;;;;;;AAOX;;AACE;;AAAQ;;AAAQ;;AAAU;;AAC5B;;;;;;AAD4B;;AAAA;;;;QD1B3B8J,gB;;;AAKX,gCACUC,cADV,EAEU/E,MAFV,EAE0B;AAAA;;AADhB,aAAA+E,cAAA,GAAAA,cAAA;AACA,aAAA/E,MAAA,GAAAA,MAAA;AALV,aAAAgF,OAAA,GAAmB,IAAI,uDAAJ,EAAnB;AACA,aAAAC,SAAA,GAAY,KAAZ;AACA,aAAAb,cAAA,GAAyB,EAAzB;AAG6B;;;;mCAErB,CACP;;;mCAEU;AAAA;;AACT,eAAKa,SAAL,GAAiB,IAAjB;AACAvJ,iBAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,IAAI,CAACC,SAAL,CAAe,KAAKmJ,OAApB,CAA1C;AACA,eAAKD,cAAL,CAAoBG,UAApB,CAA+B,KAAKF,OAApC,EAA6C/I,SAA7C,CAAuD,UAAAY,GAAG,EAAI;AAC5DnB,mBAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,IAAI,CAACC,SAAL,CAAegB,GAAf,CAA1C;AACA,mBAAI,CAACuH,cAAL,GAAsB,cAAtB;AACAS,sBAAU,CAAC,YAAM;AACf,qBAAI,CAACT,cAAL,GAAsB,EAAtB;AACD,aAFS,EAEP,IAFO,CAAV;AAGD,WAND;AAOD;;;;;;;uBAtBUU,gB,EAAgB,yI,EAAA,uH;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,e;AAAA,a;AAAA,k+B;AAAA;AAAA;;;ACV7B;;AACI;;AACE;;AACE;;AACE;;AACE;;AAAI;;AAAO;;AACX;;AAAM;AAAA;;AAAA;;AAAY,gBAAA7G,QAAA;AAAY;AAAkB,WAA1C;;AACJ;;AACE;;AAAyC;AAAA;AAAA;;AAAzC;;AACA;;AAKF;;AACA;;AACE;;AAA2C;AAAA;AAAA;;AAA3C;;AACA;;AAIF;;AACA;;AACE;;AAA2C;AAAA;AAAA;;AAA3C;;AACF;;AACA;;AACE;;AAAsC;AAAA;AAAA;;AAA8G;;AACpJ;;AAGF;;AACA;;AACE;;AAAoE;;AAAY;;AAClF;;AACF;;AACA;;AAGF;;AAEF;;AACF;;AACF;;AACF;;;;;;;;;;;;AAnCuD;;AAAA;;AACpC;;AAAA;;AAOsC;;AAAA;;AACtC;;AAAA;;AAMsC;;AAAA;;AAGL;;AAAA;;AACjC;;AAAA;;AAKG;;AAAA;;AAGP;;AAAA;;;;;;;;;sEDzBJ6G,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACThK,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEV7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;ACwEgC;;AACI;;AAGI;;AACJ;;AACJ;;;;;;AAHQ;;AAAA;;AADA;;AAEA;;AAAA;;;;;;;;AAcR;;AACI;;AACA;;AAAG;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACwC;;AAA2B;;AAC1E;;;;;;AAHS;;AAAA;;;;;;;;AA0BjB;;AACI;;AACI;;AAAO;;AAAe;;AACtB;;AACkC;AAAA;;AAAA;;AAAA;AAAA;;AAC9B;;AAEI;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AARiB;;AAAA,gHAAqC,WAArC,EAAqC,kCAArC,EAAqC,MAArC,EAAqC,6BAArC;;AAEO;;AAAA,gHAAqC,WAArC,EAAqC,kCAArC,EAAqC,iBAArC,EAAqC,IAArC;;;;;;AAYhC;;AACI;;AAAQ;;AAAQ;;AAAU;;AAC9B;;;;;;AAD8B;;AAAA;;;;QD1HjCmK,uB;;;AAcX,uCAAoB1H,WAApB,EAAqDhC,aAArD,EAAkF;AAAA;;AAA9D,aAAAgC,WAAA,GAAAA,WAAA;AAAiC,aAAAhC,aAAA,GAAAA,aAAA;AAFrD,aAAA2I,cAAA,GAAsB,EAAtB;AAEqF;;;;mCAE7E;AAAA;;AACN,eAAK3G,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAAY,GAAG,EAAI;AACjD,mBAAI,CAACpB,aAAL,CAAmBmB,SAAnB,CAA6BC,GAAG,CAACrD,EAAjC,EAAqCyC,SAArC,CAA+C,UAAA0C,MAAM,EAAI;;;AACvD,qBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,aAFD;;AAGA,mBAAI,CAACf,aAAL,CAAmB+C,OAAnB,CAA2B3B,GAAG,CAACrD,EAA/B,EAAmCyC,SAAnC,CAA6C,UAAAD,MAAM,EAAI;AACrD,qBAAI,CAACA,MAAL,GAAcA,MAAd;AACD,aAFD;;AAGA,mBAAI,CAACP,aAAL,CAAmByB,SAAnB,CAA6BL,GAAG,CAACrD,EAAjC,EAAqCyC,SAArC,CAA+C,UAAAH,MAAM,EAAI;AACvD,qBAAI,CAACA,MAAL,GAAcA,MAAd;AACAJ,qBAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BC,IAAI,CAACC,SAAL,CAAe,OAAI,CAACC,MAApB,CAA3B;;AACA,kBAAI,CAAC,CAAC,CAAC,OAAI,CAACA,MAAZ,EAAmB;AACjBJ,uBAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,IAAI,CAACC,SAAL,CAAe,OAAI,CAACC,MAApB,CAA9B;AACA,uBAAI,CAACA,MAAL,GAAc,6DAAOsJ,KAAP,EAAd;AACD;;AACD,qBAAI,CAACzD,QAAL,GAAgB,OAAI,CAAC7F,MAAL,CAAY6F,QAAZ,CAAqB0D,IAArB,CAA0B,IAA1B,CAAhB;AACA,qBAAI,CAACzD,YAAL,GAAoB,OAAI,CAAC9F,MAAL,CAAY8F,YAAZ,CAAyByD,IAAzB,CAA8B,IAA9B,CAApB;AACD,aATD;;AAUA,mBAAI,CAAC5J,aAAL,CAAmBM,eAAnB,CAAmCc,GAAG,CAACrD,EAAvC,EAA2CyC,SAA3C,CAAqD,UAAAC,MAAM,EAAI;AAC7DA,oBAAM,GAAGA,MAAM,CAACC,MAAP,CAAc,UAACC,KAAD,EAAW;AAChCV,uBAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBS,KAAtB;AACA,uBAAOA,KAAK,KAAK,IAAjB;AACD,eAHQ,CAAT;AAIA,qBAAI,CAACC,YAAL,GAAoBH,MAAM,CAACI,GAAP,CAAW,UAAAF,KAAK,EAAI;AACtC,uBAAO;AACL,wBAAMA,KAAK,CAAC5C,EADP;AAEL,2BAAS,4BAA4B4C,KAAK,CAACG,KAAN,CAAYC;AAF5C,iBAAP;AAID,eALmB,CAApB;AAMD,aAXD;AAYD,WA7BD;AA8BD;;;mCAEO;AAAA;;AACNd,iBAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKgG,QAAL,CAAc2D,KAAd,CAAoB,GAApB,CAA1B;AACA5J,iBAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKiG,YAAL,CAAkB0D,KAAlB,CAAwB,GAAxB,CAA1B;AACA,eAAKxJ,MAAL,CAAY6F,QAAZ,GAAuB,KAAKA,QAAL,CAAc2D,KAAd,CAAoB,GAApB,CAAvB;AACA,eAAKxJ,MAAL,CAAY8F,YAAZ,GAA2B,KAAKA,YAAL,CAAkB0D,KAAlB,CAAwB,GAAxB,CAA3B;AACA5J,iBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,IAAI,CAACC,SAAL,CAAe,KAAKC,MAApB,CAAjC;AACC,eAAKL,aAAL,CAAmB8J,YAAnB,CAAgC,KAAKvJ,MAAL,CAAYxC,EAA5C,EAAgD,KAAKsC,MAArD,EAA6DG,SAA7D,CAAuE,UAAAH,MAAM,EAAI;AAC/E,mBAAI,CAACA,MAAL,GAAcA,MAAd;AACAJ,mBAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,IAAI,CAACC,SAAL,CAAe,OAAI,CAACC,MAApB,CAAxB;AACC,mBAAI,CAACsI,cAAL,GAAsB,cAAtB;AACAS,sBAAU,CAAC,YAAI;AACb,qBAAI,CAACT,cAAL,GAAsB,EAAtB;AACJ,aAFY,EAEV,IAFU,CAAV;AAGH,WAPA;AAQF;;;0CAEiBoB,O,EAAc;AAAA;;AAC9B9J,iBAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B6J,OAA1B;AACA,eAAK/J,aAAL,CAAmBgK,iBAAnB,CAAqC,KAAKzJ,MAAL,CAAYxC,EAAjD,EAAqDgM,OAArD,EAA8DvJ,SAA9D,CAAwE,UAAAY,GAAG,EAAG;AAC5EnB,mBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,IAAI,CAACC,SAAL,CAAegB,GAAf,CAA7B;;AACA,mBAAI,CAACpB,aAAL,CAAmBM,eAAnB,CAAmC,OAAI,CAACC,MAAL,CAAYxC,EAA/C,EAAmDyC,SAAnD,CAA6D,UAAAC,MAAM,EAAI;AACrER,qBAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeK,MAAf,CAAZ,EADqE,CAErE;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,oBAAM,GAAGA,MAAM,CAACC,MAAP,CAAc,UAACC,KAAD,EAAW;AAChCV,uBAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBS,KAAtB;;AACA,oBAAGA,KAAK,KAAK,IAAb,EAAkB;AAChBV,yBAAO,CAACC,GAAR,CAAY,eAAZ;AACA,yBAAO,KAAP;AACD;;AAAA;AACD,uBAAO,IAAP;AACD,eAPQ,CAAT;AAQAD,qBAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCC,IAAI,CAACC,SAAL,CAAeK,MAAf,CAArC;AACA,qBAAI,CAACG,YAAL,GAAoBH,MAAM,CAACI,GAAP,CAAW,UAAAF,KAAK,EAAI;AACtCV,uBAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBC,IAAI,CAACC,SAAL,CAAeO,KAAf,CAAxB;AACA,uBAAO;AACL,wBAAMA,KAAK,CAAC5C,EADP;AAEL,2BAAS,4BAA4B4C,KAAK,CAACG,KAAN,CAAYC;AAF5C,iBAAP;AAID,eANmB,CAApB;AAOD,aAzBD;AA0BD,WA5BD;AA6BD;;;0CAGiBkJ,K,EAAK;AAAA;;AACrB,eAAKC,oBAAL,GAA4BD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,CAAwB,CAAxB,CAA5B;AACA,eAAKrK,aAAL,CAAmBsK,iBAAnB,CAAqC,KAAK/J,MAAL,CAAYxC,EAAjD,EAAoD,KAAKmM,oBAAzD,EAAgF1J,SAAhF,CACE,UAAAyJ,KAAK,EAAI;AACP,gBAAIA,KAAK,CAACM,IAAN,KAAe,mEAAcC,cAAjC,EAAiD;AAC/C,qBAAI,CAACC,cAAL,GAAsBC,IAAI,CAACC,KAAL,CAAW,MAAMV,KAAK,CAACW,MAAZ,GAAqBX,KAAK,CAACY,KAAtC,CAAtB;AACD,aAFD,MAEO,IAAIZ,KAAK,YAAY,iEAArB,EAAmC;AACxC,qBAAI,CAACjK,aAAL,CAAmBM,eAAnB,CAAmC,OAAI,CAACC,MAAL,CAAYxC,EAA/C,EAAmDyC,SAAnD,CAA6D,UAAAC,MAAM,EAAI;AACrE,uBAAI,CAACG,YAAL,GAAoBH,MAAM,CAACI,GAAP,CAAW,UAAAF,KAAK,EAAI;AACtC,yBAAO;AACL,0BAAMA,KAAK,CAAC5C,EADP;AAEL,6BAAS,4BAA4B4C,KAAK,CAACG,KAAN,CAAYC;AAF5C,mBAAP;AAID,iBALmB,CAApB;AAMA,uBAAI,CAAC0J,cAAL,GAAsB,CAAtB;AACA,uBAAI,CAACP,oBAAL,GAA4B1I,SAA5B;AACD,eATD;AAUD;AACF,WAhBH,EAiBE,UAAA2G,GAAG,EAAI;AACL,mBAAI,CAACsC,cAAL,GAAsB,CAAtB;AACA,mBAAI,CAACK,kBAAL,GAA0B,6BAA1B;AACA,mBAAI,CAACZ,oBAAL,GAA4B1I,SAA5B;AACD,WArBH;AAsBD;;;gCAEOkF,Q,EAAiBC,S,EAAgB;AACvC1G,iBAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BwG,QAA1B,EAAoC,aAApC,EAAmDC,SAAnD;AACA,eAAKtG,MAAL,CAAYlB,QAAZ,CAAqBuH,QAArB,GAAgCA,QAAhC;AACA,eAAKrG,MAAL,CAAYlB,QAAZ,CAAqBwH,SAArB,GAAiCA,SAAjC;AAED;;;mCAEUC,I,EAAW;AACpB3G,iBAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB0G,IAAtB;AACA,eAAKvG,MAAL,CAAYlB,QAAZ,CAAqByH,IAArB,GAA4BA,IAA5B;AAED;;;;;;;uBAxIU8C,uB,EAAuB,0I,EAAA,8I;AAAA,K;;;YAAvBA,uB;AAAuB,0C;AAAA,e;AAAA,c;AAAA,6+C;AAAA;AAAA;ACbpC;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAEI;;AACI;;AACI;;AAAuB;;AAAW;;AAClC;;AACI;;AACI;;AACI;;AAAO;;AAAW;;AAClB;;AACI;AAAA;AAAA;;AADJ;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAmB;;AAC1B;;AACgC;AAAA;AAAA;;AADhC;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAO;;AACd;;AACgC;AAAA;AAAA;;AADhC;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAI;;AACX;;AACI;AAAA;AAAA;;AADJ;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAW;;AAClB;;AACI;AAAA;AAAA;;AACS;;AACjB;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAS;;AAChB;;AACI;AAAA;AAAA;;AADJ;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAS;;AAChB;;AACI;AAAA;AAAA;;AADJ;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAc;;AACrB;;AACI;AAAA;AAAA;;AADJ;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAa;;AAEpB;;AAOA;;AACI;;AACI;;AAAM;;AAA6B;;AAAY;;AAC/C;;AAAkC;AAAA,mBAAU,IAAAY,iBAAA,QAAV;AAAmC,WAAnC;;AAAlC;;AACJ;;AACA;;AAAoC;;AAC7B;;AACX;;AAEJ;;AACA;;AACI;;AAKJ;;AAEJ;;AAEA;;AACI;;AACI;;AAAO;;AAAQ;;AACf;;AAA+C;AAAA;AAAA;;AAA/C;;AAEA;;AAAoC;;AACxB;;AAChB;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAc;;AACrB;;AACI;AAAA;AAAA;;AADJ;;AAEA;;AAAoC;;AACjB;;AACvB;;AACJ;;AACA;;AAYJ;;AACJ;;AACA;;AACI;;AAAQ;AAAA,mBAAS,IAAA9H,QAAA,EAAT;AAAmB,WAAnB;;AAA6D;;AAAY;;AACrF;;AACA;;AAGJ;;AAMJ;;AACJ;;AACJ;;;;AA9IiC;;AAAA;;AAWuC;;AAAA;;AAOjC;;AAAA,4HAAyB,SAAzB,EAAyB,8CAAzB;;AAOA;;AAAA,4HAAyB,SAAzB,EAAyB,8CAAzB;;AAOA;;AAAA,yHAAsB,SAAtB,EAAsB,2CAAtB;;AAOG;;AAAA,gIAA6B,SAA7B,EAA6B,kDAA7B;;AAQH;;AAAA,6HAA0B,SAA1B,EAA0B,+CAA1B;;AAOA;;AAAA,6HAA0B,SAA1B,EAA0B,+CAA1B;;AAOA;;AAAA,iIAA8B,SAA9B,EAA8B,mDAA9B;;AAQF;;AAAA;;AAkBA;;AAAA;;AAYE;;AAAA,0FAAkB,SAAlB,EAAkB,YAAlB;;AASA;;AAAA,8FAAsB,SAAtB,EAAsB,gBAAtB;;AAMV;;AAAA;;AAiBR;;AAAA;;;;;;;;;sEDzHRkH,uB,EAAuB;cALnC,uDAKmC;eALzB;AACTrK,kBAAQ,EAAE,qBADD;AAETC,qBAAW,EAAE,kCAFJ;AAGTC,mBAAS,EAAE,CAAC,iCAAD;AAHF,S;AAKyB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEbpC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACcoB;;;;;;AAAkC;;;;;;AAElC;;;;;;AAcQ;;AAA2B;;AAA+B;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAC9D;;AAAwC;;AAA4B;;AAAiB;;;;;;AAAjB;;AAAA;;;;;;AAEpE;;AAAwC;;AAAiD;;;;AAAwE;;;;;;AAAxE;;AAAA;;;;;;AACzF;;AAAoC;;AAAiD;;;;AAAqE;;;;;;AAArE;;AAAA;;;;;;;;AACrF;;AACI;;AAAO;AAAA;;AAAA;;AAAA;AAAA;;AAAP;;AAEJ;;;;;;AAFW;;AAAA;;;;;;AAMP;;AAEI;;AAAsD;;AAC1D;;;;;;AAH2C;;;;;;;;AAK/C;;AAA0C;AAAA;;AAAA;;AAAA;AAAA;;AAEtC;;AAA2B;;AAC/B;;;;;;;;AAEA;;AAA0C;AAAA;;AAAA;;AAAA;AAAA;;AAEtC;;AAA4B;;AAChC;;;;;;AACA;;AACI;;AAA4B;;AAChC;;;;;;AADgC;;AAAA;;;;;;AAEhC;;AACI;;AAA4B;;AAChC;;;;;;AADgC;;AAAA;;;;;;AAzDhD;;AASI;;AACI;;AACI;;AAEA;;AAGJ;;AACA;;AAAI;;AAAyD;;;;;;AACpB;;AAAI;;AACjD;;AACA;;AACI;;AACI;;AACI;;AAAc;;AAA2B;;AAC7C;;AACA;;AAEQ;;AACJ;;AACA;;AAAkB;;AAA4B;;AAAU;;AACxD;;AACA;;AACA;;AAIJ;;AACA;;AACI;;AACI;;AAIJ;;AACA;;AAKA;;AAIA;;AAGA;;AAGJ;;AACJ;;AACJ;;AAgCJ;;;;;;AAnFW;;AAAA;;AACM;;AAAA;;AAEA;;AAAA;;AAIO;;AAAA;;AAA6C;;AAAA;;AAMvC;;AAAA;;AAIN;;AAAA;;AACJ;;AAAA;;AAEA;;AAAA;;AACA;;AAAA;;AACC;;AAAA;;AAOE;;AAAA;;AAKJ;;AAAA;;AAKA;;AAAA;;AAIA;;AAAA;;AAGA;;AAAA;;;;QDhDdwL,0B;;;AAQX,0CACUtC,kBADV,EAEU/F,cAFV,EAEyC;AAAA;;AAD/B,aAAA+F,kBAAA,GAAAA,kBAAA;AACA,aAAA/F,cAAA,GAAAA,cAAA;AAAkC;;;;mCAEpC;AAAA;;AACN;AACA;AACA;AACA;AACA;AACA;AACA,eAAKA,cAAL,CAAoBK,OAApB,CAA4B,KAAK2F,WAAL,CAAiB1F,SAA7C,EAAwDxC,SAAxD,CAAkE,UAAAY,GAAG,EAAI;AACvE,mBAAI,CAAC0H,OAAL,GAAe1H,GAAf;AACD,WAFD;AAGA,eAAKsB,cAAL,CAAoBvB,SAApB,CAA8B,KAAKuH,WAAL,CAAiB1F,SAA/C,EAA0DxC,SAA1D,CAAoE,UAAA0C,MAAM,EAAI;;;AAC5E,mBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,WAFD;AAGD;;;4CAEgB;AAAA;;AACfd,iBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,KAAKwI,WAAL,CAAiBsC,eAAlD;;AACA,cAAG,CAAC,KAAKtC,WAAL,CAAiBsC,eAArB,EAAqC;AACnC;AACD,WAJc,CAKf;;;AACA,eAAKtC,WAAL,CAAiBsC,eAAjB,GAAmC,IAAIhC,IAAJ,CAAS,KAAKN,WAAL,CAAiBsC,eAA1B,EAA2C9B,WAA3C,EAAnC,CANe,CAM8E;;AAC7F,eAAKR,WAAL,CAAiBO,KAAjB,GAAyB,UAAzB;AACA,eAAKR,kBAAL,CAAwBwC,MAAxB,CAA+B,KAAKvC,WAApC,EAAiDlI,SAAjD,CAA2D,UAAAY,GAAG,EAAI;AAChE,mBAAI,CAACsH,WAAL,GAAmBtH,GAAnB;AACD,WAFD;AAGD;;;4CAEgB;AAAA;;AACf,eAAKsH,WAAL,CAAiBO,KAAjB,GAAyB,UAAzB;AACA,eAAKR,kBAAL,CAAwBwC,MAAxB,CAA+B,KAAKvC,WAApC,EAAiDlI,SAAjD,CAA2D,UAAAY,GAAG,EAAI;AAChE,mBAAI,CAACsH,WAAL,GAAmBtH,GAAnB;AACD,WAFD;AAGD;;;yCAEa,CACZ;AACD;;;;;;;uBAjDU2J,0B,EAA0B,wJ,EAAA,gJ;AAAA,K;;;YAA1BA,0B;AAA0B,6C;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,i2D;AAAA;AAAA;ACVvC;;AACI;;AACI;;AA8FJ;;AACJ;;;;AA/FyB;;AAAA;;;;;;;;;;sEDQZA,0B,EAA0B;cALtC,uDAKsC;eAL5B;AACT1L,kBAAQ,EAAE,wBADD;AAETC,qBAAW,EAAE,qCAFJ;AAGTC,mBAAS,EAAE,CAAC,oCAAD;AAHF,S;AAK4B,Q;;;;;;;;gBAEpC;;;;;;;;;;;;;;;;;;;;AEbH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC6BoB;;;;;;AAEA;;;;;;AACA;;AACI;;AAAK;;AAAwB;;AACjC;;;;QDtBP2L,2B;;;AAIX,2CACUC,UADV,EAEUnL,aAFV,EAGUoL,gBAHV,EAG+C;AAAA;;AAFrC,aAAAD,UAAA,GAAAA,UAAA;AACA,aAAAnL,aAAA,GAAAA,aAAA;AACA,aAAAoL,gBAAA,GAAAA,gBAAA;AAAwC;;;;mCAE1C;AAAA;;AACN,eAAKD,UAAL,CAAgBjJ,cAAhB,GAAiC1B,SAAjC,CAA2C,UAAA1B,IAAI,EAAI;AACjD,mBAAI,CAACkB,aAAL,CAAmB+C,OAAnB,CAA2BjE,IAAI,CAACf,EAAhC,EAAoCyC,SAApC,CAA8C,UAAAD,MAAM,EAAI;AACtD,qBAAI,CAACA,MAAL,GAAcA,MAAd;AACD,aAFD;;AAGA,mBAAI,CAACP,aAAL,CAAmBmB,SAAnB,CAA6BrC,IAAI,CAACf,EAAlC,EAAsCyC,SAAtC,CAAgD,UAAA0C,MAAM,EAAI;;;AACxD,qBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,aAFD;;AAGA,mBAAI,CAACqK,gBAAL,CAAsBC,uBAAtB,CAA8CvM,IAAI,CAACf,EAAnD,EAAuDyC,SAAvD,CAAiE,UAAA8K,IAAI,EAAI;AACvE,qBAAI,CAACC,YAAL,GAAoBD,IAApB;AACD,aAFD;AAGD,WAVD;AAWD;;;;;;;uBArBUJ,2B,EAA2B,0I,EAAA,8I,EAAA,wJ;AAAA,K;;;YAA3BA,2B;AAA2B,8C;AAAA,e;AAAA,a;AAAA,ymB;AAAA;AAAA;ACXxC;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAA4B;;AAAsB;;AAAI;;AAAI;;AAC1D;;AAAuD;;AAAY;;AACvE;;AACJ;;AACA;;AAA6B;;AAAY;;AAC7C;;AACJ;;AACJ;;AACJ;;AAKI;;AACI;;AACI;;AACI;;AACJ;;AAGA;;AACI;;AACI;;AAGA;;AAGJ;;AACJ;;AACJ;;AACJ;;;;AAfiC;;AAAA;;AAOjB;;AAAA;;AAEK;;AAAA;;;;;;;;;sEDpBZA,2B,EAA2B;cALvC,uDAKuC;eAL7B;AACT7L,kBAAQ,EAAE,yBADD;AAETC,qBAAW,EAAE,sCAFJ;AAGTC,mBAAS,EAAE,CAAC,qCAAD;AAHF,S;AAK6B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEZxC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACoC4C;;AAAyC;;AAAoB;;;;;;AAC7D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AASL;;AAA6D;;AAAoB;;;;;;AACjF;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AASL;;AAAgE;;AAAoB;;;;;;AACpF;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAIJ;;;;;;;;AARS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAKT;;AACI;;AACJ;;;;;;AACA;;AACI;;AAAgB;;AAAM;;AAC1B;;;;;;AAD0B;;AAAA;;;;;;AAE1B;;AACI;;AACA;;AAAG;;AAAO;;AAAI;;AAClB;;;;;;AADkB;;AAAA;;;;QDpE7CiM,6B;;;AAUX,6CACUC,YADV,EAEUzJ,WAFV,EAEmC;AAAA;;AADzB,aAAAyJ,YAAA,GAAAA,YAAA;AACA,aAAAzJ,WAAA,GAAAA,WAAA;AAVV,aAAA0J,gBAAA,GAAmB,KAAnB;AACA,aAAAC,iBAAA,GAAoB,KAApB;AACA,aAAAlE,YAAA,GAAe,EAAf;AACA,aAAAkB,cAAA,GAAiB,EAAjB;AACA,aAAAiD,aAAA,GAAwB,IAAxB;AACA,aAAArE,IAAA,GAAW,EAAX;AAKsC;;;;mCAE9B;AAAA;;AACN,eAAKvF,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAA1B,IAAI,EAAI;AAClD,mBAAI,CAAC2M,YAAL,CAAkB1I,OAAlB,CAA0BjE,IAAI,CAACf,EAA/B,EAAmCyC,SAAnC,CAA6C,UAAAqL,GAAG,EAAI;AAClD,qBAAI,CAACtL,MAAL,GAAcsL,GAAd;AACD,aAFD;;AAGA,mBAAI,CAACJ,YAAL,CAAkBtK,SAAlB,CAA4BrC,IAAI,CAACf,EAAjC,EAAqCyC,SAArC,CAA+C,UAAA0C,MAAM,EAAI;;;AACvD,qBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,aAFD;AAGD,WAPD;AAQD;;;mCAEO;AAAA;;AACN,cAAI,KAAKwG,IAAL,CAAUN,WAAV,KAA0B,KAAKM,IAAL,CAAUuE,eAAxC,EAAwD;AACtD,iBAAKF,aAAL,GAAqB,KAArB;AACA3L,mBAAO,CAACC,GAAR,CAAY,yBAAZ;AACA;AACD;;AACD,cAAM6L,QAAQ,GAAG,IAAI,gEAAJ,CAAa,KAAKxE,IAAL,CAAUP,WAAvB,EAAoC,KAAKO,IAAL,CAAUN,WAA9C,CAAjB;AACA,eAAKwE,YAAL,CAAkBO,cAAlB,CAAiC,KAAKzL,MAAL,CAAYxC,EAA7C,EAAiDgO,QAAjD,EAA2DvL,SAA3D,CAAqE,UAAA6H,OAAO,EAAG;AAC7EpI,mBAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCC,IAAI,CAACC,SAAL,CAAeiI,OAAf,CAAlC;AACA,mBAAI,CAACqD,gBAAL,GAAwB,KAAxB;AACA,mBAAI,CAACC,iBAAL,GAAyB,IAAzB;AACA,mBAAI,CAAChD,cAAL,GAAsBN,OAAO,CAACA,OAA9B;AACAe,sBAAU,CAAC;AAAA,qBAAM,OAAI,CAACT,cAAL,GAAsB,EAA5B;AAAA,aAAD,EAAiC,IAAjC,CAAV;AACD,WAND,EAMG,UAAAR,GAAG,EAAI;AACR,mBAAI,CAACuD,gBAAL,GAAwB,IAAxB;AACAzL,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,IAAI,CAACC,SAAL,CAAe+H,GAAf,CAAjC;AACA,mBAAI,CAACV,YAAL,GAAoBU,GAAG,CAACC,KAAJ,CAAUC,OAA9B;AACD,WAVD;AAWD;;;;;;;uBA3CUmD,6B,EAA6B,8I,EAAA,0I;AAAA,K;;;YAA7BA,6B;AAA6B,iD;AAAA,e;AAAA,c;AAAA,86C;AAAA;AAAA;;;ACX1C;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAA4B;;AAAY;;AAAO;;AAAI;;AACnD;;AAAuD;;AAAe;;AAC1E;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AAEI;;AACI;;AAGI;;AACI;;AACJ;;AAGA;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAmB;AAAA;;AAAA;;AAAA,sCAA4B,IAAAhJ,QAAA,EAA5B;AAAsC,WAAtC;;AACf;;AACI;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAY;;AACvC;;AASA;;AACI;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAY;;AACvC;;AASA;;AACI;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAoB;;AAC/C;;AAUA;;AAGA;;AAGA;;AAIA;;AACI;;AAA8C;;AAAM;;AACxD;;AACJ;;AAGJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACR;;;;;;;;;;;;AAzEyC;;AAAA;;AAWG;;AAAA;;AAGsB;;AAAA;;AAUtB;;AAAA;;AAGsB;;AAAA;;AAUtB;;AAAA;;AAGsB;;AAAA;;AAUO;;AAAA;;AAGD;;AAAA;;AAGC;;AAAA;;;;;;;;;sEDlE5DgJ,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACTnM,kBAAQ,EAAE,4BADD;AAETC,qBAAW,EAAE,yCAFJ;AAGTC,mBAAS,EAAE,CAAC,wCAAD;AAHF,S;AAK+B,Q;;;;;;;;;;;;;;;;;;;;;;;;AEX1C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa0M,wB;;;AAEX,0CAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,wB;AAAwB,K;;;YAAxBA,wB;AAAwB,4C;AAAA,c;AAAA,a;AAAA;AAAA;ACPrC;;AAAG;;AAAwB;;;;;;;;sEDOdA,wB,EAAwB;cALpC,uDAKoC;eAL1B;AACT5M,kBAAQ,EAAE,uBADD;AAETC,qBAAW,EAAE,oCAFJ;AAGTC,mBAAS,EAAE,CAAC,mCAAD;AAHF,S;AAK0B,Q;;;;;;;;;;;;;;;;;;;;AEPrC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACmB4C;;;;;;AACI;;;;;;AACJ;;;;;;;;;;;;AAoBQ;;AACI;;AAII;;AACJ;;AACJ;;;;;;AAHQ;;AAAA;;AAFmB;;AAGnB;;AAAA;;;;;;;;AA5CpD;;AACI;;AAEI;;AACJ;;AACA;;AAEI;;AACI;;AACI;;AAAuB;;AAAiB;;AACxC;;AAEI;;AACI;;AACI;;AACI;;AAEI;;AAEA;;AAEJ;;AACA;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAkB;;AAA6B;;AACtC;;AACT;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAEJ;;AACA;;AAAoC;;AAE7B;;AACX;;AAEJ;;AACA;;AACI;;AAQJ;;AACJ;;AAIJ;;AACJ;;AACJ;;AACJ;;AAEA;;AACI;;AACI;;AAAO;;AAAS;;AAA0B;;AAAC;;AAAO;;AAClD;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAM;;AAA0B;;AAAC;;AAAO;;AAC/C;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAW;;AAA0B;;AAAC;;AAAO;;AACpD;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAlC;;AAEJ;;AACJ;;AACA;;AACI;;AACI;;AAAO;;AAAU;;AAA0B;;AAAC;;AAAO;;AACnD;;AAAiC;AAAA;;AAAA;;AAAA;AAAA;;AAAjC;;AAEJ;;AACJ;;AAuBA;;AACI;;AACI;;AAAO;;AAAU;;AACjB;;AAAmC;AAAA;;AAAA;;AAAA;AAAA;;AAAnC;;AAEJ;;AACJ;;AACJ;;AACJ;;AACJ;;AAIA;;AACI;;AACI;;AAAuB;;AAAQ;;AAC/B;;AACI;;AAAO;;AAAS;;AAChB;;AAAmC;AAAA;;AAAA;;AAAA;AAAA;;AACtB;;AACjB;;AACJ;;AACA;;AACI;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AAAkE;;AAC/D;;AACf;;AAEJ;;AASJ;;AACJ;;;;;;AA3I6B;;AAAA;;AAc0C;;AAAA;;AAEA;;AAAA;;AAoBtB;;AAAA;;AAqBd;;AAAA;;AAMA;;AAAA;;AAMA;;AAAA,oGAA0B,SAA1B,EAA0B,wBAA1B;;AAOA;;AAAA,mGAAyB,SAAzB,EAAyB,uBAAzB;;AA6BA;;AAAA,qGAA2B,SAA3B,EAA2B,yBAA3B;;AAeL;;AAAA,kGAAwB,SAAxB,EAAwB,sBAAxB;;;;QDlHzB2M,8B;;;AAQX,8CACUlM,aADV,EAEUgC,WAFV,EAEmC;AAAA;;AADzB,aAAAhC,aAAA,GAAAA,aAAA;AACA,aAAAgC,WAAA,GAAAA,WAAA;AAA4B;;;;mCAE9B;AAAA;;AACN,eAAKA,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAAY,GAAG,EAAI;AACjD,mBAAI,CAACpB,aAAL,CAAmB+C,OAAnB,CAA2B3B,GAAG,CAACrD,EAA/B,EAAmCyC,SAAnC,CAA6C,UAAAqL,GAAG,EAAI;AAClD,qBAAI,CAACtL,MAAL,GAAcsL,GAAd;AACD,aAFD;;AAGA,mBAAI,CAAC7L,aAAL,CAAmBmB,SAAnB,CAA6BC,GAAG,CAACrD,EAAjC,EAAqCyC,SAArC,CAA+C,UAAA0C,MAAM,EAAI;;;AACvD,qBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,aAFD;AAGD,WAPD;AAQD;;;mCAGO;AAAA;;AACNd,iBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,IAAI,CAACC,SAAL,CAAe,KAAKG,MAApB,CAAjC;AACC,eAAKP,aAAL,CAAmBmM,YAAnB,CAAgC,KAAK5L,MAArC,EAA6CC,SAA7C,CAAuD,UAAAqL,GAAG,EAAI;AAC5D,mBAAI,CAACtL,MAAL,GAAcsL,GAAd;AACA3M,kBAAM,CAACC,QAAP,CAAgBC,MAAhB;AACF,WAHA;AAIF;;;qCAGY6K,K,EAAK;AAAA;;AAChB,eAAKmC,qBAAL,GAA6BnC,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,CAAwB,CAAxB,CAA7B;AACA,eAAKrK,aAAL,CAAmBqM,YAAnB,CAAgC,KAAK9L,MAAL,CAAYxC,EAA5C,EAA+C,KAAKqO,qBAApD,EAA4E5L,SAA5E,CACE,UAAAyJ,KAAK,EAAI;AACP,gBAAIA,KAAK,CAACM,IAAN,KAAe,mEAAcC,cAAjC,EAAiD;AAC/C,qBAAI,CAACC,cAAL,GAAsBC,IAAI,CAACC,KAAL,CAAW,MAAMV,KAAK,CAACW,MAAZ,GAAqBX,KAAK,CAACY,KAAtC,CAAtB;AACD,aAFD,MAEO,IAAIZ,KAAK,YAAY,iEAArB,EAAmC;AACxC,qBAAI,CAACjK,aAAL,CAAmBmB,SAAnB,CAA6B,OAAI,CAACZ,MAAL,CAAYxC,EAAzC,EAA6CyC,SAA7C,CAAuD,UAAA0C,MAAM,EAAI;AAC/D,uBAAI,CAACA,MAAL,GAAc,4BAA4BA,MAAM,CAACpC,KAAP,CAAaC,IAAvD;AACA,uBAAI,CAAC0J,cAAL,GAAsB,CAAtB;AACA,uBAAI,CAAC2B,qBAAL,GAA6B5K,SAA7B;AACD,eAJD;AAKD;AACF,WAXH,EAYE,UAAA2G,GAAG,EAAI;AACL,mBAAI,CAACsC,cAAL,GAAsB,CAAtB;AACA,mBAAI,CAACK,kBAAL,GAA0B,6BAA1B;AACA,mBAAI,CAACsB,qBAAL,GAA6B5K,SAA7B;AACD,WAhBH;AAiBD;;;;;;;uBApDU0K,8B,EAA8B,8I,EAAA,0I;AAAA,K;;;YAA9BA,8B;AAA8B,kD;AAAA,c;AAAA,a;AAAA,69C;AAAA;AAAA;ACVvC;;AACI;;AA+IJ;;;;AA/IS;;AAAA;;;;;;;;;sEDSAA,8B,EAA8B;cAL1C,uDAK0C;eALhC;AACT7M,kBAAQ,EAAE,6BADD;AAETC,qBAAW,EAAE,0CAFJ;AAGTC,mBAAS,EAAE,CAAC,yCAAD;AAHF,S;AAKgC,Q;;;;;;;;;;;;;;;;;;;;;;;;AEX3C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACagC;;AAA6C;;;;;;AAAkE;;;;;;AAAlE;;AAAA;;;;QDHhE+M,qB;;;AAKX,qCAAoB5J,cAApB,EAAmD;AAAA;;AAA/B,aAAAA,cAAA,GAAAA,cAAA;AAAkC;;;;mCAE9C;AAAA;;AACN,eAAKA,cAAL,CAAoBK,OAApB,CAA4B,KAAKV,MAAL,CAAYW,SAAxC,EAAmDxC,SAAnD,CAA6D,UAAAsI,OAAO,EAAI;AACtE,mBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,WAFD;AAGA,eAAKpG,cAAL,CAAoBvB,SAApB,CAA8B,KAAKkB,MAAL,CAAYW,SAA1C,EAAqDxC,SAArD,CAA+D,UAAA0C,MAAM,EAAI;AACvE,mBAAI,CAACqJ,aAAL,GAAqB,4BAA4BrJ,MAAM,CAACpC,KAAP,CAAaC,IAA9D;AACD,WAFD;AAGD;;;;;;;uBAdUuL,qB,EAAqB,gJ;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,uX;AAAA;AAAA;ACVlC;;AACI;;AAEI;;AACI;;AACI;;AACI;;AACI;;AACJ;;AAEA;;AACI;;AACI;;AACI;;AACJ;;AAEA;;AACI;;AACJ;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACJ;;AACJ;;AAGJ;;AACJ;;AACJ;;;;AAzByF;;AAAA;;AAMnD;;AAAA;;AAIW;;AAAA,iIAA8B,UAA9B,EAA8B,IAA9B;;AAOzB;;AAAA;;;;;;;;;;sEDdXA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTjN,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;gBAE/B;;;;;;;;;;;;;;;;;;;;AEZH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACiCwC;;;;;;AAAkD;;;;;;AAElD;;AACI;;AAAI;;AAAmB;;AAC3B;;;;QDzB3BiN,sB;;;AAKX,sCACUxK,WADV,EAEUW,aAFV,EAGU3C,aAHV,EAGqC;AAAA;;AAAA;;AAF3B,aAAAgC,WAAA,GAAAA,WAAA;AACA,aAAAW,aAAA,GAAAA,aAAA;AACA,aAAA3C,aAAA,GAAAA,aAAA;AAER,aAAKgC,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAA1B,IAAI,EAAI;AAClDmB,iBAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,IAAI,CAACC,SAAL,CAAetB,IAAf,CAArB;;AACA,iBAAI,CAACkB,aAAL,CAAmB+C,OAAnB,CAA2BjE,IAAI,CAACf,EAAhC,EAAoCyC,SAApC,CAA8C,UAAAqL,GAAG,EAAI;AACnD,mBAAI,CAACtL,MAAL,GAAcsL,GAAd;AACD,WAFD;;AAGA,iBAAI,CAAC7L,aAAL,CAAmBmB,SAAnB,CAA6BrC,IAAI,CAACf,EAAlC,EAAsCyC,SAAtC,CAAgD,UAAA0C,MAAM,EAAI;;;AACxD,mBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,WAFD;;AAGA,iBAAI,CAAC4B,aAAL,CAAmByB,UAAnB,CAA8BtF,IAAI,CAACf,EAAnC,EAAuCyC,SAAvC,CAAiD,UAAA6D,OAAO,EAAI;AAC1D,mBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,WAFD;AAGD,SAXD;AAYA;;;;mCAEM,CAEP;;;;;;;uBA1BUmI,sB,EAAsB,0I,EAAA,8I,EAAA,8I;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,e;AAAA,a;AAAA,wrB;AAAA;AAAA;ACZnC;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAA4B;;AAAY;;AAAO;;AAAI;;AACnD;;AAAuD;;AAAc;;AACzE;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAEI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACI;;AAMI;;AACI;;AAEA;;AAGJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AA3ByC;;AAAA;;AAakB;;AAAA;;AAEU;;AAAA;;;;;;;;;sEDvBxDA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTnN,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEZnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKoB;;AACI;;AACJ;;;;;;AAFwD;;AACJ;;AAAA;;;;;;AAEpD;;AACI;;AAEJ;;;;QDCPkN,sB;;;AAMX;AACA,sCAAoBzK,WAApB,EACUhC,aADV,EAEUvB,mBAFV,EAGU8F,MAHV,EAG0B;AAAA;;AAHN,aAAAvC,WAAA,GAAAA,WAAA;AACV,aAAAhC,aAAA,GAAAA,aAAA;AACA,aAAAvB,mBAAA,GAAAA,mBAAA;AACA,aAAA8F,MAAA,GAAAA,MAAA,CAAgB,CAP1B;;AACA,aAAArD,iBAAA,GAA6B,KAA7B;AAM6B;;;;mCAErB;AAAA;;AACN,eAAKc,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAA1B,IAAI,EAAI;AAClD,mBAAI,CAACkB,aAAL,CAAmB+C,OAAnB,CAA2BjE,IAAI,CAACf,EAAhC,EAAoCyC,SAApC,CAA8C,UAAAqL,GAAG,EAAI;AACnD,qBAAI,CAACtL,MAAL,GAAcsL,GAAd;AACA5L,qBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,OAAI,CAACgD,MAApC,EAFmD,CAGnD;AACA;AACA;AACA;AACA;AACA;AACD,aATD,EADkD,CAYlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAED,WAtBD;AAuBD;;;iCAEQ;AACP,eAAKzE,mBAAL,CAAyBQ,OAAzB,GADO,CAEP;;AACA,eAAKsF,MAAL,CAAYG,QAAZ,CAAqB,CAAC,MAAD,CAArB,EAA+BlH,IAA/B,CAAoC,YAAM;AACxC0B,kBAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,WAFD;AAGD;;;;;;;uBA5CUqN,sB,EAAsB,0I,EAAA,8I,EAAA,2J,EAAA,uH;AAAA,K;;;YAAtBA,sB;AAAsB,0C;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,ggC;AAAA;AAAA;ACZnC;;AACI;;AACI;;AACI;;AACI;;AACI;;AAGA;;AAIJ;;AACA;;AACI;;AAAI;;;;;;AAAuE;;AAC/E;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACA;;AAAM;;AAAY;;AACtB;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACA;;AAAM;;AAAO;;AACjB;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACA;;AAAM;;AAAgB;;AAC1B;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACA;;AAAM;;AAAe;;AACzB;;AACJ;;AACJ;;AAWA;;AACI;;AACI;;AACI;;AACA;;AAAM;;AAAe;;AACzB;;AACJ;;AACJ;;AACA;;AAAoB;AAAA,mBAAS,IAAAC,MAAA,EAAT;AAAiB,WAAjB;;AAChB;;AACI;;AACI;;AACA;;AAAM;;AAAM;;AAChB;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAxEuB;;AAAA;;AAGA;;AAAA;;AAMC;;AAAA;;;;;;;;;;sEDFXD,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTpN,kBAAQ,EAAE,qBADD;AAETC,qBAAW,EAAE,kCAFJ;AAGTC,mBAAS,EAAE,CAAC,iCAAD;AAHF,S;AAKwB,Q;;;;;;;;;;;;gBAEhC;;;;;;;;;;;;;;;;;;;;AEdH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACoBgC;;AAKE;;AACF;;;;;;AADE;;AAAA;;;;;;AASF;;AAAmF;;AAAkB;;;;;;AAS7F;;AAAsC;;AAAoB;;;;;;AAC1D;;AACI;;AACJ;;;;;;AALR;;AAEQ;;AACA;;AAGJ;;;;;;;;AAJS;;AAAA;;AACA;;AAAA;;;;;;;;AA3BrB;;AAAsC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAElC;;AACI;;AAOF;;AACF;;AACI;;AAAyC;AAAA;;AAAA;;AAAA;AAAA;;AAAzC;;AAEA;;AAA2B;;AAAK;;AAEhC;;AACA;;AACA;;AACI;;AAAuB;AAAA;;AAAA;;AAAA;AAAA;;AAAvB;;AAEA;;AAA2B;;AAAQ;;AAEvC;;AACA;;AAOA;;AACI;;AAA4D;;AAAiB;;AACjF;;AACA;;AACkB;;AAAK;;AACvB;;AAAmC;;AAAuB;;AACtB;;AAAQ;;AAAI;;AACxD;;;;;;;;;;;;AAhCU;;AAAA;;AAMuC;;AAAA;;AAKI;;AAAA;;AAElB;;AAAA;;AAMnB;;AAAA;;;;QD9B3BoN,c;;;AAQX,8BACU3K,WADV,EAEUqF,YAFV,EAGU9C,MAHV,EAIU+C,cAJV,EAIyC;AAAA;;AAH/B,aAAAtF,WAAA,GAAAA,WAAA;AACA,aAAAqF,YAAA,GAAAA,YAAA;AACA,aAAA9C,MAAA,GAAAA,MAAA;AACA,aAAA+C,cAAA,GAAAA,cAAA;AAXV,aAAAC,IAAA,GAAY,EAAZ;AACA,aAAA7I,UAAA,GAAa,KAAb;AACA,aAAA8I,aAAA,GAAgB,KAAhB;AACA,aAAAC,YAAA,GAAe,EAAf;AACA,aAAAjC,KAAA,GAAkB,EAAlB;AACA,aAAAkC,MAAA,GAAgB,gBAAhB;AAM4C;;;;mCAEjC;AAAA;;AACT,cAAI,KAAKL,YAAL,CAAkBxI,QAAlB,EAAJ,EAAkC;AAChC,iBAAKH,UAAL,GAAkB,IAAlB;AACA,iBAAK8G,KAAL,GAAa,KAAK6B,YAAL,CAAkBtI,OAAlB,GAA4ByG,KAAzC;AACD;;AACD,eAAK8B,cAAL,CAAoBK,aAApB,CACanH,SADb,CACuB,UAAAoH,MAAM,EAAI;AACzB,mBAAI,CAACF,MAAL,GAAcE,MAAM,CAACC,GAAP,CAAW,QAAX,CAAd;AACA5H,mBAAO,CAACC,GAAR,CAAa,6BAA4B,OAAI,CAACwH,MAA9C;AACH,WAJL;AAKD;;;mCAEU;AAAA;;AACT,eAAK1F,WAAL,CAAiB4K,WAAjB,CAA6B,KAAKrF,IAAlC,EAAwC/G,SAAxC,CACE,UAAC1B,IAAD,EAAe;AACb,mBAAI,CAACuI,YAAL,CAAkBU,SAAlB,CAA4BjJ,IAAI,CAACkJ,WAAjC;;AACA,mBAAI,CAACX,YAAL,CAAkBY,QAAlB,CAA2BnJ,IAA3B;;AACA,mBAAI,CAACuI,YAAL,CAAkBa,YAAlB,CAA+BpJ,IAAI,CAACwG,QAApC;;AAEA,mBAAI,CAACkC,aAAL,GAAqB,KAArB;AACA,mBAAI,CAAC9I,UAAL,GAAkB,IAAlB;AACA,mBAAI,CAAC8G,KAAL,GAAa,OAAI,CAAC6B,YAAL,CAAkBtI,OAAlB,GAA4ByG,KAAzC;;AACA,mBAAI,CAACxD,WAAL,CAAiBoD,eAAjB,CAAiC7C,IAAjC,CAAsCzD,IAAtC;;AACAmB,mBAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,mBAAO,CAACC,GAAR,CAAY,OAAI,CAACmH,YAAL,CAAkBtI,OAAlB,EAAZ;AACAkB,mBAAO,CAACC,GAAR,CAAa,eAAc,OAAI,CAACwH,MAAhC;;AACG,gBAAI,OAAI,CAACA,MAAL,IAAa,IAAjB,EAAuB;AAClB,qBAAI,CAACnD,MAAL,CAAYG,QAAZ,CAAsB,CAAC,OAAI,CAACgD,MAAN,CAAtB;AACJ,aAFD,MAEO;AACF,qBAAI,CAACnD,MAAL,CAAYG,QAAZ,CAAsB,CAAC,qBAAD,CAAtB;AACJ;AAGL,WApBH,EAqBE,UAAAyD,GAAG,EAAI;AACL,mBAAI,CAACV,YAAL,GAAoBU,GAAG,CAACC,KAAJ,CAAUC,OAA9B;AACA,mBAAI,CAACb,aAAL,GAAqB,IAArB;AACD,WAxBH;AA0BD;;;;;;;uBArDUmF,c,EAAc,mI,EAAA,oJ,EAAA,uH,EAAA,+H;AAAA,K;;;YAAdA,c;AAAc,uC;AAAA,e;AAAA,a;AAAA,isC;AAAA;AAAA;ACT3B;;AACI;;AACI;;AAGI;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AAAI;;AAAM;;AAAM;;AAAM;;AAAO;;AACjC;;AACA;;AAuCJ;;AACJ;;AACJ;;AAGJ;;AACJ;;AAEJ;;;;AA/C8B;;AAAA;;;;;;;;;sEDLjBA,c,EAAc;cAL1B,uDAK0B;eALhB;AACTtN,kBAAQ,EAAE,kBADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEZ3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACUQ;;;;;;AAAgC;;;;;;AAChC;;;;;;AAgBC;;AAIC;;AAA2C;;AAA3C;;AACD;;;;;;AAD6B;;AAAA;;AAA4C;;AAAA;;;;;;AAK1E;;AAA8E;;AAAkB;;;;;;AAAlB;;AAAA;;;;;;AAoChF;;;;;;AAAe,2FAAiB,QAAjB,EAAiB,cAAjB;;;;;;AAMf;;;;;;AAA2B,2FAAiB,QAAjB,EAAiB,cAAjB;;;;;;AAA3B;;;;;;AAAY;;;;;;;;AAMZ;;AAAa;AAAA;;AAAA;;AAAA;AAAA;;AACb;;;;;;AADkD,2FAAiB,WAAjB,EAAiB,iBAAjB;;;;;;AAAlD;;;;;;AAAmC;;;;QDxE5BsN,gB;;;AASX,gCAAoBrE,KAApB,EACUxI,aADV,EAEUqH,YAFV,EAE6C;AAAA;;AAFzB,aAAAmB,KAAA,GAAAA,KAAA;AACV,aAAAxI,aAAA,GAAAA,aAAA;AACA,aAAAqH,YAAA,GAAAA,YAAA;AANV,aAAAnG,iBAAA,GAA6B,KAA7B;AAEA,aAAAnD,EAAA,GAAa,EAAb;AACA,aAAA+O,SAAA,GAAqB,KAArB;AAGgD;;;;mCAErC;AAAA;;AACT,eAAKtE,KAAL,CAAWZ,MAAX,CACGpH,SADH,CAEI,UAACoH,MAAD,EAAoB;AAClB,mBAAI,CAAC7J,EAAL,GAAU6J,MAAM,CAAC,IAAD,CAAhB;AACA3H,mBAAO,CAACC,GAAR,CAAY,cAAc,OAAI,CAACnC,EAA/B,EAFkB,CAGlB;;AACA,mBAAI,CAACiC,aAAL,CAAmB+C,OAAnB,CAA2B,OAAI,CAAChF,EAAhC,EAAoCyC,SAApC,CAA8C,UAAAY,GAAG,EAAI;AACnD,qBAAI,CAACb,MAAL,GAAca,GAAd;AACAnB,qBAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,OAAI,CAACK,MAAL,CAAY6B,MAApC;AACD,aAHD;;AAIA,mBAAI,CAACpC,aAAL,CAAmBmB,SAAnB,CAA6B,OAAI,CAACpD,EAAlC,EAAsCyC,SAAtC,CAAgD,UAAAY,GAAG,EAAI;;;AACrD,qBAAI,CAAC8B,MAAL,GAAc,6BAAyB,YAAG9B,GAAH,MAAM,IAAN,IAAM,aAAN,GAAM,MAAN,GAAM,GAAEN,KAAR,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAEC,IAAxC,CAAd;AACAd,qBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,OAAI,CAACgD,MAApC;;AACA,kBAAI,aAAA9B,GAAA,MAAG,IAAH,IAAG,aAAH,GAAG,MAAH,GAAG,GAAEN,KAAL,MAAU,IAAV,IAAU,aAAV,GAAU,MAAV,GAAU,GAAEC,IAAZ,MAAqBS,SAAzB,EAAoC;AAClC,uBAAI,CAACN,iBAAL,GAAyB,IAAzB;AACAjB,uBAAO,CAACC,GAAR,CAAY,cAAZ;AAED;AACF,aARD;;AASA,mBAAI,CAACF,aAAL,CAAmByB,SAAnB,CAA6B,OAAI,CAAC1D,EAAlC,EAAsCyC,SAAtC,CAAgD,UAAAY,GAAG,EAAI;AACrD,qBAAI,CAACf,MAAL,GAAce,GAAd;AACAnB,qBAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC,OAAI,CAACG,MAAxC;AACD,aAHD;;AAIA,mBAAI,CAACL,aAAL,CAAmBM,eAAnB,CAAmC,OAAI,CAACvC,EAAxC,EAA4CyC,SAA5C,CAAsD,UAAAY,GAAG,EAAI;AAC3D;AACA,qBAAI,CAACR,YAAL,GAAoBQ,GAAG,CAACP,GAAJ,CAAQ,UAAAF,KAAK;AAAA,uBAAI,4BAA4BA,KAAK,CAACG,KAAN,CAAYC,IAA5C;AAAA,eAAb,CAApB;AACD,aAHD;;AAIA,mBAAI,CAAC+L,SAAL,GAAiB,OAAI,CAACzF,YAAL,CAAkB9B,WAAlB,MAAmC,SAApD;AAGD,WA9BL;AAgCD;;;kCAES;AAAA;;AACR,eAAKvF,aAAL,CAAmB+C,OAAnB,CAA2B,KAAKxC,MAAL,CAAYxC,EAAvC,EAA2CyC,SAA3C,CAAqD,UAAAY,GAAG,EAAI;AAC1D,mBAAI,CAACb,MAAL,GAAca,GAAd;AACD,WAFD;AAGD;;;;;;;uBApDUyL,gB,EAAgB,+H,EAAA,8I,EAAA,2J;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,e;AAAA,c;AAAA,2pD;AAAA;AAAA;ACZ7B;;AAEC;;AACC;;AACC;;AACC;;AACC;;AACC;;AACC;;AAEC;;AACA;;AAED;;AACD;;AACA;;AACC;;AAAqB;;AAA+C;;;;;;AAAkE;;AAAI;;AAC1I;;AAAoC;;AAAuB;;AAC3D;;AAAyB;;AAAsB;;AAC/C;;AACC;;AAEA;;AAAgC;;AAA2B;;AAC5D;;AACA;;AACC;;AAAwB;;AAAqD;;;;;;AAA6D;;AAC1I;;AACC;;AAMD;;AACD;;AACA;;AACC;;AACD;;AACD;;AACD;;AAED;;AACA;;AACC;;AACC;;AACC;;AAAI;;AAA8B;;AAAoC;;AACtE;;AAAI;;AAAoD;;;;AAAoD;;AAC5G;;AAAI;;AAA+C;;;;;;AAAmE;;AACvH;;AACD;;AACA;;AACC;;AAAwD;;AAAgB;;AACzE;;AACD;;AACD;;AACD;;AACD;;AAMA;;AAGC;;AAGC;;AACC;;AACC;;AAAc;;AAAQ;;AACtB;;AAGD;;AACA;;AACC;;AAAc;;AAAM;;AACpB;;AAGD;;AACA;;AACC;;AAAc;;AAAO;;AACrB;;AAID;;AACD;;AAMA;;AAED;;AAGD;;AAKD;;;;;;AAhGU;;AAAA;;AAEG;;AAAA;;AACA;;AAAA;;AAKkB;;AAAA;;AAA4C;;AAAA;;AAChC;;AAAA;;AACX;;AAAA;;AAEP;;AAAA;;AAEe;;AAAA;;AAG6C;;AAAA;;AAE/C;;AAAA;;AASD;;AAAA;;AASI;;AAAA;;AACsB;;AAAA;;AACL;;AAAA;;AAIjC;;AAAA;;AAkBjB;;AAAA;;AAMA;;AAAA;;AAMA;;AAAA;;AAaA;;AAAA;;;;;;;;;;sEDlFKA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTxN,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEZ7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC0BwC;;AAAuC;;AAAsB;;;;;;AAC7D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAsC;;AAAqB;;;;;;AAC3D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAsC;;AAAoB;;;;;;AAC1D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAmC;;AAAwB;;;;;;AAC3D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAmC;;AAAiB;;;;;;AACpD;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAsC;;AAAoB;;;;;;AAC1D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AASb;;AACI;;AAAc;;AAAM;;AACxB;;;;;;AADwB;;AAAA;;;;;;;;AAlG5B;;AAAwC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAGpC;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAU;;AACrC;;AASJ;;AACA;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAS;;AACpC;;AASJ;;AACA;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAQ;;AACnC;;AASJ;;AACA;;AACI;;AACA;AAAA;;AAAA;;AAAA;AAAA;;AADA;;AAGA;;AAA2B;;AAAY;;AACvC;;AASJ;;AACA;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAK;;AAChC;;AASJ;;AACA;;AACI;;AACA;AAAA;;AAAA;;AAAA;AAAA;;AADA;;AAGA;;AAA2B;;AAAe;;AAC1C;;AASJ;;AACA;;AACI;;AAAkD;;AAAwB;;AAC9E;;AACA;;AAAiE;;AAAM;;AACvE;;AAGJ;;;;;;;;;;;;;;;;;;;;AA/FY;;AAAA;;AAGsB;;AAAA;;AAYtB;;AAAA;;AAGsB;;AAAA;;AAYtB;;AAAA;;AAGsB;;AAAA;;AAY1B;;AAAA;;AAG0B;;AAAA;;AAYtB;;AAAA;;AAGsB;;AAAA;;AAY1B;;AAAA;;AAG0B;;AAAA;;AAcG;;AAAA;;;;;;AAIrC;;AACI;;AACF;;;;QD/GjBwN,e;;;AAOX,+BAAoBxI,MAApB,EAA2CvC,WAA3C,EAAqE;AAAA;;AAAjD,aAAAuC,MAAA,GAAAA,MAAA;AAAuB,aAAAvC,WAAA,GAAAA,WAAA;AAL3C,aAAAuF,IAAA,GAAY,EAAZ;AACA,aAAAyF,YAAA,GAAe,KAAf;AACA,aAAAC,cAAA,GAAiB,KAAjB;AACA,aAAAxF,YAAA,GAAe,EAAf;AAEwE;;;;mCAE7D,CACV;;;mCAEU;AAAA;;AACT,eAAKzF,WAAL,CAAiBkL,cAAjB,CAAgC,KAAK3F,IAArC,EAA2C/G,SAA3C,CACE,UAAAO,IAAI,EAAI;AACNd,mBAAO,CAACC,GAAR,CAAYa,IAAZ;AACA,mBAAI,CAACiM,YAAL,GAAoB,IAApB;AACA,mBAAI,CAACC,cAAL,GAAsB,KAAtB;;AACA,mBAAI,CAAC1I,MAAL,CAAYG,QAAZ,CAAqB,CAAC,cAAD,CAArB;AAED,WAPH,EAQE,UAAAyD,GAAG,EAAI;AACL,mBAAI,CAACV,YAAL,GAAoBU,GAAG,CAACC,KAAJ,CAAUC,OAA9B;AACA,mBAAI,CAAC4E,cAAL,GAAsB,IAAtB;AACD,WAXH;AAaD;;;;;;;uBA1BUF,e,EAAe,uH,EAAA,0I;AAAA,K;;;YAAfA,e;AAAe,wC;AAAA,e;AAAA,a;AAAA,8+D;AAAA;AAAA;ACRxB;;AACI;;AACI;;AAIQ;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AAAI;;AAAgB;;AAAuD;;AAAa;;AAAI;;AAChG;;AAGA;;AAqGA;;AAKJ;;AACJ;;AAIR;;AACJ;;AAEJ;;;;AAlH8B;;AAAA;;AAqG2B;;AAAA;;;;;;;;;sED7GhDA,e,EAAe;cAL3B,uDAK2B;eALjB;AACT1N,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEmBI;;AACI;;AACI;;AACI;;AAAI;;AAAK;;AACb;;AACA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAsB;;AAAI;;AAChE;;AACJ;;AACJ;;;;;;;;AACA;;AACI;;AACI;;AACI;;AAAI;;AAAO;;AACf;;AACA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAuB;;AACjD;;AACZ;;AACJ;;AACJ;;;;;;;;AACA;;AACI;;AACI;;AACI;;AAAI;;AAAK;;AACb;;AACA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAsB;;AAAI;;AAChE;;AACJ;;AACJ;;;;;;;;AACA;;AACI;;AACI;;AACI;;AAAI;;AAAM;;AACd;;AACA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAsB;;AAAI;;AAChE;;AACJ;;AACJ;;;;;;;;AACA;;AACI;;AACI;;AACI;;AAAI;;AAAO;;AACf;;AACA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAsB;;AAAI;;AAChE;;AACJ;;AACJ;;;;;;AAII;;;;;;;;AADJ;;AACI;;AACA;;AAA2C;AAAA;;AAAA;;AAAA;AAAA;;AAAoB;;AAAQ;;AAC3E;;;;;;AAFW;;AAAA;;;;ACtE3C,QAAM4N,YAAY,GAAoB;AACpCC,yBAAmB,EAAE,IADe;AAEpCC,yBAAmB,EAAE;AAFe,KAAtC;;QAUaC,kB;;;AA4BX,kCACU9E,KADV,EAEU9F,cAFV,EAGU1C,aAHV,EAIUgC,WAJV,EAImC;AAAA;;AAHzB,aAAAwG,KAAA,GAAAA,KAAA;AACA,aAAA9F,cAAA,GAAAA,cAAA;AACA,aAAA1C,aAAA,GAAAA,aAAA;AACA,aAAAgC,WAAA,GAAAA,WAAA,CAAyB,CAxBnC;;AACA,aAAAuL,YAAA,GAAe,iEAAiB,SAAhC,CAuBmC,CAvBQ;AAM3C;;AACA,aAAAC,SAAA,GAAuB,4DAAUC,IAAjC;AA8MA,aAAAC,UAAA,GAAqB,EAArB;AACA,aAAAC,MAAA,GAAiB,EAAjB;AA/LsC;;;;mCAE9B;AAAA;;AACN;AACA;AACA,eAAKnF,KAAL,CAAWZ,MAAX,CACGpH,SADH,CAEI,UAACoH,MAAD,EAAoB;AAClB,mBAAI,CAAC5E,SAAL,GAAiB4E,MAAM,CAAC,IAAD,CAAvB;;AACA,mBAAI,CAAClF,cAAL,CAAoBK,OAApB,CAA4B,OAAI,CAACC,SAAjC,EAA4CxC,SAA5C,CAAsD,UAACsI,OAAD,EAAqB;AACzE,qBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,aAFD;AAGD,WAPL;AASA,eAAK9G,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAAY,GAAG,EAAI;AAC7C,mBAAI,CAACpB,aAAL,CAAmB+C,OAAnB,CAA2B3B,GAAG,CAACrD,EAA/B,EAAmCyC,SAAnC,CAA6C,UAAAqL,GAAG,EAAI;AAClD,qBAAI,CAACtL,MAAL,GAAcsL,GAAd;AACD,aAFD;;AAGA,mBAAI,CAAC7L,aAAL,CAAmBmB,SAAnB,CAA6BC,GAAG,CAACrD,EAAjC,EAAqCyC,SAArC,CAA+C,UAAA0C,MAAM,EAAI;;;AACvD,qBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,aAFD;AAGD,WAPL;AAQAd,iBAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKqN,YAA/B;AACA,eAAKK,IAAL,GAAY,IAAIC,SAAJ,CAAc,KAAKN,YAAnB,CAAZ;;AACA,eAAKK,IAAL,CAAUE,MAAV,GAAmB,UAACC,EAAD;AAAA,mBAAe,OAAI,CAACC,MAAL,CAAYD,EAAZ,CAAf;AAAA,WAAnB;;AACA,eAAKH,IAAL,CAAUK,SAAV,GAAsB,UAACC,GAAD;AAAA,mBAAuB,OAAI,CAACC,SAAL,CAAeD,GAAf,CAAvB;AAAA,WAAtB;AACD;;;0CAEiB;AAChBjO,iBAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKkO,WAAzB;AACAnO,iBAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKmO,WAAzB;AACD;;;+BAEMN,E,EAAI;AACT9N,iBAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiD6N,EAAjD;AACD;;;AAED;kCACUG,G,EAAmB;AAC3BjO,iBAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BgO,GAAG,CAACnN,IAA/B;AACA,cAAIuB,OAAO,GAAGnC,IAAI,CAACmO,KAAL,CAAWJ,GAAG,CAACnN,IAAf,CAAd;AACA,cAAIA,IAAI,GAAGuB,OAAO,CAACvB,IAAnB;;AACA,kBAAQuB,OAAO,CAAC2H,KAAhB;AACE;AACA,iBAAK,OAAL;AACE,mBAAKsE,WAAL,CAAiBxN,IAAjB;AACA;;AACF,iBAAK,QAAL;AACE,mBAAKyN,YAAL,CAAkBzN,IAAlB;AACA;AACF;;AACA,iBAAK,WAAL;AACE,mBAAK0N,eAAL,CAAqB1N,IAArB;AACA;;AACF,iBAAK,MAAL;AACE,mBAAK2N,UAAL,CAAgB3N,IAAhB;AACA;;AACF,iBAAK,aAAL;AACE,mBAAK4N,gBAAL,CAAsB5N,IAAtB;AACA;;AACF,iBAAK,WAAL;AACE,mBAAK6N,cAAL,CAAoB7N,IAApB;AACA;;AACF,iBAAK,UAAL;AACE,mBAAK8N,aAAL,CAAmB9N,IAAnB;AACA;;AACF;AACE;AAzBJ;AA2BD;;;yCAGgB;AAAA;;AACf,cAAI+N,aAAa,GAAqB;AACpCC,sBAAU,EAAE,CACV;AAAEC,kBAAI,EAAE;AAAR,aADU,EAEV;AAAEA,kBAAI,EAAE;AAAR,aAFU,EAGV;AAAEA,kBAAI,EAAE,uBAAR;AAAiC,4BAAc,YAA/C;AAA6D,0BAAY;AAAzE,aAHU;AADwB,WAAtC;AAOA,eAAKC,cAAL,GAAsB,IAAIC,iBAAJ,CAAsBJ,aAAtB,CAAtB;AACA7O,iBAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAK+O,cAA5C,EATe,CAWf;;AACA,eAAKA,cAAL,CAAoBE,cAApB,GAAqC,UAAClF,KAAD,EAAW;AAC9C,gBAAIA,KAAK,CAACmF,SAAV,EAAqB;AACnB,qBAAI,CAACC,IAAL,CAAU;AACRpF,qBAAK,EAAE,WADC;AAERlJ,oBAAI,EAAEkJ,KAAK,CAACmF;AAFJ,eAAV;AAID;AACF,WAPD;;AAQA,eAAKH,cAAL,CAAoBK,OAApB,GAA8B,UAACvB,EAAD;AAAA,mBAAuB,OAAI,CAACwB,eAAL,CAAqBxB,EAArB,CAAvB;AAAA,WAA9B;AAED;;;2CAEe;AAAA;;AACd;AACA,eAAKyB,cAAL,GAFc,CAGd;;AACA,cAAMC,WAAW,GAAG;AAClBC,iBAAK,EAAE,IADW;AACLC,iBAAK,EAAE;AADF,WAApB,CAJc,CAOd;;AACA,iBAAOC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCL,WAApC,EACLjS,IADK,CACA,UAACuS,MAAD,EAAY;AACf;AACA;AACAA,kBAAM,CAACC,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK;AAAA,qBAAI,OAAI,CAACjB,cAAL,CAAoBkB,QAApB,CAA6BD,KAA7B,EAAoCH,MAApC,CAAJ;AAAA,aAAhC;;AACA,mBAAI,CAACK,SAAL,CAAeL,MAAf;AACD,WANI,WAOE,UAAU5H,GAAV,EAAe;AACpB;AACAlI,mBAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,IAAI,CAACC,SAAL,CAAe+H,GAAf,CAApC;AACD,WAVI,CAAP;AAWD;;;6BAEIE,O,EAAS;AACZpI,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,IAAI,CAACC,SAAL,CAAeiI,OAAf,CAA/B;AACA,eAAKuF,IAAL,CAAUyB,IAAV,CAAelP,IAAI,CAACC,SAAL,CAAeiI,OAAf,CAAf;AACD;;;sCAGa;AAAA;;AACZ,iBAAO,KAAK4G,cAAL,CAAoBoB,WAApB,CAAgClD,YAAhC,EAA8C3P,IAA9C,CAAmD,UAAC8S,KAAD,EAAW;AACnE,mBAAI,CAACrB,cAAL,CAAoBsB,mBAApB,CAAwCD,KAAxC,EAA+C9S,IAA/C,CAAoD;AAAA,qBAAM,OAAI,CAAC6R,IAAL,CAAU;AAClEpF,qBAAK,EAAE,OAD2D;AAElElJ,oBAAI,EAAEuP;AAF4D,eAAV,CAAN;AAAA,aAApD;AAID,WALM,EAKJ,UAAClI,KAAD,EAAW;AACZoI,iBAAK,CAAC,yBAAD,CAAL;AACAvQ,mBAAO,CAACC,GAAR,CAAYkI,KAAZ;AACD,WARM,CAAP;AASD;;;oCAEWkI,K,EAAkC;AAAA;;AAC5C,eAAKrB,cAAL,CAAoBwB,oBAApB,CAAyC,IAAIC,qBAAJ,CAA0BJ,KAA1B,CAAzC,EAD4C,CAG5C;;AACA,eAAKrB,cAAL,CAAoB0B,YAApB,GAAmCnT,IAAnC,CAAwC,UAACoT,MAAD,EAAY;AAClD,mBAAI,CAAC3B,cAAL,CAAoBsB,mBAApB,CAAwCK,MAAxC,EACCpT,IADD,CACM;AAAA,qBACN,OAAI,CAAC6R,IAAL,CAAU;AACRpF,qBAAK,EAAE,QADC;AAERlJ,oBAAI,EAAE6P;AAFE,eAAV,CADM;AAAA,aADN;AAMD,WAPD,EAOG,UAACxI,KAAD,EAAW;AACZoI,iBAAK,CAAC,0BAAD,CAAL;AACAvQ,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCkI,KAAjC;AACD,WAVD;AAYD;;;wCAEegH,S,EAAgC;AAC9C,eAAKH,cAAL,CAAoB4B,eAApB,CAAoC,IAAIC,eAAJ,CAAoB1B,SAApB,CAApC;AACAnP,iBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,IAAI,CAACC,SAAL,CAAegP,SAAf,CAAhC;AACD;;;qCAEYwB,M,EAAmC;AAC9C,eAAK3B,cAAL,CAAoBwB,oBAApB,CAAyC,IAAIC,qBAAJ,CAA0BE,MAA1B,CAAzC;AACA3Q,iBAAO,CAACC,GAAR,CAAY,uCAAZ;AACD;;;mCAGU6Q,M,EAAQ;AACjB9Q,iBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB6Q,MAAzB;AACA,eAAKrD,UAAL,GAAkBqD,MAAlB;AACA,eAAKvD,SAAL,GAAiB,4DAAUwD,OAA3B;AACD;;;yCAEsBjQ,I,EAAM;;;;;;;;AAC3Bd,2BAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCa,IAAlC;AACAd,2BAAO,CAACC,GAAR,CAAY,gBAAZ,E,CACA;;;AACA,2BAAM,KAAKmQ,WAAL,EAAN;;;AACApQ,2BAAO,CAACC,GAAR,CAAY,eAAZ;AACA,yBAAKsN,SAAL,GAAiB,4DAAUyD,OAA3B;;;;;;;;;AACD;;;uCAEclQ,I,EAAM;AACnBd,iBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCa,IAAhC;AACA,eAAKyM,SAAL,GAAiB,4DAAU0D,MAA3B;AACD;;;sCAEanQ,I,EAAM;AAClBd,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Ba,IAA/B;AACA,eAAKyM,SAAL,GAAiB,4DAAU2D,KAA3B;AACA,eAAKC,IAAL;AACD;;;oCAIW;AAAA;;AACVnR,iBAAO,CAACC,GAAR,CAAY,iBAAZ;;AAEA,cAAG,CAAC,KAAKK,MAAT,EAAgB;AACdN,mBAAO,CAACC,GAAR,CAAY,wBAAZ;AACA;AACD;;AAED,cAAG,CAAC,KAAK4I,OAAT,EAAiB;AACf7I,mBAAO,CAACC,GAAR,CAAY,yBAAZ;AACA;AACD;;AAED,eAAKmR,gBAAL,GAAwB7T,IAAxB,CAA6B,YAAM;AACjC,mBAAI,CAAC6R,IAAL,CAAU;AACRtO,kBAAI,EAAE,OAAI,CAAC4M,MADH;AAER1D,mBAAK,EAAE,MAFC;AAGRqH,sBAAQ,EAAE,OAAI,CAACxI,OAAL,CAAa/K,EAHf;AAIRwT,sBAAQ,EAAE,OAAI,CAAChR,MAAL,CAAYxC;AAJd,aAAV;;AAMA,mBAAI,CAACyP,SAAL,GAAiB,4DAAUwD,OAA3B;AACD,WARD;AASD;;;qCAEY;AAAA;;AACX/Q,iBAAO,CAACC,GAAR,CAAY,aAAZ,EADW,CAEX;;AACAD,iBAAO,CAACC,GAAR,CAAY,kBAAZ,EAHW,CAIX;;AACA,eAAKmR,gBAAL,GAAwB7T,IAAxB,CAA6B,YAAM;AACjC,mBAAI,CAAC6R,IAAL,CAAU;AACRtO,kBAAI,EAAE,OAAI,CAAC2M,UADH;AAERzD,mBAAK,EAAE;AAFC,aAAV;;AAIA,mBAAI,CAACuD,SAAL,GAAiB,4DAAUyD,OAA3B;AACD,WAND;AAOD;;;mCAEU;AACThR,iBAAO,CAACC,GAAR,CAAY,WAAZ;AACA,eAAKmP,IAAL,CAAU;AACRtO,gBAAI,EAAE,KAAK2M,UADH;AAERzD,iBAAK,EAAE;AAFC,WAAV;AAIA,eAAKuD,SAAL,GAAiB,4DAAU0D,MAA3B;AACD;;;kCAES;AACR,eAAK1D,SAAL,GAAiB,4DAAU2D,KAA3B;AACA,eAAK9B,IAAL,CAAU;AACRtO,gBAAI,EAAE,KAAK2M,UADH;AAERzD,iBAAK,EAAE;AAFC,WAAV;AAIA,eAAKmH,IAAL;AACD;;;qCAES;AACR,eAAKA,IAAL;AACA,eAAK5D,SAAL,GAAiB,4DAAUgE,QAA3B;AACA,eAAKnC,IAAL,CAAU;AACRtO,gBAAI,EAAE,KAAK2M,UADH;AAERzD,iBAAK,EAAE;AAFC,WAAV;AAID;;;wCAEexM,C,EAAG;AACjBwC,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BzC,CAAC,CAACyS,KAAjC,EAAwCzS,CAAC,CAACgU,OAAF,CAAU,CAAV,CAAxC;;AACA,cAAI;AACF,iBAAKpD,WAAL,CAAiBqD,aAAjB,CAA+BC,SAA/B,GAA2C,IAA3C;AACA,iBAAKtD,WAAL,CAAiBqD,aAAjB,CAA+BC,SAA/B,GAA2ClU,CAAC,CAACgU,OAAF,CAAU,CAAV,CAA3C;AAAwD;AACzD,WAHD,CAGE,OAAOrJ,KAAP,EAAc;AACdnI,mBAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CkI,KAA3C;AACA,iBAAKiG,WAAL,CAAiBqD,aAAjB,CAA+BE,GAA/B,GAAqCC,GAAG,CAACC,eAAJ,CAAoBrU,CAAC,CAACgU,OAAF,CAAU,CAAV,CAApB,CAArC;AACD;AAEF;;;kCAES1B,M,EAAQ;AAChB9P,iBAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,cAAI;AACF,iBAAKkO,WAAL,CAAiBsD,aAAjB,CAA+BC,SAA/B,GAA2C5B,MAA3C;AACD,WAFD,CAEE,OAAO3H,KAAP,EAAc;AACdnI,mBAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CkI,KAA3C;AACA,iBAAKgG,WAAL,CAAiBsD,aAAjB,CAA+BE,GAA/B,GAAqCC,GAAG,CAACC,eAAJ,CAAoB/B,MAApB,CAArC;AACD;;AACD,eAAKgC,WAAL,GAAmBhC,MAAnB;AACD;;;+BAEM;AACL9P,iBAAO,CAACC,GAAR,CAAY,gBAAgB,MAA5B;AACA,eAAK+O,cAAL,CAAoB+C,KAApB;AACA,eAAK/C,cAAL,GAAsB,IAAtB;AACA,eAAK8C,WAAL,CAAiB/B,SAAjB,GAA6BC,OAA7B,CAAqC,UAACC,KAAD,EAAU;AAC7CjQ,mBAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CgQ,KAA5C;AACAA,iBAAK,CAACkB,IAAN;AACD,WAHD;AAKA,eAAKhD,WAAL,CAAiBsD,aAAjB,CAA+BC,SAA/B,GAA2C,IAA3C;AAED;;;iCAGK;AACJ,iBAAO,KAAKnE,SAAL,IAAkB,4DAAUC,IAAnC;AACD;;;mCACO;AACN,iBAAO,KAAKD,SAAL,IAAkB,4DAAU0D,MAAnC;AACD;;;oCACQ;AACP,iBAAO,KAAK1D,SAAL,IAAkB,4DAAUyD,OAAnC;AACD;;;kCACM;AACL,iBAAO,KAAKzD,SAAL,IAAkB,4DAAU2D,KAAnC;AACD;;;oCACQ;AACP,iBAAO,KAAK3D,SAAL,IAAkB,4DAAUwD,OAAnC;AACD;;;qCAES;AACR,iBAAO,KAAKxD,SAAL,IAAkB,4DAAUgE,QAAnC;AACD;;;;;;;uBAxVUlE,kB,EAAkB,+H,EAAA,gJ,EAAA,8I,EAAA,0I;AAAA,K;;;YAAlBA,kB;AAAkB,qC;AAAA;AAAA;;;;;;;;;;;;;;;;;;ADtB/B;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACI;;AAkBI;;AACI;;AACI;;AACI;;AACI;;AAUA;;AAWA;;AAUA;;AAUA;;AAUA;;AAEA;;AAIJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAzFiC;;AAAA;;AAyBI;;AAAA;;AAUA;;AAAA;;AAWA;;AAAA;;AAUA;;AAAA;;AAUA;;AAAA;;AAUE;;AAAA;;AAEF;;AAAA;;;;;;;;;sEC3DxBA,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTjO,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;gBAE5B,uD;iBAAU,a;;;gBACV,uD;iBAAU,a;;;;;;;;;;;;;;;;;;;;ACzBb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa0S,a;;;AAEX,6BACU1N,MADV,EACyB;AAAA;;AAAf,aAAAA,MAAA,GAAAA,MAAA;AAAkB;;;;mCAEpB,CACP;;;+BAEMC,I,EAAaC,K,EAAY;AAC9BxE,iBAAO,CAACC,GAAR,CAAY,WAAWsE,IAAvB,EAA6B,aAAaC,KAA1C;AACA,eAAKF,MAAL,CAAYG,QAAZ,CAAqB,CAAC,QAAD,CAArB,EAAiC;AAAEC,uBAAW,EAAE;AAAE,sBAAQH,IAAV;AAAgB,uBAASC;AAAzB;AAAf,WAAjC;AACD;;;;;;;uBAXUwN,a,EAAa,uH;AAAA,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA,yD;AAAA;AAAA;ACR1B;;AACI;;AACI;;AAAI;;AAAkC;;AACtC;;AAAG;;AAAqE;;AAC5E;;AAyBA;;AAGJ;;;;;;;;;sEDxBaA,a,EAAa;cALzB,uDAKyB;eALf;AACT5S,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;AER1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACoCwC;;AAAyC;;AAAoB;;;;;;AAC7D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AASL;;AAAyC;;AAAoB;;;;;;AAC7D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AASL;;AAA6C;;AAAoB;;;;;;AACjE;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAIJ;;;;;;;;AARS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAKT;;AACI;;AACJ;;;;;;AACA;;AACI;;AAAgB;;AAAM;;AAC1B;;;;;;AAD0B;;AAAA;;;;;;AAE1B;;AACI;;AACA;;AAAG;;AAAO;;AAAI;;AAClB;;;;;;AADkB;;AAAA;;;;QDpEzC2S,uB;;;AAUX,uCACUxP,cADV,EAEUV,WAFV,EAEmC;AAAA;;AADzB,aAAAU,cAAA,GAAAA,cAAA;AACA,aAAAV,WAAA,GAAAA,WAAA;AAVV,aAAA0J,gBAAA,GAAmB,KAAnB;AACA,aAAAC,iBAAA,GAAoB,KAApB;AACA,aAAAlE,YAAA,GAAe,EAAf;AACA,aAAAkB,cAAA,GAAiB,EAAjB;AACA,aAAAiD,aAAA,GAAwB,IAAxB;AACA,aAAArE,IAAA,GAAW,EAAX;AAKsC;;;;mCAE9B;AAAA;;AACN,eAAKvF,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAA1B,IAAI,EAAI;AAClD,mBAAI,CAAC4D,cAAL,CAAoBK,OAApB,CAA4BjE,IAAI,CAACf,EAAjC,EAAqCyC,SAArC,CAA+C,UAAAsI,OAAO,EAAI;AACxD,qBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,aAFD;;AAGA,mBAAI,CAACpG,cAAL,CAAoBvB,SAApB,CAA8BrC,IAAI,CAACf,EAAnC,EAAuCyC,SAAvC,CAAiD,UAAA0C,MAAM,EAAI;;;AACzD,qBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,aAFD;AAGD,WAPD;AAQD;;;mCAEO;AAAA;;AACN,cAAI,KAAKwG,IAAL,CAAUN,WAAV,KAA0B,KAAKM,IAAL,CAAUuE,eAAxC,EAAwD;AACtD,iBAAKF,aAAL,GAAqB,KAArB;AACAxC,sBAAU,CAAC;AAAA,qBAAO,OAAI,CAACwC,aAAL,GAAqB,IAA5B;AAAA,aAAD,EAAmC,IAAnC,CAAV;AACA3L,mBAAO,CAACC,GAAR,CAAY,yBAAZ;AACA;AACD;;AACD,cAAM6L,QAAQ,GAAG,IAAI,gEAAJ,CAAa,KAAKxE,IAAL,CAAUP,WAAvB,EAAoC,KAAKO,IAAL,CAAUN,WAA9C,CAAjB;AACA,eAAKvE,cAAL,CAAoBsJ,cAApB,CAAmC,KAAKlD,OAAL,CAAa/K,EAAhD,EAAoDgO,QAApD,EAA8DvL,SAA9D,CAAwE,UAAA6H,OAAO,EAAG;AAChFpI,mBAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCC,IAAI,CAACC,SAAL,CAAeiI,OAAf,CAAlC;AACA,mBAAI,CAACqD,gBAAL,GAAwB,KAAxB;AACA,mBAAI,CAACC,iBAAL,GAAyB,IAAzB;AACA,mBAAI,CAAChD,cAAL,GAAsBN,OAAO,CAACA,OAA9B;AACAe,sBAAU,CAAC;AAAA,qBAAM,OAAI,CAACT,cAAL,GAAsB,EAA5B;AAAA,aAAD,EAAiC,IAAjC,CAAV;AACD,WAND,EAMG,UAAAR,GAAG,EAAI;AACR,mBAAI,CAACuD,gBAAL,GAAwB,IAAxB;AACAtC,sBAAU,CAAC;AAAA,qBAAM,OAAI,CAACsC,gBAAL,GAAwB,KAA9B;AAAA,aAAD,EAAsC,IAAtC,CAAV;AACAzL,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,IAAI,CAACC,SAAL,CAAe+H,GAAf,CAAjC;AACA,mBAAI,CAACV,YAAL,GAAoBU,GAAG,CAACC,KAAJ,CAAUC,OAA9B;AACD,WAXD;AAYD;;;;;;;uBA7CU6J,uB,EAAuB,gJ,EAAA,0I;AAAA,K;;;YAAvBA,uB;AAAuB,0C;AAAA,e;AAAA,c;AAAA,u8C;AAAA;AAAA;;;ACXpC;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAA4B;;AAAY;;AAAO;;AAAI;;AACnD;;AAAuD;;AAAe;;AAC1E;;AACJ;;AACA;;AAA6B;;AAAe;;AAChD;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AAGI;;AACI;;AACJ;;AAGA;;AACI;;AACI;;AACI;;AACI;;AACI;;AAAkB;AAAA;;AAAA;;AAAA,uCAA4B,IAAA1P,QAAA,EAA5B;AAAsC,WAAtC;;AACd;;AACI;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAY;;AACvC;;AASA;;AACI;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAY;;AACvC;;AASA;;AACI;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAoB;;AAC/C;;AAUA;;AAGA;;AAGA;;AAIA;;AACI;;AAA8C;;AAAM;;AACxD;;AACJ;;AAGJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AAEJ;;;;;;;;;;;;AA1EsC;;AAAA;;AAWE;;AAAA;;AAGsB;;AAAA;;AAUtB;;AAAA;;AAGsB;;AAAA;;AAUtB;;AAAA;;AAGsB;;AAAA;;AAUM;;AAAA;;AAGA;;AAAA;;AAGC;;AAAA;;;;;;;;;sEDlExD0P,uB,EAAuB;cALnC,uDAKmC;eALzB;AACT7S,kBAAQ,EAAE,qBADD;AAETC,qBAAW,EAAE,kCAFJ;AAGTC,mBAAS,EAAE,CAAC,iCAAD;AAHF,S;AAKyB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEXpC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACkBgC;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AASR;;AAAmF;;AACtE;;;;;;AAQT;;AAAsC;;AAAoB;;;;;;AAC1D;;AACI;;AACJ;;;;;;AAJJ;;AACI;;AACA;;AAGJ;;;;;;;;AAJS;;AAAA;;AACA;;AAAA;;;;;;;;AAvBb;;AAAsC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAElC;;AACI;;AAGJ;;AACA;;AACI;;AAAyC;AAAA;;AAAA;;AAAA;AAAA;;AAAzC;;AAEA;;AAA2B;;AAAK;;AAEpC;;AACA;;AAEA;;AACI;;AAAuB;AAAA;;AAAA;;AAAA;AAAA;;AAAvB;;AAEA;;AAA2B;;AAAQ;;AAEvC;;AACA;;AAMA;;AACI;;AAA0E;;AAAiB;;AAC/F;;AACA;;AAA4E;;AAAK;;AACjF;;AAAmC;;AAC9B;;AAAqD;;AAAQ;;AAAI;;AAC1E;;;;;;;;;;;;AA9BqD;;AAAA;;AAKJ;;AAAA;;AAKA;;AAAA;;AAGlB;;AAAA;;AAKkB;;AAAA;;;;QDxB5DoN,c;;;AAQX,8BACU3K,WADV,EAEUqF,YAFV,EAGU9C,MAHV,EAIU+C,cAJV,EAIyC;AAAA;;AAH/B,aAAAtF,WAAA,GAAAA,WAAA;AACA,aAAAqF,YAAA,GAAAA,YAAA;AACA,aAAA9C,MAAA,GAAAA,MAAA;AACA,aAAA+C,cAAA,GAAAA,cAAA;AAXV,aAAAC,IAAA,GAAY,EAAZ;AACA,aAAA7I,UAAA,GAAa,KAAb;AACA,aAAA8I,aAAA,GAAgB,KAAhB;AACA,aAAAC,YAAA,GAAe,EAAf;AACA,aAAAjC,KAAA,GAAkB,EAAlB;AACA,aAAAkC,MAAA,GAAgB,iBAAhB;AAM4C;;;;mCAEjC;AAAA;;AACT,cAAI,KAAKL,YAAL,CAAkBxI,QAAlB,EAAJ,EAAkC;AAChC,iBAAKH,UAAL,GAAkB,IAAlB;AACA,iBAAK8G,KAAL,GAAa,KAAK6B,YAAL,CAAkBtI,OAAlB,GAA4ByG,KAAzC;AACD;;AACD,eAAK8B,cAAL,CAAoBK,aAApB,CACanH,SADb,CACuB,UAAAoH,MAAM,EAAI;AACzB,mBAAI,CAACF,MAAL,GAAcE,MAAM,CAACC,GAAP,CAAW,QAAX,CAAd;AACA5H,mBAAO,CAACC,GAAR,CAAa,6BAA4B,OAAI,CAACwH,MAA9C;AACH,WAJL;AAKD;;;mCAEU;AAAA;;AACT,eAAK1F,WAAL,CAAiBmQ,YAAjB,CAA8B,KAAK5K,IAAnC,EAAyC/G,SAAzC,CACE,UAAC1B,IAAD,EAAe;AACb,mBAAI,CAACuI,YAAL,CAAkBU,SAAlB,CAA4BjJ,IAAI,CAACkJ,WAAjC;;AACA,mBAAI,CAACX,YAAL,CAAkBY,QAAlB,CAA2BnJ,IAA3B;;AACA,mBAAI,CAACuI,YAAL,CAAkBa,YAAlB,CAA+BpJ,IAAI,CAACwG,QAApC;;AAEA,mBAAI,CAACkC,aAAL,GAAqB,KAArB;AACA,mBAAI,CAAC9I,UAAL,GAAkB,IAAlB;AACA,mBAAI,CAAC8G,KAAL,GAAa,OAAI,CAAC6B,YAAL,CAAkBtI,OAAlB,GAA4ByG,KAAzC;;AACA,mBAAI,CAACxD,WAAL,CAAiBoD,eAAjB,CAAiC7C,IAAjC,CAAsCzD,IAAtC;;AACAmB,mBAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,mBAAO,CAACC,GAAR,CAAY,OAAI,CAACmH,YAAL,CAAkBtI,OAAlB,EAAZ;AACAkB,mBAAO,CAACC,GAAR,CAAa,eAAc,OAAI,CAACwH,MAAhC;;AACG,gBAAI,OAAI,CAACA,MAAL,IAAa,IAAjB,EAAuB;AAClB,qBAAI,CAACnD,MAAL,CAAYG,QAAZ,CAAsB,CAAC,OAAI,CAACgD,MAAN,CAAtB;AACJ,aAFD,MAEO;AACF,qBAAI,CAACnD,MAAL,CAAYG,QAAZ,CAAsB,CAAC,sBAAD,CAAtB;AACJ;AAGL,WApBH,EAqBE,UAAAyD,GAAG,EAAI;AACL,mBAAI,CAACV,YAAL,GAAoBU,GAAG,CAACC,KAAJ,CAAUC,OAA9B;AACA,mBAAI,CAACb,aAAL,GAAqB,IAArB;AACD,WAxBH;AA0BD;;;;;;;uBArDUmF,c,EAAc,mI,EAAA,oJ,EAAA,uH,EAAA,+H;AAAA,K;;;YAAdA,c;AAAc,wC;AAAA,e;AAAA,a;AAAA,myC;AAAA;AAAA;ACZ3B;;AACI;;AACI;;AAGI;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AAAqB;;AAAK;;AAC1B;;AAAwB;;AAAmD;;AAAc;;AAAI;;AACjG;;AACA;;AAkCJ;;AACJ;;AACJ;;AAGJ;;AACJ;;AAEJ;;;;AA1C8B;;AAAA;;;;;;;;;sEDHjBA,c,EAAc;cAL1B,uDAK0B;eALhB;AACTtN,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEZ3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACOoB;;;;;;AAAuC;;;;;;AACvC;;;;;;AAUZ;;AAA4D;;AAChB;;;;AAAiC;;AAAO;;;;;;AAAxC;;AAAA;;;;;;AAC5C;;AAA4D;;AACjB;;;;AAAiC;;AAAO;;;;;;AAAxC;;AAAA;;;;;;AAC3C;;AAA2D;;AACZ;;;;AAAiC;;AAAO;;;;;;AAAxC;;AAAA;;;;QDb1C6S,2B;;;AAcX,2CAAoBC,aAApB,EAAiD;AAAA;;AAA7B,aAAAA,aAAA,GAAAA,aAAA;AANpB,aAAAC,MAAA,GAAS;AACPC,kBAAQ,EAAE,CADH;AAEPC,cAAI,EAAE,OAFC;AAGPC,gBAAM,EAAE;AAHD,SAAT;AAMoD;;;;mCAE5C;AAAA;;AACN,eAAKH,MAAL,CAAYC,QAAZ,GAAuB7H,IAAI,CAACgI,KAAL,CAAY,IAAI1J,IAAJ,CAAS,KAAKN,WAAL,CAAiBsC,eAA1B,EAA2C2H,OAA3C,KAAwD,IAAI3J,IAAJ,GAAW2J,OAAX,EAAD,GAAuB,IAA1F,CAAvB;AACA1S,iBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,KAAKoS,MAAL,CAAYC,QAArC;AACA,eAAKvH,eAAL,GAAuB,IAAIhC,IAAJ,CAAS,KAAKN,WAAL,CAAiBsC,eAA1B,CAAvB;AACA,eAAKjC,WAAL,GAAmB,IAAIC,IAAJ,CAAS,KAAKN,WAAL,CAAiBK,WAA1B,CAAnB;AACA,eAAKsJ,aAAL,CAAmBtP,OAAnB,CAA2B,KAAK2F,WAAL,CAAiBE,QAA5C,EAAsDpI,SAAtD,CAAgE,UAAAqL,GAAG,EAAI;AACrE,mBAAI,CAACtL,MAAL,GAAcsL,GAAd;AACA5L,mBAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,IAAI,CAACC,SAAL,CAAe,OAAI,CAACG,MAApB,CAA1C;AACD,WAHD;AAIA,eAAK8R,aAAL,CAAmBlR,SAAnB,CAA6B,KAAKuH,WAAL,CAAiBE,QAA9C,EAAwDpI,SAAxD,CAAkE,UAAA0C,MAAM,EAAI;;;AAC1E,mBAAI,CAAC2F,YAAL,GAAoB,6BAAyB,YAAG3F,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAApB;AACD,WAFD;AAGD;;;qCAES;AACRd,iBAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;;;;;;;uBAhCUkS,2B,EAA2B,8I;AAAA,K;;;YAA3BA,2B;AAA2B,8C;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,c;AAAA,wmB;AAAA;AAAA;ACVxC;;AACI;;AACA;;AACI;;AACI;;AACI;;AAEI;;AACA;;AAEJ;;AACA;;AAAI;;;;;;AAAoE;;AAC5E;;AACJ;;AAEA;;AAAoB;;;;AAAwC;;AAC5D;;AAAoB;;;;AAAmC;;AACvD;;AAAoB;;;;AAA+B;;AACnD;;AAEA;;AAEA;;AAEA;;AACI;;AAA6B;AAAA,mBAAY,IAAAQ,UAAA,EAAZ;AAAwB,WAAxB;;AAA0B;;AAAc;;AACzE;;AACJ;;AACA;;AACJ;;;;AA5BO;;AAAA;;AAGQ;;AAAA;;AAGU;;AAAA;;AACA;;AAAA;;AAGL;;AAAA;;AAIQ;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACf;;AAAA;;AAEA;;AAAA;;AAEA;;AAAA;;AAGU;;AAAA;;;;;;;;;;sEDfVR,2B,EAA2B;cALvC,uDAKuC;eAL7B;AACT/S,kBAAQ,EAAE,yBADD;AAETC,qBAAW,EAAE,sCAFJ;AAGTC,mBAAS,EAAE,CAAC,qCAAD;AAHF,S;AAK6B,Q;;;;;;gBAErC;;;;;;;;;;;;;;;;;;;;AEZH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACqDoB;;;;;;AAAkE;;;;;;AAElE;;AACI;;AAAI;;AAAwB;;AAChC;;;;QD7CPsT,4B;;;AAKX,4CACUpK,kBADV,EAEUzG,WAFV,EAGUU,cAHV,EAGyC;AAAA;;AAF/B,aAAA+F,kBAAA,GAAAA,kBAAA;AACA,aAAAzG,WAAA,GAAAA,WAAA;AACA,aAAAU,cAAA,GAAAA,cAAA;AALV,aAAA6I,YAAA,GAA4B,EAA5B;AAK4C;;;;mCAEpC;AAAA;;AACN,eAAKvJ,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAA1B,IAAI,EAAI;AAClD,mBAAI,CAAC4D,cAAL,CAAoBK,OAApB,CAA4BjE,IAAI,CAACf,EAAjC,EAAqCyC,SAArC,CAA+C,UAAAsI,OAAO,EAAG;AACvD,qBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,aAFD;;AAGA,mBAAI,CAACpG,cAAL,CAAoBvB,SAApB,CAA8BrC,IAAI,CAACf,EAAnC,EAAuCyC,SAAvC,CAAiD,UAAA0C,MAAM,EAAI;;;AACzD,qBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,aAFD;;AAGA,mBAAI,CAAC0H,kBAAL,CAAwBqK,wBAAxB,CAAiDhU,IAAI,CAACf,EAAtD,EAA0DyC,SAA1D,CAAoE,UAAA8K,IAAI,EAAG;AACzE,qBAAI,CAACC,YAAL,GAAoBD,IAApB;AACArL,qBAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,IAAI,CAACC,SAAL,CAAekL,IAAf,CAA9B;AACD,aAHD;AAID,WAXD;AAYD;;;;;;;uBAvBUuH,4B,EAA4B,wJ,EAAA,0I,EAAA,gJ;AAAA,K;;;YAA5BA,4B;AAA4B,+C;AAAA,e;AAAA,a;AAAA,8mB;AAAA;AAAA;ACXzC;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAA4B;;AAAkB;;AAAI;;AAAI;;AACtD;;AAAuD;;AAAY;;AACvE;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AAII;;AAEI;;AAEI;;AACI;;AACJ;;AAGA;;AACI;;AACI;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AAGJ;;AACJ;;AACA;;AAEA;;AAGJ;;AACJ;;AACJ;;AAEJ;;;;AAvCkC;;AAAA;;AA8BO;;AAAA;;AAErB;;AAAA;;;;;;;;;sED3CXA,4B,EAA4B;cALxC,uDAKwC;eAL9B;AACTxT,kBAAQ,EAAE,0BADD;AAETC,qBAAW,EAAE,uCAFJ;AAGTC,mBAAS,EAAE,CAAC,sCAAD;AAHF,S;AAK8B,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEZzC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACMoB;;AACI;;AACJ;;;;;;AAFwD;;AACH;;AAAA;;;;;;AAErD;;AACI;;AAEJ;;;;;;AAMI;;AAA8B;;AAAoC;;;;AAClE;;;;;;AADkE;;AAAA;;;;;;AAElE;;AAA2D;;AACvD;;;;;;AACJ;;;;;;AADI;;AAAA;;;;QDRfwT,uB;;;AAIX,uCACU/Q,WADV,EAEUU,cAFV,EAGUjE,mBAHV,EAIU8F,MAJV,EAIyB;AAAA;;AAHf,aAAAvC,WAAA,GAAAA,WAAA;AACA,aAAAU,cAAA,GAAAA,cAAA;AACA,aAAAjE,mBAAA,GAAAA,mBAAA;AACA,aAAA8F,MAAA,GAAAA,MAAA;AAAkB;;;;mCAEpB;AAAA;;AACN,eAAKvC,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAA1B,IAAI,EAAI;AAClD,mBAAI,CAAC4D,cAAL,CAAoBK,OAApB,CAA4BjE,IAAI,CAACf,EAAjC,EAAqCyC,SAArC,CAA+C,UAAAsI,OAAO,EAAI;AACxD,qBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,aAFD;AAGD,WAJD;AAMD;;;iCAGQ;AACP,eAAKrK,mBAAL,CAAyBQ,OAAzB,GADO,CAEP;;AACA,eAAKsF,MAAL,CAAYG,QAAZ,CAAqB,CAAC,MAAD,CAArB,EAA+BlH,IAA/B,CAAoC,YAAM;AACxC0B,kBAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,WAFD;AAGD;;;;;;;uBA1BU2T,uB,EAAuB,0I,EAAA,gJ,EAAA,2J,EAAA,uH;AAAA,K;;;YAAvBA,uB;AAAuB,2C;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,c;AAAA,y/B;AAAA;AAAA;ACZpC;;AACI;;AACI;;AACI;;AACI;;AACI;;AAGA;;AAIJ;;AACA;;AAEI;;AAAI;;;;;;AAAsE;;AAC1E;;AACI;;AAEA;;AAGJ;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACA;;AAAM;;AAAY;;AACtB;;AACJ;;AAEJ;;AACA;;AACI;;AACI;;AACI;;AACA;;AAAM;;AAAgB;;AAC1B;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACA;;AAAM;;AAAe;;AACzB;;AACJ;;AACJ;;AACA;;AAAoB;AAAA,mBAAS,IAAArG,MAAA,EAAT;AAAiB,WAAjB;;AAChB;;AACI;;AACI;;AACA;;AAAM;;AAAM;;AAChB;;AACJ;;AACJ;;AACJ;;AACJ;;;;AAvDuB;;AAAA;;AAGA;;AAAA;;AAOC;;AAAA;;AAEI;;AAAA;;AAEA;;AAAA;;;;;;;;;;sEDPfqG,uB,EAAuB;cALnC,uDAKmC;eALzB;AACT1T,kBAAQ,EAAE,sBADD;AAETC,qBAAW,EAAE,mCAFJ;AAGTC,mBAAS,EAAE,CAAC,kCAAD;AAHF,S;AAKyB,Q;;;;;;;;;;;;gBAEjC;;;;;;;;;;;;;;;;;;;;AEfH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgCsB;;;;;;AAA+D;;;;;;AAC/D;;;;;;;;;;;;AAgBwB;;AACpB;;AAGE;;AACF;;AACF;;;;;;AAHI;;AAAA;;AADA;;AAEA;;AAAA;;;;;;;;AA/BpB;;AAGE;;AAAM;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;AACE;;AACE;;AACE;;AACE;;AAEE;;AACA;;AAEF;;AACA;;AACE;;AACE;;AACE;;AACE;;AACE;;AAAkB;;AAA6B;;AAAY;;AAC3D;;AAA4C;AAAA;;AAAA;;AAAA;AAAA;;AAA5C;;AACF;;AACA;;AAAoC;;AAC/B;;AACP;;AAEF;;AACA;;AAAsB;;AAMhB;;AACR;;AAIF;;AACF;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAU;;AACjB;;AAAmC;AAAA;;AAAA;;AAAA;AAAA;;AAAnC;;AAEF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAS;;AAChB;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAlC;;AAEF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAa;;AACpB;;AAAO;AAAA;;AAAA;;AAAA;AAAA;;AAAP;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAW;;AAClB;;AAAsC;AAAA;;AAAA;;AAAA;AAAA;;AAEpC;;AAAQ;;AAAE;;AACV;;AAAQ;;AAAE;;AACV;;AAAQ;;AAAE;;AACV;;AAAQ;;AAAE;;AACV;;AAAQ;;AAAG;;AACX;;AAAQ;;AAAG;;AACX;;AAAQ;;AAAE;;AACV;;AAAQ;;AAAE;;AACZ;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAQ;;AACf;;AAA+B;AAAA;;AAAA;;AAAA;AAAA;;AAA/B;;AAEF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAM;;AACb;;AAA+B;AAAA;;AAAA;;AAAA;AAAA;;AAA/B;;AAEF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAO;;AACd;;AAAiC;AAAA;;AAAA;;AAAA;AAAA;;AAAjC;;AAEF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAI;;AACX;;AAA8B;AAAA;;AAAA;;AAAA;AAAA;;AAA9B;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAQ;;AACf;;AAAiC;AAAA;;AAAA;;AAAA;AAAA;;AAAjC;;AAEF;;AACF;;AACA;;AACE;;AACE;;AAAO;;AAAO;;AACd;;AAAiC;AAAA;;AAAA;;AAAA;AAAA;;AAAjC;;AAEF;;AACF;;AACF;;AACA;;AACE;;AAA8C;;AAAI;;AACpD;;AACF;;AAGF;;;;;;AApHiD;;AAAA;;AACA;;AAAA;;AAgBN;;AAAA;;AAkB1B;;AAAA,sGAA2B,SAA3B,EAA2B,0BAA3B;;AAOA;;AAAA,qGAA0B,SAA1B,EAA0B,yBAA1B;;AAOA;;AAAA;;AAMC;;AAAA,yIAA6B,SAA7B,EAA6B,2BAA7B;;AAgBD;;AAAA,kGAAuB,SAAvB,EAAuB,sBAAvB;;AAOA;;AAAA,kGAAuB,SAAvB,EAAuB,sBAAvB;;AAOA;;AAAA,oGAAyB,SAAzB,EAAyB,wBAAzB;;AAOA;;AAAA,iGAAsB,SAAtB,EAAsB,qBAAtB;;AAMA;;AAAA,oGAAyB,SAAzB,EAAyB,wBAAzB;;AAOA;;AAAA,oGAAyB,SAAzB,EAAyB,wBAAzB;;;;QD9HZsN,gB;;;AAQX,gCACU7K,WADV,EAEUU,cAFV,EAEuC;AAAA;;AAD7B,aAAAV,WAAA,GAAAA,WAAA;AACA,aAAAU,cAAA,GAAAA,cAAA;AACL;;;;mCAEG;AAAA;;AACN,eAAKV,WAAL,CAAiBE,cAAjB,GAAkC1B,SAAlC,CAA4C,UAAA1B,IAAI,EAAI;AAClD,mBAAI,CAAC4D,cAAL,CAAoBK,OAApB,CAA4BjE,IAAI,CAACf,EAAjC,EAAqCyC,SAArC,CAA+C,UAAAsI,OAAO,EAAI;AACxD,qBAAI,CAACA,OAAL,GAAeA,OAAf,CADwD,CAExD;AACA;;AACA7I,qBAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,OAAI,CAAC4I,OAAL,CAAakK,QAAxC;AACD,aALD;;AAMA,mBAAI,CAACtQ,cAAL,CAAoBvB,SAApB,CAA8BrC,IAAI,CAACf,EAAnC,EAAuCyC,SAAvC,CAAiD,UAAA0C,MAAM,EAAI;;;AACzD,qBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,aAFD;AAGD,WAVD;AAWD;;;mCAGO;AAAA;;AACNd,iBAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCC,IAAI,CAACC,SAAL,CAAe,KAAK0I,OAApB,CAAlC,EADM,CAEN;AACA;;AACA,eAAKpG,cAAL,CAAoBuQ,aAApB,CAAkC,KAAKnK,OAAvC,EAAgDtI,SAAhD,CAA0D,UAAAsI,OAAO,EAAI;AAClE,mBAAI,CAACA,OAAL,GAAeA,OAAf;AACA5J,kBAAM,CAACC,QAAP,CAAgBC,MAAhB;AACF,WAHD;AAID;;;qCAGY6K,K,EAAK;AAAA;;AAChBhK,iBAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,eAAKkM,qBAAL,GAA6BnC,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,CAAwB,CAAxB,CAA7B;AACA,eAAK3H,cAAL,CAAoB2J,YAApB,CAAiC,KAAKvD,OAAL,CAAa/K,EAA9C,EAAiD,KAAKqO,qBAAtD,EAA8E5L,SAA9E,CACE,UAAAyJ,KAAK,EAAI;AACP,gBAAIA,KAAK,CAACM,IAAN,KAAe,mEAAcC,cAAjC,EAAiD;AAC/C,qBAAI,CAACC,cAAL,GAAsBC,IAAI,CAACC,KAAL,CAAW,MAAMV,KAAK,CAACW,MAAZ,GAAqBX,KAAK,CAACY,KAAtC,CAAtB;AACD,aAFD,MAEO,IAAIZ,KAAK,YAAY,iEAArB,EAAmC;AACxC,qBAAI,CAACvH,cAAL,CAAoBvB,SAApB,CAA8B,OAAI,CAAC2H,OAAL,CAAa/K,EAA3C,EAA+CyC,SAA/C,CAAyD,UAAA0C,MAAM,EAAI;AACjE,uBAAI,CAACA,MAAL,GAAc,4BAA4BA,MAAM,CAACpC,KAAP,CAAaC,IAAvD;AACA,uBAAI,CAAC0J,cAAL,GAAsB,CAAtB;AACA,uBAAI,CAAC2B,qBAAL,GAA6B5K,SAA7B;AACD,eAJD;AAKD;AACF,WAXH,EAYE,UAAA2G,GAAG,EAAI;AACL,mBAAI,CAACsC,cAAL,GAAsB,CAAtB;AACA,mBAAI,CAACK,kBAAL,GAA0B,6BAA1B;AACA,mBAAI,CAACsB,qBAAL,GAA6B5K,SAA7B;AACD,WAhBH;AAiBD;;;;;;;uBA3DUqL,gB,EAAgB,0I,EAAA,gJ;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,e;AAAA,a;AAAA,8yE;AAAA;AAAA;ACX7B;;AACE;;AACE;;AACE;;AACE;;AACE;;AACE;;AAA4B;;AAAY;;AAAO;;AAAI;;AACnD;;AAAuD;;AAAgB;;AACzE;;AACF;;AACA;;AAA6B;;AAAgB;;AAC/C;;AACF;;AACF;;AACF;;AACA;;AACE;;AACE;;AACE;;AACF;;AACA;;AACE;;AACE;;AA+HF;;AACF;;AACF;;AACF;;;;AAtI4B;;AAAA;;AAIf;;AAAA;;;;;;;;;sEDXAA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTxN,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEX7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACwBwC;;AAAuC;;AAAsB;;;;;;AAC7D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAsC;;AAAqB;;;;;;AAC3D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAsC;;AAAoB;;;;;;AAC1D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAmC;;AAAwB;;;;;;AAC3D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAmC;;AAAiB;;;;;;AACpD;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AAWL;;AAAsC;;AAAoB;;;;;;AAC1D;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAPJ;;AACI;;AACA;;AAGA;;AAGJ;;;;;;;;;;AAPS;;AAAA;;AACA;;AAAA;;AAGA;;AAAA;;;;;;AASb;;AACI;;AAAc;;AAAM;;AACxB;;;;;;AADwB;;AAAA;;;;;;;;AAlG5B;;AAAwC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAGpC;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAU;;AACrC;;AASJ;;AACA;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAS;;AACpC;;AASJ;;AACA;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAQ;;AACnC;;AASJ;;AACA;;AACI;;AACA;AAAA;;AAAA;;AAAA;AAAA;;AADA;;AAGA;;AAA2B;;AAAY;;AACvC;;AASJ;;AACA;;AACI;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AADJ;;AAGA;;AAA2B;;AAAK;;AAChC;;AASJ;;AACA;;AACI;;AACA;AAAA;;AAAA;;AAAA;AAAA;;AADA;;AAGA;;AAA2B;;AAAe;;AAC1C;;AASJ;;AACA;;AACI;;AAA+D;;AAAwB;;AAC3F;;AACA;;AAAkE;;AAAM;;AACxE;;AAGJ;;;;;;;;;;;;;;;;;;;;AA/FY;;AAAA;;AAGsB;;AAAA;;AAYtB;;AAAA;;AAGsB;;AAAA;;AAYtB;;AAAA;;AAGsB;;AAAA;;AAY1B;;AAAA;;AAG0B;;AAAA;;AAYtB;;AAAA;;AAGsB;;AAAA;;AAY1B;;AAAA;;AAG0B;;AAAA;;AAcG;;AAAA;;;;;;AAIrC;;AACI;;AACF;;;;QD7GjBwN,e;;;AAOX,+BAAoBxI,MAApB,EAA2CvC,WAA3C,EAAqE;AAAA;;AAAjD,aAAAuC,MAAA,GAAAA,MAAA;AAAuB,aAAAvC,WAAA,GAAAA,WAAA;AAL3C,aAAAuF,IAAA,GAAY,EAAZ;AACA,aAAAyF,YAAA,GAAe,KAAf;AACA,aAAAC,cAAA,GAAiB,KAAjB;AACA,aAAAxF,YAAA,GAAe,EAAf;AAEwE;;;;mCAE7D,CACV;;;mCAEU;AAAA;;AACT,eAAKzF,WAAL,CAAiBkR,eAAjB,CAAiC,KAAK3L,IAAtC,EAA4C/G,SAA5C,CACE,UAAAO,IAAI,EAAI;AACNd,mBAAO,CAACC,GAAR,CAAYa,IAAZ;AACA,mBAAI,CAACiM,YAAL,GAAoB,IAApB;AACA,mBAAI,CAACC,cAAL,GAAsB,KAAtB;;AACA,mBAAI,CAAC1I,MAAL,CAAYG,QAAZ,CAAqB,CAAC,eAAD,CAArB;AAED,WAPH,EAQE,UAAAyD,GAAG,EAAI;AACL,mBAAI,CAACV,YAAL,GAAoBU,GAAG,CAACC,KAAJ,CAAUC,OAA9B;AACA,mBAAI,CAAC4E,cAAL,GAAsB,IAAtB;AACD,WAXH;AAaD;;;;;;;uBA1BUF,e,EAAe,uH,EAAA,0I;AAAA,K;;;YAAfA,e;AAAe,yC;AAAA,e;AAAA,a;AAAA,ohE;AAAA;AAAA;ACTxB;;AACI;;AACI;;AAGQ;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AAAI;;AAAiB;;AAAuD;;AAAc;;AAAI;;AAClG;;AAGA;;AAqGA;;AAKJ;;AACJ;;AAGR;;AACJ;;AAEJ;;;;AAjH8B;;AAAA;;AAqG4B;;AAAA;;;;;;;;;sED3GjDA,e,EAAe;cAL3B,uDAK2B;eALjB;AACT1N,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEsBI;;AAEI;;AACI;;AACI;;AAAI;;AAAO;;AAGf;;AACJ;;AACJ;;;;;;;;AACA;;AACI;;AACI;;AACI;;AAAI;;AAAO;;AACf;;AACA;;AACI;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAuB;;AAAW;;AACpE;;AAAkC;AAAA;;AAAA;;AAAA;AAAA;;AAAqB;;AAAS;;AACpE;;AACJ;;AACJ;;;;;;AACA;;AAEI;;AACI;;AAAI;;AAAK;;AACb;;AACJ;;;;;;AACA;;AAEI;;AACI;;AAAI;;AAAM;;AACd;;AACJ;;;;;;AACA;;AAEI;;AACI;;AAAI;;AAAQ;;AAChB;;AACJ;;;;;;AAII;;;;;;;;AADJ;;AACI;;AACI;;AAA2C;AAAA;;AAAA;;AAAA;AAAA;;AAAoB;;AAAQ;;AAC/E;;;;;;AAFW;;AAAA;;;;AC7D3C,QAAM4N,YAAY,GAAoB;AACpCC,yBAAmB,EAAE,IADe;AAEpCC,yBAAmB,EAAE;AAFe,KAAtC;;QAUaC,kB;;;AAsCX,kCACU9E,KADV,EAEUC,kBAFV,EAGUzI,aAHV,EAIU0C,cAJV,EAIuC;AAAA;;AAH7B,aAAA8F,KAAA,GAAAA,KAAA;AACA,aAAAC,kBAAA,GAAAA,kBAAA;AACA,aAAAzI,aAAA,GAAAA,aAAA;AACA,aAAA0C,cAAA,GAAAA,cAAA,CAA6B,CAhCvC;;AACA,aAAA6K,YAAA,GAAe,iEAAkB,SAAjC,CA+BuC,CA/BK;AAM5C;;AACA,aAAAC,SAAA,GAAuB,mEAAUC,IAAjC,CAwBuC,CAvBvC;;AAGA,aAAAC,UAAA,GAAoB,EAApB;AAUA,aAAA4E,MAAA,GAAS;AACPC,kBAAQ,EAAE,CADH;AAEPC,cAAI,EAAE,OAFC;AAGPC,gBAAM,EAAE;AAHD,SAAT;AAWK;;;;mCAEG;AAAA;;AAEN;AACA,eAAKjK,KAAL,CAAWZ,MAAX,CACGpH,SADH,CAEI,UAACoH,MAAD,EAAoB;AAClB,gBAAMuL,aAAa,GAAGvL,MAAM,CAAC,IAAD,CAA5B;;AACA,mBAAI,CAACa,kBAAL,CAAwB1F,OAAxB,CAAgCoQ,aAAhC,EAA+C3S,SAA/C,CAAyD,UAACkI,WAAD,EAA6B;AACpF,qBAAI,CAACA,WAAL,GAAmBA,WAAnB,CADoF,CAEpF;;AACA,qBAAI,CAAC4J,MAAL,CAAYC,QAAZ,GAAuB7H,IAAI,CAACgI,KAAL,CAAY,IAAI1J,IAAJ,CAAS,OAAI,CAACN,WAAL,CAAiBsC,eAA1B,EAA2C2H,OAA3C,KAAwD,IAAI3J,IAAJ,GAAW2J,OAAX,EAAD,GAAuB,IAA1F,CAAvB;AACA1S,qBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,OAAI,CAACoS,MAAL,CAAYC,QAArC;;AACA,qBAAI,CAAC7P,cAAL,CAAoBK,OAApB,CAA4B2F,WAAW,CAACE,QAAxC,EAAkDpI,SAAlD,CAA4D,UAAAsI,OAAO,EAAI;AACrE,uBAAI,CAACA,OAAL,GAAeA,OAAf;AACD,eAFD;;AAGA,qBAAI,CAACpG,cAAL,CAAoBvB,SAApB,CAA8BuH,WAAW,CAACE,QAA1C,EAAoDpI,SAApD,CAA8D,UAAA0C,MAAM,EAAI;;;AACtE,uBAAI,CAACA,MAAL,GAAc,6BAAyB,YAAGA,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAAd;AACD,eAFD;;AAGA,qBAAI,CAACf,aAAL,CAAmB+C,OAAnB,CAA2B2F,WAAW,CAACE,QAAvC,EAAiDpI,SAAjD,CAA2D,UAAAqL,GAAG,EAAI;AAChE,uBAAI,CAACtL,MAAL,GAAcsL,GAAd;AACD,eAFD;;AAGA,qBAAI,CAAC7L,aAAL,CAAmBmB,SAAnB,CAA6BuH,WAAW,CAACE,QAAzC,EAAmDpI,SAAnD,CAA6D,UAAA0C,MAAM,EAAI;;;AACrE,uBAAI,CAAC2F,YAAL,GAAoB,6BAAyB,YAAG3F,MAAH,MAAS,IAAT,IAAS,aAAT,GAAS,MAAT,GAAS,GAAEpC,KAAX,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,IAA3C,CAApB;AACD,eAFD;AAGD,aAjBD;AAkBD,WAtBL;AAuBA,eAAK6M,IAAL,GAAY,IAAIC,SAAJ,CAAc,KAAKN,YAAnB,CAAZ;;AACA,eAAKK,IAAL,CAAUE,MAAV,GAAmB,UAACC,EAAD;AAAA,mBAAe,OAAI,CAACC,MAAL,CAAYD,EAAZ,CAAf;AAAA,WAAnB;;AACA,eAAKH,IAAL,CAAUK,SAAV,GAAsB,UAACC,GAAD;AAAA,mBAAuB,OAAI,CAACC,SAAL,CAAeD,GAAf,CAAvB;AAAA,WAAtB;AACD;;;0CAEiB;AAChBjO,iBAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKkO,WAAzB;AACAnO,iBAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKmO,WAAzB;AACA,eAAKiE,MAAL,CAAYC,QAAZ,GAAuB7H,IAAI,CAACgI,KAAL,CAAY,IAAI1J,IAAJ,CAAS,KAAKN,WAAL,CAAiBsC,eAA1B,EAA2C2H,OAA3C,KAAwD,IAAI3J,IAAJ,GAAW2J,OAAX,EAAD,GAAuB,IAA1F,CAAvB;AACA,eAAKS,EAAL,CAAQC,KAAR;AAED;;;+BAGMtF,E,EAAI;AACT9N,iBAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiD6N,EAAjD;AACD;;;AAEA;kCACUG,G,EAAmB;AAC5BjO,iBAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BgO,GAAG,CAACnN,IAA/B;AACA,cAAIuB,OAAO,GAAGnC,IAAI,CAACmO,KAAL,CAAWJ,GAAG,CAACnN,IAAf,CAAd;AACA,cAAIA,IAAI,GAAGuB,OAAO,CAACvB,IAAnB;;AACA,kBAAQuB,OAAO,CAAC2H,KAAhB;AACE;AACA,iBAAK,OAAL;AACE,mBAAKsE,WAAL,CAAiBxN,IAAjB;AACA;;AACF,iBAAK,QAAL;AACE,mBAAKyN,YAAL,CAAkBzN,IAAlB;AACA;AACF;;AACA,iBAAK,WAAL;AACE,mBAAK0N,eAAL,CAAqB1N,IAArB;AACA;;AACF,iBAAK,MAAL;AACE,mBAAK2N,UAAL,CAAgB3N,IAAhB;AACA;;AACF,iBAAK,aAAL;AACE,mBAAK4N,gBAAL,CAAsB5N,IAAtB;AACA;;AACF,iBAAK,WAAL;AACE,mBAAK6N,cAAL,CAAoB7N,IAApB;AACA;;AACF,iBAAK,aAAL;AACE,mBAAKuS,gBAAL,CAAsBvS,IAAtB;AACA;;AACF,iBAAK,UAAL;AACI,mBAAK8N,aAAL,CAAmB9N,IAAnB;AACA;;AACJ;AACE;AA5BJ;AA8BD;;;sCAGa;AAAA;;AACZ,iBAAO,KAAKkO,cAAL,CAAoBoB,WAApB,CAAgClD,YAAhC,EAA8C3P,IAA9C,CAAmD,UAAC8S,KAAD,EAAW;AACnE,mBAAI,CAACrB,cAAL,CAAoBsB,mBAApB,CAAwCD,KAAxC,EAA+C9S,IAA/C,CAAoD;AAAA,qBAAM,OAAI,CAAC6R,IAAL,CAAU;AAClEpF,qBAAK,EAAE,OAD2D;AAElElJ,oBAAI,EAAEuP;AAF4D,eAAV,CAAN;AAAA,aAApD;AAID,WALM,EAKJ,UAAClI,KAAD,EAAW;AACZoI,iBAAK,CAAC,yBAAD,CAAL;AACAvQ,mBAAO,CAACC,GAAR,CAAYkI,KAAZ;AACD,WARM,CAAP;AASD;;;yCAGgB;AAAA;;AACf,cAAI0G,aAAa,GAAqB;AACpCC,sBAAU,EAAE,CACV;AAAEC,kBAAI,EAAE;AAAR,aADU,EAEV;AAAEA,kBAAI,EAAE;AAAR,aAFU,EAGV;AAAEA,kBAAI,EAAE,uBAAR;AAAiC,4BAAc,YAA/C;AAA6D,0BAAY;AAAzE,aAHU;AADwB,WAAtC;AAOA,eAAKC,cAAL,GAAsB,IAAIC,iBAAJ,CAAsBJ,aAAtB,CAAtB;AACA7O,iBAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAK+O,cAA5C,EATe,CAWf;;AACA,eAAKA,cAAL,CAAoBE,cAApB,GAAqC,UAAClF,KAAD,EAAW;AAC9C,gBAAIA,KAAK,CAACmF,SAAV,EAAqB;AACnB,qBAAI,CAACC,IAAL,CAAU;AACRpF,qBAAK,EAAE,WADC;AAERlJ,oBAAI,EAAEkJ,KAAK,CAACmF;AAFJ,eAAV;AAID;AACF,WAPD;;AAQA,eAAKH,cAAL,CAAoBK,OAApB,GAA8B,UAACvB,EAAD;AAAA,mBAAuB,OAAI,CAACwB,eAAL,CAAqBxB,EAArB,CAAvB;AAAA,WAA9B;AAED;;;2CAGe;AAAA;;AACd;AACA,eAAKyB,cAAL,GAFc,CAGd;AACA;AACA;AACA;;AACA,cAAMC,WAAW,GAAG;AAClBC,iBAAK,EAAE;AAAE6D,mBAAK,EAAE,IAAT;AAAeC,oBAAM,EAAE;AAAvB,aADW;AAElB7D,iBAAK,EAAE;AAFW,WAApB,CAPc,CAWd;;AACA,iBAAOC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCL,WAApC,EACLjS,IADK,CACA,UAACuS,MAAD,EAAY;AACf;AACA;AACAA,kBAAM,CAACC,SAAP,GAAmBC,OAAnB,CAA2B,UAAAC,KAAK;AAAA,qBAAI,OAAI,CAACjB,cAAL,CAAoBkB,QAApB,CAA6BD,KAA7B,EAAoCH,MAApC,CAAJ;AAAA,aAAhC;;AACA,mBAAI,CAACK,SAAL,CAAeL,MAAf;AACD,WANI,WAOE,UAAU5H,GAAV,EAAe;AACpB;AACAlI,mBAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,IAAI,CAACC,SAAL,CAAe+H,GAAf,CAApC;AACD,WAVI,CAAP;AAWD;;;oCAGWmI,K,EAAkC;AAAA;;AAC5C,eAAKrB,cAAL,CAAoBwB,oBAApB,CAAyC,IAAIC,qBAAJ,CAA0BJ,KAA1B,CAAzC,EAD4C,CAG5C;;AACA,eAAKrB,cAAL,CAAoB0B,YAApB,GAAmCnT,IAAnC,CAAwC,UAACoT,MAAD,EAAY;AAClD,mBAAI,CAAC3B,cAAL,CAAoBsB,mBAApB,CAAwCK,MAAxC,EACCpT,IADD,CACM;AAAA,qBACN,OAAI,CAAC6R,IAAL,CAAU;AACRpF,qBAAK,EAAE,QADC;AAERlJ,oBAAI,EAAE6P;AAFE,eAAV,CADM;AAAA,aADN;AAMD,WAPD,EAOG,UAACxI,KAAD,EAAW;AACZoI,iBAAK,CAAC,0BAAD,CAAL;AACAvQ,mBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCkI,KAAjC;AACD,WAVD;AAYD;;;wCAEegH,S,EAAgC;AAC9C,eAAKH,cAAL,CAAoB4B,eAApB,CAAoC,IAAIC,eAAJ,CAAoB1B,SAApB,CAApC;AACAnP,iBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCC,IAAI,CAACC,SAAL,CAAegP,SAAf,CAAhC;AACD;;;qCAEYwB,M,EAAmC;AAC9C,eAAK3B,cAAL,CAAoBwB,oBAApB,CAAyC,IAAIC,qBAAJ,CAA0BE,MAA1B,CAAzC;AACA3Q,iBAAO,CAACC,GAAR,CAAY,uCAAZ;AACD;;;mCAGU6Q,M,EAAQ;AACjB9Q,iBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB6Q,MAAzB;AACA,eAAKrD,UAAL,GAAkBqD,MAAlB;AACA,eAAKvD,SAAL,GAAiB,mEAAUwD,OAA3B;AACD;;;yCAEsBjQ,I,EAAM;;;;;;;;AAC3Bd,2BAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCa,IAAlC;AACAd,2BAAO,CAACC,GAAR,CAAY,gBAAZ,E,CACA;;;AACA,2BAAM,KAAKmQ,WAAL,EAAN;;;AACApQ,2BAAO,CAACC,GAAR,CAAY,eAAZ;;;;;;;;;AACD;;;uCAEca,I,EAAM;AACnBd,iBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCa,IAAhC;AACA,eAAKyM,SAAL,GAAiB,mEAAU0D,MAA3B;AACA,eAAKE,IAAL;AACD;;;yCAEgBrQ,I,EAAM;AACrBd,iBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCa,IAAhC;AACA,eAAKyM,SAAL,GAAiB,mEAAUgE,QAA3B;AACA,eAAKJ,IAAL;AACD;;;sCAEarQ,I,EAAM;AAClBd,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Ba,IAA/B;AACA,eAAKyM,SAAL,GAAiB,mEAAU2D,KAA3B;AACA,eAAKC,IAAL;AACD;;;qCAGY;AAAA;;AACXnR,iBAAO,CAACC,GAAR,CAAY,aAAZ,EADW,CAEX;;AACAD,iBAAO,CAACC,GAAR,CAAY,kBAAZ,EAHW,CAIX;;AACA,eAAKmR,gBAAL,GAAwB7T,IAAxB,CAA6B,YAAM;AACjC,mBAAI,CAAC6R,IAAL,CAAU;AACRtO,kBAAI,EAAE,OAAI,CAAC2M,UADH;AAERzD,mBAAK,EAAE;AAFC,aAAV;;AAIA,mBAAI,CAACuD,SAAL,GAAiB,mEAAUyD,OAA3B;AACD,WAND;AAOD;;;mCAEU;AACThR,iBAAO,CAACC,GAAR,CAAY,WAAZ;AACA,eAAKmP,IAAL,CAAU;AACRtO,gBAAI,EAAE,KAAK2M,UADH;AAERzD,iBAAK,EAAE;AAFC,WAAV;AAIA,eAAKuD,SAAL,GAAiB,mEAAU0D,MAA3B;AACA,eAAKE,IAAL;AACD;;;kCAES;AACR,eAAKA,IAAL;AACA,eAAK5D,SAAL,GAAiB,mEAAU2D,KAA3B;AACA,eAAK9B,IAAL,CAAU;AACRtO,gBAAI,EAAE,KAAK2M,UADH;AAERzD,iBAAK,EAAE;AAFC,WAAV;AAKD;;;6BAEI5B,O,EAAS;AACZpI,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,IAAI,CAACC,SAAL,CAAeiI,OAAf,CAA/B;AACA,eAAKuF,IAAL,CAAUyB,IAAV,CAAelP,IAAI,CAACC,SAAL,CAAeiI,OAAf,CAAf;AACD;;;wCAGe5K,C,EAAG;AACjB;AACA,cAAI;AACF,iBAAK4Q,WAAL,CAAiBqD,aAAjB,CAA+BC,SAA/B,GAA2C,IAA3C;AACA,iBAAKtD,WAAL,CAAiBqD,aAAjB,CAA+BC,SAA/B,GAA2ClU,CAAC,CAACgU,OAAF,CAAU,CAAV,CAA3C;AACD,WAHD,CAGE,OAAOrJ,KAAP,EAAc;AACdnI,mBAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CkI,KAA3C;AACA,iBAAKiG,WAAL,CAAiBqD,aAAjB,CAA+BE,GAA/B,GAAqCC,GAAG,CAACC,eAAJ,CAAoBrU,CAAC,CAACgU,OAAF,CAAU,CAAV,CAApB,CAArC;AACD;AACF;;;kCAES1B,M,EAAQ;AAChB9P,iBAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,cAAI;AACF,iBAAKkO,WAAL,CAAiBsD,aAAjB,CAA+BC,SAA/B,GAA2C5B,MAA3C;AACD,WAFD,CAEE,OAAO3H,KAAP,EAAc;AACdnI,mBAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CkI,KAA3C;AACA,iBAAKgG,WAAL,CAAiBsD,aAAjB,CAA+BE,GAA/B,GAAqCC,GAAG,CAACC,eAAJ,CAAoB/B,MAApB,CAArC;AACD;;AACD,eAAKgC,WAAL,GAAmBhC,MAAnB;AACD;;;+BAEM;AACL9P,iBAAO,CAACC,GAAR,CAAY,gBAAgB,MAA5B;AACA,eAAK+O,cAAL,CAAoB+C,KAApB;AACA,eAAK/C,cAAL,GAAsB,IAAtB;AACA,eAAK8C,WAAL,CAAiB/B,SAAjB,GAA6BC,OAA7B,CAAqC,UAACC,KAAD,EAAU;AAC7CjQ,mBAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BgQ,KAA9B;AACAA,iBAAK,CAACkB,IAAN;AACD,WAHD;AAIA,eAAKhD,WAAL,CAAiBsD,aAAjB,CAA+BC,SAA/B,GAA2C,IAA3C;AACD;;;iCAGK;AACJ,iBAAO,KAAKnE,SAAL,IAAkB,mEAAUC,IAAnC;AACD;;;mCACO;AACN,iBAAO,KAAKD,SAAL,IAAkB,mEAAU0D,MAAnC;AACD;;;oCACQ;AACP,iBAAO,KAAK1D,SAAL,IAAkB,mEAAUyD,OAAnC;AACD;;;kCACM;AACL,iBAAO,KAAKzD,SAAL,IAAkB,mEAAU2D,KAAnC;AACD;;;oCACQ;AACP,iBAAO,KAAK3D,SAAL,IAAkB,mEAAUwD,OAAnC;AACD;;;qCACS;AACR,iBAAO,KAAKxD,SAAL,IAAkB,mEAAUgE,QAAnC;AACD;;;qCAIS;AACRvR,iBAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;;;;;;;uBA9VUoN,kB,EAAkB,+H,EAAA,wJ,EAAA,8I,EAAA,gJ;AAAA,K;;;YAAlBA,kB;AAAkB,qC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ADrB/B;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAA4B;;AAAkB;;AAAI;;AAAI;;AACtD;;AAAuD;;AAAU;;AACrE;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AAIA;;AACI;;AAEI;;AACI;;AACJ;;AAEA;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAUA;;AAWA;;AAMA;;AAMA;;AAMA;;AAEA;;AAIJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AAhEJ;;;;AAIkC;;AAAA;;AASG;;AAAA;;AAUA;;AAAA;;AAWA;;AAAA;;AAMA;;AAAA;;AAMA;;AAAA;;AAME;;AAAA;;AAEF;;AAAA;;;;;;;;;sEClDxBA,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACTjO,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,6BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKoB,Q;;;;;;;;;;;;gBAE5B,uD;iBAAU,a;;;gBACV,uD;iBAAU,a;;;gBAEV,uD;iBAAU,I;;;;;;;;;;;;;;;;;;;;AC3Bb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC4BY;;;;;;AAA2C;;;;QDjB1CkU,e;;;AAMX,+BACUzT,aADV,EAEUsH,cAFV,EAEyC;AAAA;;AAD/B,aAAAtH,aAAA,GAAAA,aAAA;AACA,aAAAsH,cAAA,GAAAA,cAAA;AANV,aAAAoM,OAAA,GAAyB,EAAzB;AACA,aAAAC,UAAA,GAAoB,EAApB;AACA,aAAAC,WAAA,GAAqB,EAArB;AAI4C;;;;mCAEpC;AAAA;;AACN,eAAKtM,cAAL,CAAoBK,aAApB,CACanH,SADb,CACuB,UAAAoH,MAAM,EAAI;AACzB,mBAAI,CAAC+L,UAAL,GAAkB/L,MAAM,CAACC,GAAP,CAAW,MAAX,CAAlB;AACA,mBAAI,CAAC+L,WAAL,GAAmBhM,MAAM,CAACC,GAAP,CAAW,OAAX,CAAnB;;AACA,mBAAI,CAACjD,MAAL,CAAY,OAAI,CAAC+O,UAAjB,EAA6B,OAAI,CAACC,WAAlC;AACH,WALL,EADM,CAON;AACA;AACA;AACA;AAID;;;+BAEMzU,Q,EAAiBsF,K,EAAY;AAAA;;AAClCxE,iBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,eAAef,QAAxC,EAAkD,YAAWsF,KAA7D;AACA,eAAKzE,aAAL,CACC4E,MADD,CACQzF,QADR,EACkBsF,KADlB,EAECjE,SAFD,CAEW,UAAAkT,OAAO;AAAA,mBAAI,OAAI,CAACA,OAAL,GAAeA,OAAnB;AAAA,WAFlB;AAGD;;;;;;;uBA/BUD,e,EAAe,8I,EAAA,+H;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,e;AAAA,a;AAAA,uf;AAAA;AAAA;ACV5B;;AAEA;;AACI;;AACI;;AACI;;AACI;;AACI;;AACI;;AAA4B;;AAAsB;;AAAI;;AAAI;;AAC1D;;AAAuD;;AAAM;;AACjE;;AACJ;;AACA;;AAA6B;;AAC7B;;AACJ;;AACJ;;AACJ;;AACJ;;AAGA;;AAIA;;AACI;;AACI;;AACI;;AACJ;;AACJ;;AAEJ;;AACA;;;;AApB6C;;AAAA;;AAerB;;AAAA;;;;;;;;;sEDjBXA,e,EAAe;cAL3B,uDAK2B;eALjB;AACTpU,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEX5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQasU,c;;;AACX,8BAAoBtP,MAApB,EAA4CuP,WAA5C,EAA8E;AAAA;;AAA1D,aAAAvP,MAAA,GAAAA,MAAA;AAAwB,aAAAuP,WAAA,GAAAA,WAAA;AAE3C;;;;oCAGCC,I,EACA9K,K,EAA0B;AAExB,cAAK,KAAK6K,WAAL,CAAiB/U,OAAjB,MAA8B,IAA/B,IAAyC,KAAK+U,WAAL,CAAiBvO,WAAjB,OAAmC,OAAhF,EAAyF;AACvFiL,iBAAK,CAAC,yEAAD,CAAL;AACAvQ,mBAAO,CAACC,GAAR,CAAY,YAAY6T,IAAxB;AACA9T,mBAAO,CAACC,GAAR,CAAY,aAAa+I,KAAzB;AACA,iBAAK1E,MAAL,CAAYG,QAAZ,CAAqB,CAAC,aAAD,CAArB,EAAqC;AAAEC,yBAAW,EAAE;AAAE+C,sBAAM,EAAEuB,KAAK,CAAC+K;AAAhB;AAAf,aAArC;AACI,mBAAO,KAAP;AACL;;AACH,iBAAO,IAAP;AACD;;;;;;;uBAjBUH,c,EAAc,8G,EAAA,kI;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVI,oBAAU,EAAE;AADF,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;;;;;ACR3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaC,kB;;;AAUX,kCAAoBC,IAApB,EAAqC;AAAA;;AAAjB,aAAAA,IAAA,GAAAA,IAAA,CAAiB,CANrC;;AACA,aAAAC,aAAA,GAAuB,mDAAW,eAAlC,CAKqC,CAJrC;;AAEA,aAAAC,MAAA,GAAiB,+CAAO,eAAxB;AAGEpU,eAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,KAAKmU,MAA3B;AACA;;;;4BAGE3L,W,EAAuB;AAC1B,iBAAO,KAAKyL,IAAL,CAAUG,IAAV,CAA4B,KAAKF,aAAjC,EAAgD1L,WAAhD,CAAP;AACA;;;+BAEMA,W,EAAuB;AAC5B,iBAAO,KAAKyL,IAAL,CAAUI,GAAV,CAA2B,KAAKH,aAAhC,EAA+C1L,WAA/C,CAAP;AACA;;;0CAEa;AACb,iBAAO,KAAKyL,IAAL,CAAUtM,GAAV,CAA6B,KAAKuM,aAAlC,CAAP;AACD;;;gDAEuBxL,Q,EAAe;AACrC,iBAAO,KAAKuL,IAAL,CAAUtM,GAAV,CAA6B,KAAKuM,aAAL,GAAqB,UAArB,GAAkCxL,QAA/D,CAAP;AACD;;;iDAEwB5F,S,EAAgB;AACvC,iBAAO,KAAKmR,IAAL,CAAUtM,GAAV,CAA6B,KAAKuM,aAAL,GAAqB,WAArB,GAAmCpR,SAAhE,CAAP;AACD;;;gCAEOjF,E,EAAS;AACf,iBAAO,KAAKoW,IAAL,CAAUtM,GAAV,CAA2B,KAAKuM,aAAL,GAAqB,GAArB,GAA2BrW,EAAtD,CAAP;AACD;;;;;;;uBArCUmW,kB,EAAkB,uH;AAAA,K;;;aAAlBA,kB;AAAkB,eAAlBA,kBAAkB,K;AAAA,kBAFjB;;;;;sEAEDA,kB,EAAkB;cAH9B,wDAG8B;eAHnB;AACVD,oBAAU,EAAE;AADF,S;AAGmB,Q;;;;;;;;;;;;;;;;;;;;;;ACT/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,QAAMO,gBAAgB,GAAG,eAAzB;AACA,QAAMC,oBAAoB,GAAG,WAA7B;;QAGaC,e;;;AACX,+BAAoBC,KAApB,EAAgD;AAAA;;AAA5B,aAAAA,KAAA,GAAAA,KAAA;AAA+B;;;;kCAEzCtX,G,EAAuB0W,I,EAAmB;AAClD,cAAIa,OAAO,GAAGvX,GAAd;AACA,cAAMsX,KAAK,GAAG,KAAKA,KAAL,CAAW9V,QAAX,EAAd;AACA,cAAMyG,QAAQ,GAAG,KAAKqP,KAAL,CAAWpP,WAAX,EAAjB;AACA,cAAIsP,OAAO,GAAGxX,GAAG,CAACwX,OAAlB;;AACA,cAAIF,KAAK,IAAI,IAAb,EAAmB;AACjBE,mBAAO,GAAGA,OAAO,CAACC,GAAR,CAAYN,gBAAZ,EAA8B,YAAYG,KAA1C,CAAV;AACD;;AAED,cAAIrP,QAAQ,IAAI,IAAhB,EAAsB;AACpBrF,mBAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBoF,QAAxB;AACAuP,mBAAO,GAAGA,OAAO,CAACC,GAAR,CAAYL,oBAAZ,EAAkCnP,QAAlC,CAAV;AACD;;AACDsP,iBAAO,GAAGvX,GAAG,CAAC0X,KAAJ,CAAU;AAACF,mBAAO,EAAEA;AAAV,WAAV,CAAV;AACA,iBAAOd,IAAI,CAACiB,MAAL,CAAYJ,OAAZ,CAAP;AACD;;;;;;;uBAlBUF,e,EAAe,kI;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe;;;;;sEAAfA,e,EAAe;cAD3B;AAC2B,Q;;;;;;;;;;;;;;;;;;;;;;ACT5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAMO,QAAQ,GAAG,+CAAM,WAAvB;AACA,QAAMC,IAAI,GAAGD,QAAQ,GAAG,OAAxB;AACA,QAAMpQ,MAAM,GAAGoQ,QAAQ,GAAG,SAA1B;AACA,QAAMnQ,OAAO,GAAGmQ,QAAQ,GAAG,UAA3B;AACA,QAAMlQ,KAAK,GAAGkQ,QAAQ,GAAG,QAAzB,C,CACA;;AACA,QAAME,SAAS,GAAG,mDAAU,gBAA5B,C,CACA;;AACA,QAAMC,UAAU,GAAG,mDAAW,mBAA9B,C,CAAmD;AACnD;;AACA,QAAMC,WAAW,GAAG,mDAAW,oBAA/B,C,CACA;;AACA,QAAMC,SAAS,GAAG,mDAAW,kBAA7B;AAGA,QAAMC,WAAW,GAAG;AAClBV,aAAO,EAAE,IAAI,gEAAJ,CAAgB;AAAE,wBAAgB;AAAlB,OAAhB;AADS,KAApB;;QAOaW,W;;;AAIX,2BAAoBrB,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAFV,aAAA/O,eAAA,GAAsC,IAAI,0DAAJ,EAAtC;AAGRnF,eAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB+U,QAAxB;AACD;;;;8BAEKQ,W,EAAaC,G,EAAU;AAC3BzV,iBAAO,CAACC,GAAR,CAAY,YAAYuV,WAAW,CAACE,KAAxB,GAAgC,aAAhC,GAAgDF,WAAW,CAAC1J,QAAxE;AACA,iBAAO,KAAKoI,IAAL,CAAUG,IAAV,CAAqBoB,GAAG,GAAG,QAA3B,EAAqC;AAC1CC,iBAAK,EAAEF,WAAW,CAACE,KADuB;AAE1C5J,oBAAQ,EAAE0J,WAAW,CAAC1J;AAFoB,WAArC,EAGJwJ,WAHI,CAAP;AAKD,S,CAED;;;;iCACSzW,I,EAAM4W,G,EAAU;AACvB,iBAAO,KAAKvB,IAAL,CAAUG,IAAV,CAAeoB,GAAG,GAAG,QAArB,EAA+B;AACpCC,iBAAK,EAAE7W,IAAI,CAAC6W,KADwB;AAEpC5J,oBAAQ,EAAEjN,IAAI,CAACiN,QAFqB;AAGpC6J,iBAAK,EAAE9W,IAAI,CAAC8W,KAHwB;AAIpC5W,oBAAQ,EAAEF,IAAI,CAACE,QAJqB;AAKpC6W,oBAAQ,EAAE/W,IAAI,CAAC+W,QALqB;AAMpCC,qBAAS,EAAEhX,IAAI,CAACgX;AANoB,WAA/B,EAOJP,WAPI,CAAP;AAQD,S,CACD;;;;oCAEYE,W,EAAW;AACrB,iBAAO,KAAKM,KAAL,CAAWN,WAAX,EAAwBL,UAAxB,CAAP;AACD,S,CAED;;;;uCACetW,I,EAAI;AACjB,iBAAO,KAAKkX,QAAL,CAAclX,IAAd,EAAoBsW,UAApB,CAAP;AACD;;;qCAEYK,W,EAAW;AACtB,iBAAO,KAAKM,KAAL,CAAWN,WAAX,EAAwBJ,WAAxB,CAAP;AACD,S,CAED;;;;wCACgBvW,I,EAAI;AAClB,iBAAO,KAAKkX,QAAL,CAAclX,IAAd,EAAoBuW,WAApB,CAAP;AACD;;;mCAEUI,W,EAAW;AACpB,iBAAO,KAAKM,KAAL,CAAWN,WAAX,EAAwBH,SAAxB,CAAP;AACD,S,CAED;;;;sCACcxW,I,EAAI;AAChB,iBAAO,KAAKkX,QAAL,CAAclX,IAAd,EAAoBwW,SAApB,CAAP;AACD;;;yCAEa;AACZ,iBAAO,KAAKnB,IAAL,CAAUtM,GAAV,CAAoBsN,SAApB,CAAP;AACD;;;;;;;uBA3DUK,W,EAAW,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVvB,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;gBAErB;;;;;;;;;;;;;;;;;;;;AC9BH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUagC,c;;;AAKX,8BAAoB9B,IAApB,EAAqC;AAAA;;AAAjB,aAAAA,IAAA,GAAAA,IAAA,CAAiB,CAJrC;;AACA,aAAA+B,UAAA,GAAoB,mDAAW,WAA/B;AACA,aAAAC,UAAA,GAAoB,+CAAO,WAA3B;AAGElW,eAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKiW,UAAhC;AACD;;;;sCAEU;AACT,iBAAO,KAAKhC,IAAL,CAAUtM,GAAV,CAAyB,KAAKqO,UAA9B,CAAP;AACD;;;mCAEU3M,O,EAAe;AACxB,iBAAO,KAAK4K,IAAL,CAAUG,IAAV,CAAwB,KAAK4B,UAA7B,EAAyC3M,OAAzC,CAAP;AACD;;;;;;;uBAfU0M,c,EAAc,uH;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVhC,oBAAU,EAAE;AADF,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;;;ACV3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQamC,e;;;AAEX,+BAAoB7R,MAApB,EAA4CuP,WAA5C,EAA8E;AAAA;;AAA1D,aAAAvP,MAAA,GAAAA,MAAA;AAAwB,aAAAuP,WAAA,GAAAA,WAAA;AAE3C;;;;oCAGCC,I,EACA9K,K,EAA0B;AAGxB,cAAK,KAAK6K,WAAL,CAAiB/U,OAAjB,MAA8B,IAA/B,IAAyC,KAAK+U,WAAL,CAAiBvO,WAAjB,OAAmC,QAAhF,EAA0F;AACxF;AACA,iBAAKhB,MAAL,CAAYG,QAAZ,CAAqB,CAAC,cAAD,CAArB,EAAsC;AAAEC,yBAAW,EAAE;AAAE+C,sBAAM,EAAEuB,KAAK,CAAC+K;AAAhB;AAAf,aAAtC;AACI,mBAAO,KAAP;AACL;;AACH,iBAAO,IAAP;AACD;;;;;;;uBAjBUoC,e,EAAe,8G,EAAA,kI;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFd;;;;;sEAEDA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACVnC,oBAAU,EAAE;AADF,S;AAGgB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACR5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,2B,CASA;;;AACA,QAAMoC,OAAO,GAAG,mDAAW,YAA3B;;QAMaC,a;;;AAKX,6BAAoBnC,IAApB,EAAqC;AAAA;;AAAjB,aAAAA,IAAA,GAAAA,IAAA,CAAiB,CAJrC;;AACA,aAAAoC,SAAA,GAAmB,mDAAW,UAA9B;AACA,aAAAC,SAAA,GAAmB,+CAAO,UAA1B;AAGEvW,eAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKsW,SAA/B;AACA;;;;qCAGQ;AACR,iBAAO,KAAKrC,IAAL,CAAUtM,GAAV,CAAwB,KAAK0O,SAA7B,CAAP;AACD;;;gCAEOxY,E,EAAS;AACf,iBAAO,KAAKoW,IAAL,CAAUtM,GAAV,CAAsB,KAAK0O,SAAL,GAAiB,GAAjB,GAAuBxY,EAA7C,CAAP;AACD;;;qCAEYwC,M,EAAa;AACxB,iBAAO,KAAK4T,IAAL,CAAUI,GAAV,CAAsB,KAAKgC,SAA3B,EAAsChW,MAAtC,CAAP;AACD;;;sCAGavB,Q,EAAe;AAC3B,iBAAO,KAAKmV,IAAL,CAAUtM,GAAV,CAAsB,KAAK0O,SAAL,GAAiB,YAAjB,GAAgCvX,QAAtD,CAAP;AACD;;;+BAGMwF,I,EAAaC,K,EAAY;AAC9B,cAAMmD,MAAM,GAAG,IAAI,+DAAJ,GACZkN,GADY,CACR,MADQ,EACAtQ,IADA,EAEZsQ,GAFY,CAER,OAFQ,EAECrQ,KAFD,CAAf;AAGAxE,iBAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,WAAWsE,IAAtC,EAA4C,aAAaC,KAAzD;AACA,iBAAO,KAAK0P,IAAL,CAAUtM,GAAV,CAAwB,KAAK0O,SAA7B,EAAwC;AAAC,sBAAU3O;AAAX,WAAxC,CAAP;AACD;;;kCAES7J,E,EAAS;AACjB,iBAAO,KAAKoW,IAAL,CAAUtM,GAAV,CAAc,KAAK0O,SAAL,GAAkB,GAAlB,GAAwBxY,EAAxB,GAA6B,SAA3C,CAAP;AACD;;;qCAEY6K,Q,EAAiB6N,I,EAAS;AACrC,cAAMC,QAAQ,GAAa,IAAIC,QAAJ,EAA3B;AAEAD,kBAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BH,IAA1B;AACA,cAAMpZ,GAAG,GAAG,IAAI,gEAAJ,CAAgB,MAAhB,EAAwB,KAAKkZ,SAAL,GAAiB,GAAjB,GAAuB3N,QAAvB,GAAkC,SAA1D,EAAqE8N,QAArE,EAA+E;AACzFG,0BAAc,EAAE,IADyE;AAEzFC,wBAAY,EAAE;AAF2E,WAA/E,CAAZ;AAIA,iBAAO,KAAK3C,IAAL,CAAU4C,OAAV,CAAkB1Z,GAAlB,CAAP;AAED;;;kCAESU,E,EAAS;AACjB,iBAAO,KAAKoW,IAAL,CAAUtM,GAAV,CAAsB,KAAK0O,SAAL,GAAkB,GAAlB,GAAwBxY,EAAxB,GAA6B,SAAnD,CAAP;AACD;;;wCAEeA,E,EAAS;AACvB,iBAAO,KAAKoW,IAAL,CAAUtM,GAAV,CAA0B,KAAK0O,SAAL,GAAkB,GAAlB,GAAwBxY,EAAxB,GAA6B,gBAAvD,CAAP;AACD;;;qCAEY6K,Q,EAAiBvI,M,EAAa;AACzC,iBAAO,KAAK8T,IAAL,CAAUG,IAAV,CAAuB,KAAKiC,SAAL,GAAiB,GAAjB,GAAuB3N,QAAvB,GAAkC,SAAzD,EAAoEvI,MAApE,CAAP;AACD;;;0CAEiBuI,Q,EAAiBmB,O,EAAc;AAC/C,iBAAO,KAAKoK,IAAL,WAAiB,KAAKoC,SAAL,GAAiB,GAAjB,GAAuB3N,QAAvB,GAAkC,iBAAlC,GAAsDmB,OAAvE,CAAP;AACD;;;0CAEiBnB,Q,EAAiB6N,I,EAAS;AAC1C,cAAMC,QAAQ,GAAa,IAAIC,QAAJ,EAA3B;AAEAD,kBAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,IAAzB;AACA,cAAMpZ,GAAG,GAAG,IAAI,gEAAJ,CAAgB,MAAhB,EAAwB,KAAKkZ,SAAL,GAAiB,GAAjB,GAAuB3N,QAAvB,GAAkC,gBAA1D,EAA4E8N,QAA5E,EAAsF;AAChGG,0BAAc,EAAE,IADgF;AAEhGC,wBAAY,EAAE;AAFkF,WAAtF,CAAZ;AAIA,iBAAO,KAAK3C,IAAL,CAAU4C,OAAV,CAAkB1Z,GAAlB,CAAP;AAED;;;uCAEcuL,Q,EAAiBmD,Q,EAAiB;AAC/C,iBAAO,KAAKoI,IAAL,CAAUG,IAAV,CAAoB,KAAKiC,SAAL,GAAiB,GAAjB,GAAuB3N,QAAvB,GAAkC,WAAtD,EAAkEmD,QAAlE,CAAP;AACD;;;;;;;uBAlFUuK,a,EAAa,uH;AAAA,K;;;aAAbA,a;AAAa,eAAbA,aAAa,K;AAAA,kBAFZ;;;;;sEAEDA,a,EAAa;cAHzB,wDAGyB;eAHd;AACVrC,oBAAU,EAAE;AADF,S;AAGc,Q;;;;;;;;;;;;;;;;;;;;;;AChB1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa+C,gB;;;AACX,gCAAoBzS,MAApB,EAA4CuP,WAA5C,EAA8E;AAAA;;AAA1D,aAAAvP,MAAA,GAAAA,MAAA;AAAwB,aAAAuP,WAAA,GAAAA,WAAA;AAE3C;;;;oCAGCC,I,EACA9K,K,EAA0B;AAExB,cAAK,KAAK6K,WAAL,CAAiB/U,OAAjB,MAA8B,IAA/B,IAAyC,KAAK+U,WAAL,CAAiBvO,WAAjB,OAAmC,SAAhF,EAA2F;AACzF;AACA,iBAAKhB,MAAL,CAAYG,QAAZ,CAAqB,CAAC,eAAD,CAArB,EAAuC;AAAEC,yBAAW,EAAE;AAAE+C,sBAAM,EAAEuB,KAAK,CAAC+K;AAAhB;AAAf,aAAvC;AACI,mBAAO,KAAP;AACL;;AACH,iBAAO,IAAP;AACD;;;;;;;uBAfUgD,gB,EAAgB,8G,EAAA,kI;AAAA,K;;;aAAhBA,gB;AAAgB,eAAhBA,gBAAgB,K;AAAA,kBAFf;;;;;sEAEDA,gB,EAAgB;cAH5B,wDAG4B;eAHjB;AACV/C,oBAAU,EAAE;AADF,S;AAGiB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACR7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAOA,QAAMgD,OAAO,GAAG,mDAAW,WAA3B,C,CACA;;AAEA,QAAMC,WAAW,GAAG,+CAAO,WAA3B;;QAKaC,c;;;AAEX,8BAAoBhD,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAClBlU,eAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BgX,WAA5B;AACD,O,CACD;;;;;iCACS;AACP,iBAAO,KAAK/C,IAAL,CAAUtM,GAAV,CAAcoP,OAAd,CAAP;AACD;;;4BACGlZ,E,EAAI;AACN,iBAAO,KAAKoW,IAAL,CAAUtM,GAAV,WAAiBoP,OAAjB,cAA4BlZ,EAA5B,EAAP;AACD;;;gCACOA,E,EAAE;AACR,iBAAO,KAAKoW,IAAL,CAAUtM,GAAV,WAA0BoP,OAA1B,cAAqClZ,EAArC,EAAP;AACD;;;+BACMgD,I,EAAM;AACX,iBAAO,KAAKoT,IAAL,CAAUG,IAAV,CAAe2C,OAAf,EAAwBlW,IAAxB,CAAP;AACD;;;+BACMhD,E,EAAIgD,I,EAAM;AACf,iBAAO,KAAKoT,IAAL,CAAUI,GAAV,WAAkB0C,OAAlB,cAA6BlZ,EAA7B,GAAmCgD,IAAnC,CAAP;AACD;;;gCACMhD,E,EAAI;AACT,iBAAO,KAAKoW,IAAL,qBAAoB8C,OAApB,cAA+BlZ,EAA/B,EAAP;AACD;;;oCACW;AACV,iBAAO,KAAKoW,IAAL,WAAiB8C,OAAjB,CAAP;AACD;;;kCAESlZ,E,EAAS;AACjB,iBAAO,KAAKoW,IAAL,CAAUtM,GAAV,CAAcoP,OAAO,GAAI,GAAX,GAAiBlZ,EAAjB,GAAsB,SAApC,CAAP;AACD;;;qCAEYiF,S,EAAkByT,I,EAAS;AACtC,cAAMC,QAAQ,GAAa,IAAIC,QAAJ,EAA3B;AAEAD,kBAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BH,IAA1B;AACA,cAAMpZ,GAAG,GAAG,IAAI,gEAAJ,CAAgB,MAAhB,EAAwB4Z,OAAO,GAAG,GAAV,GAAgBjU,SAAhB,GAA4B,SAApD,EAA+D0T,QAA/D,EAAyE;AACnFG,0BAAc,EAAE,IADmE;AAEnFC,wBAAY,EAAE;AAFqE,WAAzE,CAAZ;AAIA,iBAAO,KAAK3C,IAAL,CAAU4C,OAAV,CAAkB1Z,GAAlB,CAAP;AAED;;;uCAEc2F,S,EAAkB+I,Q,EAAiB;AAChD,iBAAO,KAAKoI,IAAL,CAAUG,IAAV,CAAoB2C,OAAO,GAAG,GAAV,GAAgBjU,SAAhB,GAA4B,WAAhD,EAA4D+I,QAA5D,CAAP;AACD;;;sCAEaqL,O,EAAe;AAC3B,iBAAO,KAAKjD,IAAL,CAAUI,GAAV,CAAuB0C,OAAvB,EAAgCG,OAAhC,CAAP;AACD;;;;;;;uBAlDUD,c,EAAc,uH;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVlD,oBAAU,EAAE;AADF,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;;;ACf3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaoD,a;;;AAKX;AACA,6BAAoBlD,IAApB,EAAqC;AAAA;;AAAjB,aAAAA,IAAA,GAAAA,IAAA;AALpB,aAAAoC,SAAA,GAAmB,mDAAW,UAA9B,CAKqC,CAJrC;;AAEA,aAAAe,UAAA,GAAoB,+CAAM,UAA1B;AAGErX,eAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKoX,UAA/B;AACD;;;;mCAEU1O,Q,EAAe;AACxB,iBAAO,KAAKuL,IAAL,CAAUtM,GAAV,CAAwB,KAAK0O,SAAL,GAAiB,GAAjB,GAAuB3N,QAAvB,GAAmC,UAA3D,CAAP;AACD;;;kCACSA,Q,EAAiBvG,M,EAAa;AACtCpC,iBAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCmC,MAAnC;AACA,iBAAO,KAAK8R,IAAL,CAAUG,IAAV,CAAuB,KAAKiC,SAAL,GAAiB,GAAjB,GAAuB3N,QAAvB,GAAkC,UAAzD,EAAqEvG,MAArE,CAAP;AACD;;;qCACYuG,Q,EAAiBvG,M,EAAa;AACzC,iBAAO,KAAK8R,IAAL,CAAUI,GAAV,CAAsB,KAAKgC,SAAL,GAAgB,GAAhB,GAAsB3N,QAAtB,GAAiC,WAAjC,GAA+CvG,MAAM,CAACtE,EAA5E,EAAgFsE,MAAhF,CAAP;AACD;;;qCAEYuG,Q,EAAiB2O,Q,EAAe;AAC3C,iBAAO,KAAKpD,IAAL,WAAiB,KAAKoC,SAAL,GAAiB,GAAjB,GAAuB3N,QAAvB,GAAkC,WAAlC,GAAgD2O,QAAjE,CAAP;AACD;;;mCAEUA,Q,EAAiBnU,I,EAAS;AACnC,iBAAO,KAAK+Q,IAAL,CAAUG,IAAV,CAAqB,KAAKiC,SAAL,GAAgB,WAAhB,GAA8BgB,QAA9B,GAAwC,OAA7D,EAAsEnU,IAAtE,CAAP;AACD;;;qCAEYmU,Q,EAAiBnU,I,EAAS;AACrC,iBAAO,KAAK+Q,IAAL,CAAUG,IAAV,CAAqB,KAAKiC,SAAL,GAAgB,WAAhB,GAA8BgB,QAA9B,GAAwC,SAA7D,EAAwEnU,IAAxE,CAAP;AACD;;;;;;;uBA/BUiU,a,EAAa,uH;AAAA,K;;;aAAbA,a;AAAa,eAAbA,aAAa,K;AAAA,kBAFZ;;;;;sEAEDA,a,EAAa;cAHzB,wDAGyB;eAHd;AACVpD,oBAAU,EAAE;AADF,S;AAGc,Q;;;;;;;;;;;;;;;;;;;;;;ACV1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGA,QAAMuD,SAAS,GAAG,YAAlB;AACA,QAAMC,QAAQ,GAAG,WAAjB;AACA,QAAMC,SAAS,GAAG,WAAlB;;QAKaC,mB;;;AAEX,qCAAc;AAAA;AAAG;;;;kCAEP;AACR;AACAC,sBAAY,CAACC,KAAb;AACD;;;kCAGgBlD,K,EAAe;AAC9B1U,iBAAO,CAACC,GAAR,CAAY,uBAAuBsX,SAAvB,GAAoC,KAApC,GAA4C7C,KAAxD,EAD8B,CAE9B;AACA;;AACAiD,sBAAY,CAACE,UAAb,CAAwBN,SAAxB;AACAI,sBAAY,CAACG,OAAb,CAAqBP,SAArB,EAAgC7C,KAAhC;AACD;;;mCAEc;AACb;AACA,iBAAOiD,YAAY,CAACI,OAAb,CAAqBR,SAArB,CAAP;AACD;;;qCAGmBlS,Q,EAAkB;AACpCrF,iBAAO,CAACC,GAAR,CAAY,uBAAuBwX,SAAvB,GAAoC,KAApC,GAA4CpS,QAAxD,EADoC,CAEpC;AACA;;AACAsS,sBAAY,CAACE,UAAb,CAAwBJ,SAAxB;AACAE,sBAAY,CAACG,OAAb,CAAqBL,SAArB,EAAgCpS,QAAhC;AAED;;;sCAEiB;AAChB;AACA,iBAAOsS,YAAY,CAACI,OAAb,CAAqBN,SAArB,CAAP;AACD;;;iCAIe5Y,I,EAAW;AACzBmB,iBAAO,CAACC,GAAR,CAAY,uBAAuBuX,QAAvB,GAAmC,KAAnC,GAA2C3Y,IAAvD;AACA8Y,sBAAY,CAACE,UAAb,CAAwBL,QAAxB;AACAG,sBAAY,CAACG,OAAb,CAAqBN,QAArB,EAA+BtX,IAAI,CAACC,SAAL,CAAetB,IAAf,CAA/B;AACD;;;kCAEa;AACZ,iBAAOqB,IAAI,CAACmO,KAAL,CAAWsJ,YAAY,CAACI,OAAb,CAAqBP,QAArB,CAAX,CAAP;AACD;;;;;;;uBAhDUE,mB;AAAmB,K;;;aAAnBA,mB;AAAmB,eAAnBA,mBAAmB,K;AAAA,kBAFlB;;;;;sEAEDA,mB,EAAmB;cAH/B,wDAG+B;eAHpB;AACV1D,oBAAU,EAAE;AADF,S;AAGoB,Q;;;;;;;;;;;;;;;;;;;;ACVhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AAEA;;;AACO,QAAMgE,QAAQ,GAAG9Y,QAAQ,CAAC+Y,MAA1B;AACA,QAAMC,eAAe,GAAG,UAAUhZ,QAAQ,CAACiZ,QAAnB,IAA+BjZ,QAAQ,CAACkZ,IAAT,GAAgB,MAAMlZ,QAAQ,CAACkZ,IAA/B,GAAsC,EAArE,CAAxB;AACA,QAAMC,IAAI,GAAGL,QAAQ,GAAG,OAAxB;AACPhY,WAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBoY,IAAxB;AACO,QAAMC,IAAI,GAAGN,QAAQ,GAAG,OAAxB;AACPhY,WAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBqY,IAAxB;AACO,QAAMC,IAAI,GAAGP,QAAQ,GAAG,OAAxB;AACPhY,WAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBsY,IAAxB;;;;;;;;;;;;;;;;ACVA;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMC,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,0F,CAMA;;;AACA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAxQ,GAAG;AAAA,aAAIlI,OAAO,CAACmI,KAAR,CAAcD,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ContactComponent } from './pages/contact/contact.component';\nimport { AboutComponent } from './pages/about/about.component';\nimport { HomeComponent } from './pages/home/home.component';\nimport { ProfileComponent as DoctorProfileComponent } from './pages/doctor/profile/profile.component';\nimport { LoginComponent as DoctorLoginComponent } from './pages/doctor/login/login.component';\nimport { SignupComponent as DoctorSingupComponent} from './pages/doctor/signup/signup.component';\nimport { DoctorDashBoardComponent } from './pages/doctor/doctor-dash-board/doctor-dash-board.component';\nimport { DoctorProfileSettingsComponent } from './pages/doctor/doctor-profile-settings/doctor-profile-settings.component';\nimport { DoctorChangePasswordComponent} from './pages/doctor/doctor-change-password/doctor-change-password.component';\nimport { ClinicSettingsComponent } from './pages/doctor/clinic-settings/clinic-settings.component';\nimport { DoctorAppointmentsComponent } from './pages/doctor/doctor-appointments/doctor-appointments.component'; \nimport { DoctorReviewsComponent } from './pages/doctor/doctor-reviews/doctor-reviews.component'; \nimport { LoginComponent as PatientLoginComponent } from './pages/patient/login/login.component';\nimport { SignupComponent as PatientSingupComponent} from './pages/patient/signup/signup.component';\nimport { ProfileComponent as PatientProfileComponent } from './pages/patient/profile/profile.component';\nimport { PatientAppointmentsComponent } from './pages/patient/patient-appointments/patient-appointments.component';\nimport { SearchComponent } from './pages/search/search.component';\n\nimport { DoctorAuthGuard } from './services/doctor-auth.guard';\nimport { PatientAuthGuard } from './services/patient-auth-guard';\nimport { ChangePasswordComponent } from './pages/patient/change-password/change-password.component';\nimport { BookingComponent } from './pages/booking/booking.component';\nimport { VideoChatComponent as DoctorVideoChatComponent } from './pages/doctor/video-chat/video-chat.component';\nimport { VideoChatComponent as PatientVideoChatComponent } from './pages/patient/video-chat/video-chat.component';\n\n// @ts-ignore\n// @ts-ignore\n// const routes: Routes = [\n//   { path:  '', pathMatch: 'full', redirectTo: 'home' },\n//   { path: 'home', component: HomeComponent },\n//   { path: 'contact' , component: ContactComponent },\n//   { path: 'about' , component: AboutComponent },\n//   { path: 'doctor/profile/:id' , component: DoctorProfileComponent},\n//   { path: 'doctor/login' , component: DoctorLoginComponent },\n//   { path: 'doctor/signup' , component: DoctorSingupComponent },\n//   { path: 'doctor/dashboard' , component: DoctorDashBoardComponent, canActivate: [DoctorAuthGuard]},\n//   { path: 'doctor/profile-settings' , component: DoctorProfileSettingsComponent, canActivate: [DoctorAuthGuard]},\n//   { path: 'doctor/clinic-settings' , component: ClinicSettingsComponent, canActivate: [DoctorAuthGuard]},\n//   { path: 'doctor/appointments' , component: DoctorAppointmentsComponent, canActivate: [DoctorAuthGuard]},\n//   { path: 'doctor/reviews' , component: DoctorReviewsComponent, canActivate: [DoctorAuthGuard]},\n//   { path: 'doctor/change-password', component: DoctorChangePasswordComponent, canActivate: [DoctorAuthGuard]},\n//   { path: 'patient/profile' , component: PatientProfileComponent, canActivate:[PatientAuthGuard]},\n//   { path: 'patient/login' , component: PatientLoginComponent },\n//   { path: 'patient/signup' , component: PatientSingupComponent },\n//   { path: 'search' , component: SearchComponent },\n//   { path: 'booking/:id' , component: BookingComponent, canActivate: [PatientAuthGuard]},\n//   { path: 'patient/appointments' , component: PatientAppointmentsComponent, canActivate: [PatientAuthGuard]},\n//   { path: 'patient/change-password' , component: ChangePasswordComponent, canActivate: [PatientAuthGuard]},\n//   { path: '**', redirectTo: 'home' } //this must be the last\n\n// ];\n\nconst routes: Routes = [\n  { path:  '', pathMatch: 'full', redirectTo: 'home' },\n  { path: 'home', component: HomeComponent },\n  { path: 'contact' , component: ContactComponent },\n  { path: 'about' , component: AboutComponent },\n  { path: 'doctor/profile/:id' , component: DoctorProfileComponent},\n  { path: 'doctor/login' , component: DoctorLoginComponent },\n  { path: 'doctor/signup' , component: DoctorSingupComponent },\n  { path: 'doctor/dashboard' , component: DoctorDashBoardComponent},\n  { path: 'doctor/profile-settings' , component: DoctorProfileSettingsComponent},\n  { path: 'doctor/clinic-settings' , component: ClinicSettingsComponent},\n  { path: 'doctor/appointments' , component: DoctorAppointmentsComponent},\n  { path: 'doctor/reviews' , component: DoctorReviewsComponent},\n  { path: 'doctor/change-password', component: DoctorChangePasswordComponent},\n  { path: 'doctor/chat/video/:id', component: DoctorVideoChatComponent},\n  { path: 'patient/profile' , component: PatientProfileComponent},\n  { path: 'patient/login' , component: PatientLoginComponent },\n  { path: 'patient/signup' , component: PatientSingupComponent },\n  { path: 'patient/chat/video/:id', component: PatientVideoChatComponent},\n  { path: 'search' , component: SearchComponent },\n  { path: 'booking/:id' , component: BookingComponent},\n  { path: 'patient/appointments' , component: PatientAppointmentsComponent},\n  { path: 'patient/change-password' , component: ChangePasswordComponent},\n  { path: '**', redirectTo: 'home' } //this must be the last\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from './services/token-storage.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  private roles: string[];\n  isLoggedIn = false;\n  showAdminBoard = false;\n  showModeratorBoard = false;\n  username: string;\n\n  constructor(private tokenStorageService: TokenStorageService) { }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      //console.log(user.roles);\n      //this.roles = user.roles;\n\n      //this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n     // this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n\n      this.username = user.username;\n    }\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    window.location.reload();\n  }\n}\n\n","<app-header></app-header>\n<router-outlet></router-outlet>\n<app-footer></app-footer>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\nimport { AgmCoreModule } from '@agm/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CountdownModule , CountdownGlobalConfig} from 'ngx-countdown';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PatientComponent } from './components/patient/patient.component';\nimport { DoctorComponent } from './components/doctor/doctor.component';\nimport { HeaderComponent } from './layout/header/header.component';\nimport { FooterComponent } from './layout/footer/footer.component';\nimport { AboutComponent } from './pages/about/about.component';\nimport { ContactComponent } from './pages/contact/contact.component';\nimport { HomeComponent } from './pages/home/home.component';\nimport { SearchComponent } from './pages/search/search.component';\nimport { ReviewComponent } from './components/review/review.component';\nimport { SignupComponent as DoctorSignupComponent } from './pages/doctor/signup/signup.component';\nimport { LoginComponent as DoctorLoginComponent } from './pages/doctor/login/login.component';\nimport { ProfileComponent as DoctorProfileComponent } from './pages/doctor/profile/profile.component';\nimport { SignupComponent as PatientSignupComponent } from './pages/patient/signup/signup.component';\nimport { LoginComponent as PatientLoginComponent } from './pages/patient/login/login.component';\nimport { ProfileComponent as PatientProfileComponent } from './pages/patient/profile/profile.component';\nimport { AuthInterceptor } from './services/auth-interceptor.service';\nimport { DoctorAuthGuard } from './services/doctor-auth.guard';\nimport { PatientAuthGuard } from './services/patient-auth-guard';\nimport { AdminAuthGuard } from './services/admin-auth.guard';\nimport { AdminProfileComponent } from './pages/admin/admin-profile/admin-profile.component';\nimport { AdminLoginComponent } from './pages/admin/admin-login/admin-login.component';\nimport { ChangePasswordComponent} from './pages/patient/change-password/change-password.component';\nimport { ReviewsComponent } from './components/reviews/reviews.component';\nimport { DoctorDashBoardComponent } from './pages/doctor/doctor-dash-board/doctor-dash-board.component';\nimport { DoctorProfileSettingsComponent } from './pages/doctor/doctor-profile-settings/doctor-profile-settings.component';\nimport { PatientAppointmentsComponent } from './pages/patient/patient-appointments/patient-appointments.component';\nimport { PatientAppointmentComponent } from './pages/patient/patient-appointment/patient-appointment.component';\n\nimport { BookingComponent } from './pages/booking/booking.component';\nimport { RatingStarComponent} from './components/rating-star/rating-star.component';\nimport { ClinicComponent } from './components/clinic/clinic.component';\nimport { DoctorOverViewComponent } from './components/doctor-over-view/doctor-over-view.component';\nimport { ReviewFormComponent } from './components/review-form/review-form.component';\nimport { ClinicSettingsComponent } from './pages/doctor/clinic-settings/clinic-settings.component';\nimport { DoctorSideBarComponent } from './pages/doctor/doctor-side-bar/doctor-side-bar.component';\nimport { PatientSideBarComponent } from './pages/patient/patient-side-bar/patient-side-bar.component';\nimport { DoctorAppointmentsComponent } from './pages/doctor/doctor-appointments/doctor-appointments.component';\nimport { DoctorAppointmentComponent } from './pages/doctor/doctor-appointment/doctor-appointment.component';\nimport { DoctorChangePasswordComponent } from './pages/doctor/doctor-change-password/doctor-change-password.component';\nimport { DoctorReviewsComponent } from './pages/doctor/doctor-reviews/doctor-reviews.component';\nimport { DoctorReviewComponent } from './pages/doctor/doctor-review/doctor-review.component';\nimport { SearchBoxComponent } from './components/search-box/search-box.component';\nimport { VideoChatComponent as DoctorVideoChatComponent } from './pages/doctor/video-chat/video-chat.component';\nimport { VideoChatComponent as PatientVideoChatComponent } from './pages/patient/video-chat/video-chat.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    FooterComponent,\n    AboutComponent,\n    ContactComponent,\n    HomeComponent,\n    SearchComponent,\n    DoctorComponent,\n    DoctorSideBarComponent,\n    DoctorAppointmentsComponent,\n    DoctorAppointmentComponent,\n    DoctorChangePasswordComponent,\n    DoctorReviewsComponent,\n    DoctorReviewComponent,\n    DoctorVideoChatComponent,\n    DoctorProfileComponent,\n    DoctorSignupComponent,\n    DoctorLoginComponent,\n    PatientLoginComponent,\n    DoctorDashBoardComponent,\n    RatingStarComponent,\n    ClinicComponent,\n    DoctorOverViewComponent,\n    DoctorProfileSettingsComponent,\n    ClinicSettingsComponent,\n    // Patient Components\n    PatientComponent,\n    PatientSignupComponent,\n    PatientAppointmentsComponent,\n    PatientAppointmentComponent,\n    PatientProfileComponent,\n    PatientVideoChatComponent,\n    PatientSideBarComponent,\n    // Admin Components\n    AdminProfileComponent,\n    AdminLoginComponent,\n    // generale Components\n    ChangePasswordComponent,\n    ReviewComponent,\n    ReviewsComponent,\n    BookingComponent,\n    ReviewFormComponent,\n    SearchBoxComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    CountdownModule, // count down\n    NgbModule, // add Ng Bootstrap support\n    AgmCoreModule.forRoot({}) // add google map support\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    {provide: LocationStrategy, useClass: HashLocationStrategy},\n    DoctorAuthGuard,\n    PatientAuthGuard,\n    AdminAuthGuard,\n    CountdownGlobalConfig\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Clinic } from 'src/app/models/Clinic';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { DoctorService } from 'src/app/services/doctor.service';\n\n@Component({\n  selector: 'app-clinic',\n  templateUrl: './clinic.component.html',\n  styleUrls: ['./clinic.component.css']\n})\nexport class ClinicComponent implements OnInit {\n\n  @Input() clinic:Clinic;\n  @Input() doctor:Doctor;\n  clinicPhotos:any[];\n  constructor(\n    private doctorService:DoctorService\n  ) { }\n\n  ngOnInit(): void {\n    console.log(\"Clinic: \", JSON.stringify(this.clinic));\n    this.doctorService.getClinicPhotos(this.doctor.id).subscribe(photos => {\n      photos.filter(photo => {\n        console.log(\"photo \", photo);\n        return photo === null;\n      });\n      this.clinicPhotos = photos.map(photo => {\n        return {\n          \"id\": photo.id,\n          \"image\": 'data:image/jpeg;base64,' + photo.image.data\n        };\n      });\n    })\n  }\n\n}\n","<div class=\"row\">\n    <!-- Clinic Content -->\n    <div class=\"col-md-10\">\n        <div class=\"clinic-content\">\n            <h4 class=\"clinic-name\">{{clinic?.name}}</h4>\n            <p class=\"doc-speciality\">{{doctor?.speciality}}</p>\n            <!-- <div class=\"clinic-details mb-0\">\n                <h5 class=\"clinic-direction\"> <i class=\"fas fa-map-marker-alt\"></i>\n                    {{clinic?.address}} <br></h5>\n            </div> -->\n            <div class=\"clinic-details mb-0\">\n                <p class=\"clinic-direction\"> <i class=\"fas fa-map-marker-alt\"></i> {{clinic.address}}</p>\n                <ul>\n                    <li *ngFor=\"let clinicPhoto of clinicPhotos\">\n                        <a [href]=\"clinicPhoto.image\" data-fancybox=\"gallery2\">\n                            <img [src]=\"clinicPhoto.image\" alt=\"Feature Image\">\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    <!-- /Clinic Content -->\n\n    <div class=\"col-md-2\">\n        <div class=\"consult-price\">\n          <i class=\"fa fa-money\" aria-data=\"hidden\"></i>  {{clinic?.consultPrice | currency}}\n        </div>\n    </div>\n    <div  class=\"col-md-12 mt-5\">\n        <h5 class=\"clinic-direction\"> <i class=\"fas fa-map-marker-alt\"></i>\n            Clinic Location <br></h5>\n        <agm-map \n        [latitude]=\"clinic.location.latitude\" \n        [longitude]=\"clinic.location.longitude\" \n        [zoom]=\"clinic.location.zoom\">\n        <agm-marker \n            [latitude]=\"clinic.location.latitude\" \n            [longitude]=\"clinic.location.longitude\"\n            [markerDraggable]=\"false\">\n        </agm-marker>\n    </agm-map>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { Clinic } from 'src/app/models/Clinic';\n\n@Component({\n  selector: 'app-over-view',\n  templateUrl: './doctor-over-view.component.html',\n  styleUrls: ['./doctor-over-view.component.css']\n})\nexport class DoctorOverViewComponent implements OnInit {\n\n  @Input() doctor:Doctor;\n  @Input() clinic:Clinic;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row\">\n\n    <div class=\"col-md-12 col-lg-9\">\n\n        <!-- About Details -->\n        <div class=\"widget about-widget\">\n            <h4 class=\"widget-title\">About Me</h4>\n            <p>{{doctor?.aboutMe}}</p>\n        </div>\n        <!-- /About Details -->\n\n\n        <!-- Services List -->\n        <div class=\"service-list\">\n            <h4>Services</h4>\n            <ul class=\"clearfix\">\n                <li *ngFor=\"let service of clinic?.services\">{{service}} </li>\n            </ul>\n        </div>\n        <!-- /Services List -->\n\n        <!-- Specializations List -->\n        <div class=\"service-list\">\n            <h4>Specializations</h4>\n            <ul class=\"clearfix\">\n                <li *ngFor=\"let speciality of clinic?.specialities\">{{speciality}} </li>\n            </ul>\n        </div>\n        <!-- /Specializations List -->\n    </div>\n\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { Clinic } from 'src/app/models/Clinic';\n\n@Component({\n  selector: 'app-doctor',\n  templateUrl: './doctor.component.html',\n  styleUrls: ['./doctor.component.css']\n})\nexport class DoctorComponent implements OnInit {\n  @Input() doctor: Doctor;\n  clinic:Clinic;\n  clinicPhotos:Array<any>;\n  retrievedAvatar:string;\n  retrieveResonse:any;\n  base64Data:string;\n  speciality: string;\n  showDefaultAvatar:boolean = false;\n\n  constructor(private doctorService:DoctorService) { }\n\n  ngOnInit(): void {\n    //Get Doctor Avatar\n    this.doctorService.getAvatar(this.doctor.id).subscribe(res=> {\n      this.retrieveResonse = res;\n      this.base64Data = this.retrieveResonse?.image?.data;\n      this.retrievedAvatar = 'data:image/jpeg;base64,' + this.base64Data;\n      console.log(res);\n      //console.log(\"base64\", this.base64Data);\n      console.log(\"retrievedAvatar: \", this.retrievedAvatar);\n      if (res?.image?.data === undefined){\n        this.showDefaultAvatar = true;\n        console.log(\"show default\");\n        \n      }\n    });\n    //Get Doctor Clinic\n    this.doctorService.getClinic(this.doctor.id).subscribe(res => {\n      this.clinic = res\n    });\n\n    //Get Clinic Photos\n    this.doctorService.getClinicPhotos(this.doctor.id).subscribe(res => {\n      //Convert image to base64 and return it;\n      this.clinicPhotos = res.map(photo => 'data:image/jpeg;base64,' + photo.image.data);\n    });\n\n  }\n}\n","<div class=\"card m-2\">\n    <div class=\"card-body\">\n        <div class=\"row\">\n            <div class=\"col-md-8 col-sm-12\">\n                <div class=\"row text-md-left text-center\">\n                    <div class=\"col-md-4 col-sm-12\">\n                        <a routerLink=\"/doctor/profile/{{doctor?.id}}\">\n                            <!-- <img [src]=\"retrievedAvatar\" class=\"img-fluid\" alt=\"Doctor Image\"> -->\n                            <img *ngIf=\"!showDefaultAvatar\" [src]=\"retrievedAvatar\" class=\"img-fluid w-100\"  alt=\"Doctor Image\">\n                            <img *ngIf=\"showDefaultAvatar\" src=\"assets/img/default-doctor.png\"  class=\"doc-img img-fluid w-100\" alt=\"Doctor Image\">\n                       \n                        </a>\n                    </div>\n                    <div class=\"col-md-8 col-sm-12 text-md-left text-center\">\n                        <h4 class=\"doc-name\"><a routerLink=\"/doctor/profile/{{doctor?.id}}\">{{doctor?.firstname | titlecase}} {{doctor?.lastname | titlecase}}</a></h4>\n                        <p class=\"doc-speciality text-dark\">{{doctor?.speciality }}</p>\n                        <h5 class=\"text_primary\">{{doctor?.speciality}}</h5>\n                        <div class=\"rating\">\n                            <app-rating-star [currentRate]=\"doctor?.rating\" ></app-rating-star>\n                            <!-- <ngb-rating [(rate)]=\"selected\" (hover)=\"hovered=$event\" (leave)=\"hovered=0\" [readonly]=\"readonly\"></ngb-rating> -->\n                            <span class=\"d-inline-block h5\">({{doctor?.averageRating}})</span>\n                        </div>\n                        <div class=\"clinic-details\">\n                            <p class=\"doc-location\"><i class=\"fas fa-map-marker-alt\"></i>  {{clinic?.country | titlecase }} {{clinic?.city | titlecase}}</p>\n                            <ul class=\"clinic-gallery\">\n                                <li *ngFor=\"let photo of clinicPhotos\">\n                                    <a routerLink=\"/doctor/profile/{{doctor?.id}}\" data-fancybox=\"gallery\">\n                                    <img [src]=\"photo\" alt=\"Feature\">  \n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                        <div class=\"clinic-services\">\n                            <span class=\"service border\" *ngFor=\" let clinicService of clinic?.services\"> {{clinicService}} </span>\n                        </div>\n                    </div>\n                </div>\n                \n            </div>\n            <div class=\"col-md-4 col-sm-12 text-md-left text-center\">\n                <div class=\"clini-infos p-2\">\n                    <ul>\n                        <li><i class=\"fa fa-comment\"></i> {{doctor?.reviews?.length}} Feedback</li>\n                        <li><i class=\"fa fa-map-marker-alt\"></i> {{clinic?.country + \" \" + clinic?.city}}</li>\n                        <li><i class=\"fa fa-money-bill-alt\"></i> {{clinic?.minPrice | currency}} - {{clinic?.maxPrice | currency}}  </li>\n                    </ul>\n                </div>\n                <div class=\"text-center\">\n                    <a class=\"view_pro_btn border\" routerLink=\"/doctor/profile/{{doctor?.id}}\">Voir Doctor</a>\n                    <a class=\"app_btn\" routerLink=\"/booking/{{doctor?.id}}\">BOOK APPOINTMENT</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-patient',\n  templateUrl: './patient.component.html',\n  styleUrls: ['./patient.component.css']\n})\nexport class PatientComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>patient works!</p>\n","import { Component, OnInit, Output, Input, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-rating-star',\n  templateUrl: './rating-star.component.html',\n  styleUrls: ['./rating-star.component.css']\n})\nexport class RatingStarComponent implements OnInit {\n\n  // @Input() max: number;\n  @Output() currentRateChange = new EventEmitter<number>();\n  @Input() currentRate:number;\n  @Input() readonly:boolean = true;\n @Input() max:number = 5;\n  // maxItem : any[];\n \n constructor(){}\n \n ngOnInit(){\n }\n\n//  ngOnInit(){\n//      this.maxItem = [];\n//      for(var i=0;i<this.max;i++){\n//          this.maxItem.push(i+1);\n//      }\n//  }\n//  setClass(s:number){\n//   if(this.readonly){\n//     return {\n//       \"fa fa-star\":true,\n//       \"ratingIcon\":true,\n//       \"ratingHover\":false,\n//       \"filled\": s <= this.currentRate,\n//      }\n//    }\n//    return {\n//     \"fa fa-star\":true,\n//     \"ratingIcon\":true,\n//     \"ratingHover\":true,\n//     \"filled\": s <= this.currentRate,\n//    }\n\n//  }\n//  setHover(){\n//    if(this.readonly){\n//     return {\n//       \"ratingIcon\": true,\n//       \"ratingHover\":false,\n//      }\n//    }\n//    return {\n//     \"ratingIcon\":true,\n//     \"ratingHover\":true,\n//    }\n// }\n//  toggleRating(s:number){\n//    if (this.readonly){\n//      return;\n//    }\n//       this.currentRate = s;\n//       this.onRating.emit(this.currentRate);\n//  }\n\n }\n","<!-- <i [ngClass]=\"setClass(s)\" \naria-hidden=\"true\" (click)=\"toggleRating(s)\"\n*ngFor = \"let s of maxItem\"></i> -->\n\n<ng-template #t let-fill=\"fill\">\n  <span class=\"star\" [class.full]=\"fill === 100\">\n    <span class=\"half\" [style.width.%]=\"fill\">&#9733;</span>&#9733;\n  </span>\n</ng-template>\n\n<ngb-rating [(rate)]=\"currentRate\" [starTemplate]=\"t\" [readonly]=\"true\" [max]=\"max\"></ngb-rating>","import { Component, OnInit, Output , EventEmitter} from '@angular/core';\nimport { Review } from 'src/app/models/Review';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-review-form',\n  templateUrl: './review-form.component.html',\n  styleUrls: ['./review-form.component.css']\n})\nexport class ReviewFormComponent implements OnInit {\n\n  @Output() addReview:EventEmitter<Review> = new EventEmitter()\n\n  rating:number;\n  content:string;\n  authorId:string;\n  constructor(private authService:AuthService) { }\n\n  ngOnInit(): void {\n     this.authService.getCurrentUser().subscribe(res => {\n      this.authorId = res.id;\n      console.log(\"::::::::: authorId: \", this.authorId);\n    });\n    \n  }\n\n  onSubmit(){\n    console.log(\"authorId befor submit: \", this.authorId);\n    console.log(\"rating \", this.rating);\n    if (!this.rating){\n      console.log(\"Warring rate has no value\");\n      return;\n    }\n    let review = new Review(this.content, [], this.rating, this.authorId);\n    console.log(\"review : \", JSON.stringify(review));\n    this.addReview.emit(review);\n    this.content = \"\";\n    this.rating = 0;\n  }\n}\n","<form (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n        <label>Review</label> <br>\n        <ng-template #t let-fill=\"fill\">\n            <span class=\"star\" [class.full]=\"fill === 100\">\n              <span class=\"half\" [style.width.%]=\"fill\">&#9733;</span>&#9733;\n            </span>\n          </ng-template>\n          \n          <ngb-rating [(rate)]=\"rating\" [starTemplate]=\"t\" [readonly]=\"false\" [max]=\"5\"></ngb-rating>\n    </div> \n    <div class=\"form-group\">\n        <label>Your review</label>\n        <textarea id=\"review_desc\" maxlength=\"500\" \n        class=\"form-control\" name=\"content\" [(ngModel)]=\"content\"></textarea>\n      \n      <div class=\"d-flex justify-content-between mt-3\"><small class=\"text-muted\"><span id=\"chars\">500</span> characters remaining</small></div>\n    </div>\n    <hr>\n    <div class=\"submit-section\">\n        <button type=\"submit\" class=\"btn btn_primary\">Add Review</button>\n    </div>\n</form>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Review } from 'src/app/models/Review';\nimport { Patient } from 'src/app/models/Patient';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { Like } from 'src/app/models/Like';\nimport { ReviewService } from 'src/app/services/review.service';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-review',\n  templateUrl: './review.component.html',\n  styleUrls: ['./review.component.css']\n})\nexport class ReviewComponent implements OnInit {\n\n  currentUserId:string;\n  author:Patient;\n  avatar:any;\n  like:Like;\n  isLiked:boolean;\n  @Input() review:Review;\n  @Output() deleteReview:EventEmitter<Review> = new EventEmitter();\n  @Output() editReview:EventEmitter<Review> = new EventEmitter();\n  //@Output() toggleLike:EventEmitter<Like> = new EventEmitter();\n  constructor(\n    private patientService:PatientService, \n    private reviewService:ReviewService,\n    private autheService:AuthService) { }\n\n  ngOnInit(): void {\n    //TODO get author\n    \n    this.patientService.getById(this.review.patientId).subscribe(res => {\n      this.author = res;\n    });\n    this.patientService.getAvatar(this.review.patientId).subscribe(res=> {\n        this.avatar = 'data:image/jpeg;base64,' + res?.image?.data;\n        console.log(\"Avatar: \", this.avatar);\n    });\n    this.autheService.getCurrentUser().subscribe(res => {\n      this.currentUserId = res.id;\n      this.like = new Like(this.currentUserId);\n      this.setLiked(this.like);\n    })\n    \n\n  }\n\n  setLiked(like:Like){\n    this.isLiked = this.review.likes.includes(like);\n    console.log(\"isLiked: \" + this.isLiked);\n  }\n  getLiked():boolean{\n    return this.review.likes.includes(this.like);\n  }\n\n  toggleLike(){\n   \n    if(!this.isLiked){\n      console.log(\"liking\")\n      this.reviewService.likeReview(\n        this.review.id, this.like).subscribe(res => {\n          console.log(\"liking: \", JSON.stringify(res));\n          this.review.likes.push(this.like);\n          this.isLiked = true;\n        });\n    }\n    if(this.isLiked){\n      console.log(\"unliking\")\n      this.reviewService.unlikeReview(\n        this.review.id, this.like).subscribe(res => {\n          console.log(\"unliking: \", JSON.stringify(res));\n          let likes = this.review.likes;\n          console.log(\"befor delete \", JSON.stringify(likes));\n          const index = likes.indexOf(this.like, 0);\n          if (index > -1) {\n             likes.splice(index, 1);\n          }\n          console.log(\"after delete \", JSON.stringify(likes));\n          this.review.likes = likes;\n          this.isLiked = false;\n        });\n    }\n  }\n\n  onEdit(){\n    this.editReview.emit(this.review);\n  }\n\n  onDelete(){\n    this.deleteReview.emit(this.review);\n  }\n\n  setClass(){\n    return {\n      \"liked\":this.isLiked,\n      \"fa\": true,\n      \"fa-thumbs-up\": true\n    }\n  }\n  \n}\n","<li>\n    <div class=\"row\">\n        <div class=\"col-md-2 d-none d-md-block border\">\n            <div class=\"row text-center\">\n                <div class=\"col-12\"><img *ngIf=\"avatar?.length > 100\" [src]=\"avatar\" alt=\"Patient Image\">\n                    <img class=\"col img-fluid rounded-circle\" *ngIf=\"avatar?.length < 100\" src=\"assets/img/default-patient.jpeg\" alt=\"Patient Image\"></div>\n                <div class=\"col-12\"><span *ngIf=\"author\" class=\"h4\">{{author.firstname | titlecase}} {{author.lastname | titlecase}}</span></div>\n            </div>\n            \n        </div>\n        <div class=\"col border\">\n            <div class=\"row\">\n                <div class=\"col-lg-12 text-right\">\n                    <app-rating-star [currentRate]=\"review?.rating\" [readonly]=\"true\"></app-rating-star>\n                </div>\n                <div class=\"col-lg-12\">\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <p>{{review?.content}}</p>\n                        </div>\n                        <div class=\"col-6 d-block d-md-none text-left\">\n                            <span *ngIf=\"author\" class=\"h4\">{{author.firstname | titlecase}} {{author.lastname | titlecase}}</span>\n\n                        </div>\n                        <div class=\"col-md-12 col-6 text-right\">\n                            <a (click)=\"toggleLike()\" class=\"like-btn p-1 m-1\">\n                                <i [ngClass]=\"setClass()\"></i> ({{review?.likes?.length}})\n                            </a>\n                            <!-- <a *ngIf=\"author && currentUserId && author.id == currentUserId\" (click)=\"onEdit()\" class=\"edit-btn\">\n                                <i class=\"fa fa-edit\"></i>\n                            </a> -->\n                            <a *ngIf=\"author && currentUserId && author.id == currentUserId\" (click)=\"onDelete()\" class=\"trash-btn p-1 m-1\">\n                                <i class=\"fa fa-trash\"></i>\n                            </a>\n                        </div>\n                       \n                    </div>\n                    \n                </div>\n            </div>\n        </div>\n    </div>\n</li>\n","import { Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { ReviewService } from 'src/app/services/review.service';\nimport { Review } from 'src/app/models/Review';\n\n@Component({\n  selector: 'app-reviews',\n  templateUrl: './reviews.component.html',\n  styleUrls: ['./reviews.component.css']\n})\nexport class ReviewsComponent implements OnInit {\n\n  @Input() doctor:Doctor;\n  @Input() isPatient:boolean;\n  @Output() refresh:EventEmitter<any> = new EventEmitter()\n  reviews:Review[]\n  rating:number;\n  constructor(private reviewService:ReviewService) { }\n\n  ngOnInit(): void {\n    this.refreshReviews();\n  }\n\n\n  addReview(review:Review){\n    console.log('review : ' + JSON.stringify(review))\n    this.reviewService.addReview(this.doctor.id, review).subscribe(res => {\n      console.log(\"doctor reviews : \", JSON.stringify(res))\n      this.refreshReviews()\n    });\n  }\n\n  deleteReview(review:Review){\n    this.reviewService.deleteReview(this.doctor.id, review.id).subscribe(res => {\n      console.log(\"doctor reviews : \", JSON.stringify(res))\n      // const index = this.reviews.indexOf(review, 0);\n      //     if (index > -1) {\n      //        this.reviews.splice(index, 1);\n      //     }\n      this.refreshReviews();\n    });\n  }\n\n  editReview(review:Review){\n    this.reviewService.updateReview(this.doctor.id, review).subscribe(res => {\n      console.log(\"doctor reviews : \", JSON.stringify(res))\n      this.refreshReviews()\n    });\n  }\n\n  refreshReviews(){\n    console.log(\"doctor: \", JSON.stringify(this.doctor))\n    this.refresh.emit(\"refresh\");\n    this.reviewService.getReviews(this.doctor?.id).subscribe(res => {\n      console.log(\"doctor reviews : \", JSON.stringify(res))\n      this.reviews = res;\n    })\n  }\n}\n","<!-- Review Listing -->\n<div>\n    <ul class=\"comments-list\">\n        <app-review \n        *ngFor=\"let review of reviews\" \n        [review]=\"review\"\n        (deleteReview)=\"deleteReview($event)\"\n        (editReview)=\"editReview($event)\"></app-review>\n    </ul>\n</div>\n<!-- /Review Listing -->\n\n <!-- Write Review -->\n <div *ngIf=\"isPatient\" class=\"write-review\">\n    <h4>Write a review for <strong> Dr. {{doctor?.firstname | titlecase}} {{doctor?.lastname | titlecase}}</strong></h4>\n    \n    <!-- Write Review Form -->\n    <app-review-form (addReview)=\"addReview($event)\"></app-review-form>\n    <!-- /Write Review Form -->\n    \n</div>\n<!-- /Write Review -->\n\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-search-box',\n  templateUrl: './search-box.component.html',\n  styleUrls: ['./search-box.component.css']\n})\nexport class SearchBoxComponent implements OnInit {\n\n  constructor(private router:Router) { }\n\n  ngOnInit(): void {\n  }\n\n  search(city:string, query:string){\n    console.log(\"city: \" + city, \"query : \" + query);\n    this.router.navigate([\"search\"], { queryParams: { \"city\": city, \"query\": query} });\n  }\n\n}\n","<div class=\"search-box p-lg-2 m-lg-2\">\n    <form>\n        <div class=\"row p-2\">\n            <div class=\"col-lg-2 col-xs-12\">\n                <div class=\"form-group search-location\">\n                    <input #city type=\"text\" class=\"form-control\" placeholder=\"Search City\">\n                    <span class=\"form-text\">Based on your City</span>\n                </div>\n            </div>\n            <div class=\"col-lg-8 col-xs-12\">\n                <div class=\"form-group search-info\">\n                    <input #query type=\"text\" class=\"form-control\"\n                        placeholder=\"Search Doctors, Clinics, Hospitals, Diseases Etc\">\n                    <span class=\"form-text\">Ex : Dental or Sugar Check up etc</span>\n                </div>\n            </div>\n            <div class=\"col-lg-2 col-xs-12\">\n                <button (click)=\"search(city.value, query.value)\" type=\"submit\" class=\"btn btn_primary w-100\"><i\n                        class=\"fa fa-search\"></i> <span>Search</span></button></div>\n        </div>\n    </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { User } from 'src/app/models/User';\n\n  const DOCTOR = \"DOCTOR\";\n  const PATIENT = \"PATIENT\";\n  const ADMIN = \"ADMIN\";\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  private roles: string[];\n  isLoggedIn = false;\n  //showAdminBoard = false;\n  //showModeratorBoard = false;\n  showDoctorMenu = false;\n  showPatientMenu = false;\n  showAdminMenu = false;\n  username: string;\n  loggedInUser:any;\n\n  constructor(\n    private authService:AuthService,\n    private tokenStorageService:TokenStorageService) { }\n\n  ngOnInit(): void {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n    this.authService.getLoggedInUser.subscribe((user:User) => this.updateFooter(user));\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      const userType = this.tokenStorageService.getUserType();\n      this.roles = user.roles;\n\n      //this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n      //this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n      this.showDoctorMenu = userType == DOCTOR;\n      this.showPatientMenu = userType == PATIENT;\n      this.showAdminMenu = userType == ADMIN;\n      console.log(\"userType \" + userType);\n      console.log(\"showDoctorMenu: \" +  this.showDoctorMenu);\n      this.username = user.username;\n    }\n  }\n\n  updateFooter(user:User){\n    console.log(\"LoggerInUser \" + user);\n      this.isLoggedIn = true;\n      this.loggedInUser = user;\n      console.log(\"logged in user : \" + this.loggedInUser);\n      this.showDoctorMenu = user.userType == DOCTOR;\n      console.log(\"showDoctorMenu\");\n      console.log(this.showDoctorMenu);\n      this.showPatientMenu = user.userType == PATIENT;\n      console.log(\"this.showPatientMenu\");\n      console.log(this.showPatientMenu);\n      this.showAdminMenu = user.userType == ADMIN;\n      console.log(\"this.showAdminMenu\");\n      console.log(this.showAdminMenu);\n  }\n}\n","<footer class=\"footer p-3 \">\n    <div class=\"row\">\n        <div class=\"col-lg-5 col-xs-12\">\n            <div class=\"d-flex justify-content-center align-items-center flex-column\">\n                <div>\n                    <h3>TeleMed</h3>\n                    <p>A place where patients and doctors meet.</p>\n                </div>\n               \n            </div>\n            \n        </div>\n        <div class=\"col-lg-5 col-xs-12 d-flex justify-content-around text-center\">\n            <nav *ngIf=\"!showDoctorMenu\" >\n                <ul>\n                    <li><h4>Patients</h4></li>\n                    <li class=\"btn_link\"><a class=\"text-dark\"  routerLink=\"/search\">Search for Doctors</a></li>\n                    <li *ngIf=\"!isLoggedIn\"  class=\"btn_link\" ><a *ngIf=\"!isLoggedIn \" class=\"text-dark\" routerLink=\"/patient/login\">Login</a></li>\n                    <li  *ngIf=\"!isLoggedIn \"  class=\"btn_link\"><a class=\"text-dark\"  routerLink=\"/patient/signup\">Sign Up</a></li>\n                    <li *ngIf=\"showPatientMenu\" class=\"btn_link\"  ><a class=\"text-dark\" routerLink=\"/patient/profile\">Patient Dashboard</a></li>\n                </ul>\n            </nav>\n            <nav>\n                <ul>\n                    <li><h4>Doctors</h4></li>\n                    <li *ngIf=\"!isLoggedIn\" class=\"btn_link\" ><a class=\"text-dark\" routerLink=\"/doctor/login\">Login</a></li>\n                    <li *ngIf=\"!isLoggedIn\" class=\"btn_link\" ><a class=\"text-dark\" routerLink=\"/doctor/signup\">Sign Up</a></li>\n                    <li *ngIf=\"showDoctorMenu\" class=\"btn_link\"><a class=\"text-dark\" routerLink=\"/doctor/appointments\"> Appointments</a></li>\n                    <li class=\"btn_link\" ><a class=\"text-dark\"  routerLink=\"/search\">Search</a></li>\n                </ul>\n            </nav>\n        </div>\n    </div>\n\n\n    <div class=\"d-flex flex-row justify-content-center\">\n        <div class=\"icon p-2 m-2\">\n            <i class=\"fa fa-rss rss\"></i>\n        </div>\n        <div class=\"icon p-2 m-2\">\n            <i class=\"fa fa-facebook\"></i>\n        </div>\n        <div class=\"icon p-2 m-2\">\n            <i class=\"fa fa-twitter\"></i>\n        </div>\n        <div class=\"icon p-2 m-2\">\n            <i class=\"fa fa-instagram \"></i>\n        </div>\n    </div>\n    <p class=\"p-2 m-2\">\n        @ 2020 TeleMed. All Right Reserved.\n    </p>\n</footer>","import { Component, OnInit } from '@angular/core';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { User } from 'src/app/models/User';\nimport { Router } from '@angular/router';\n\n\n  const DOCTOR = \"DOCTOR\";\n  const PATIENT = \"PATIENT\";\n  const ADMIN = \"ADMIN\";\n  \n  @Component({\n    selector: 'app-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['./header.component.css']\n  })\nexport class HeaderComponent implements OnInit {\n\n  //keep track of collapse state\n  public isMenuCollapsed = true;\n\n  private roles: string[];\n  isLoggedIn = false;\n  //showAdminBoard = false;\n  //showModeratorBoard = false;\n  showDoctorMenu = false;\n  showPatientMenu = false;\n  showAdminMenu = false;\n  username: string;\n  loggedInUser:any;\n\n  constructor(\n    private tokenStorageService: TokenStorageService, \n    private authService: AuthService,\n    private router:Router) { }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n    this.authService.getLoggedInUser.subscribe((user:User) => this.updateHeader(user));\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      const userType = this.tokenStorageService.getUserType();\n      this.roles = user.roles;\n\n      //this.showAdminBoard = this.roles.includes('ROLE_ADMIN');\n      //this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n      this.showDoctorMenu = userType == DOCTOR;\n      this.showPatientMenu = userType == PATIENT;\n      this.showAdminMenu = userType == ADMIN;\n      console.log(\"userType \" + userType);\n      console.log(\"showDoctorMenu: \" +  this.showDoctorMenu);\n      this.username = user.username;\n    }\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    //window.location.reload();\n    this.router.navigate([\"home\"]).then(()=> {\n      window.location.reload();\n    });\n  }\n\n  updateHeader(user:User){\n    console.log(\"LoggerInUser \", user);\n      this.isLoggedIn = true;\n      this.loggedInUser = user;\n      console.log(\"logged in user : \" + this.loggedInUser);\n      this.showDoctorMenu = user.userType == DOCTOR;\n      console.log(\"showDoctorMenu\");\n      console.log(this.showDoctorMenu);\n      this.showPatientMenu = user.userType == PATIENT;\n      console.log(\"this.showPatientMenu\");\n      console.log(this.showPatientMenu);\n      this.showAdminMenu = user.userType == ADMIN;\n      console.log(\"this.showAdminMenu\");\n      console.log(this.showAdminMenu);\n  }\n\n}\n","<!-- main nav bar -->\n<nav class=\"navbar navbar-expand-sm\">\n    <a class=\"navbar-brand\" [routerLink]=\"'.'\">TeleMed</a>\n\n    <button class=\"navbar-toggler primary-bg\" type=\"button\" (click)=\"isMenuCollapsed = !isMenuCollapsed\">\n        &#9776;\n    </button>\n\n    <div *ngIf=\"!showPatientMenu && !showDoctorMenu && !showAdminMenu\" [ngbCollapse]=\"isMenuCollapsed\" class=\"collapse navbar-collapse\">\n        <ul class=\"navbar-nav text-center w-100\">\n            <li class=\"flex-fill\">\n            </li>\n            <li class=\"nav-item\" routerLinkActive=\"active\">\n                <a class=\"nav-link text_primary\" [routerLink]=\"['/patient/signup']\" routerLinkActive=\"active\" (click)=\"isMenuCollapsed = true\">Sign up</a>\n            </li>\n            <li class=\"nav-item btn_primary\" routerLinkActive=\"active\">\n                <a class=\"nav-link\" [routerLink]=\"['/patient/login']\"  (click)=\"isMenuCollapsed = true\">Login</a>\n            </li> \n        </ul>\n    </div>\n\n    <div *ngIf=\"showPatientMenu && !showDoctorMenu && !showAdminMenu\" [ngbCollapse]=\"isMenuCollapsed\" class=\"collapse navbar-collapse\">\n        <ul class=\"navbar-nav text-center w-100\">\n            <li class=\"nav-item \">\n                <a class=\"nav-link text_grey\" [routerLink]=\"['/patient/appointments']\" routerLinkActive=\"active\" (click)=\"isMenuCollapsed = true\">Appointements</a>\n            </li>\n            <li class=\"nav-item \">\n                <a class=\"nav-link text_grey\" [routerLink]=\"['/search']\" routerLinkActive=\"active\" (click)=\"isMenuCollapsed = true\">Search</a>\n            </li>\n            <li class=\"flex-fill\">\n            </li>\n            <li class=\"nav-item btn_primary\" routerLinkActive=\"active\" *ngIf=\"isLoggedIn\">\n                <a class=\"nav-link\" href=\"#\" (click)=\"isMenuCollapsed = true; logout()\">Logout</a>\n            </li>\n        </ul>\n    </div>\n\n    <div *ngIf=\"!showPatientMenu && showDoctorMenu && !showAdminMenu\" [ngbCollapse]=\"isMenuCollapsed\" class=\"collapse navbar-collapse\">\n        <ul class=\"navbar-nav text-center w-100\">\n            <li class=\"nav-item \">\n                <a class=\"nav-link text_grey\" [routerLink]=\"['doctor/appointments']\" routerLinkActive=\"active\" (click)=\"isMenuCollapsed = true\">Dashboard</a>\n            </li>\n            <li class=\"flex-fill\">\n            </li>\n            <li class=\"nav-item btn_primary\" routerLinkActive=\"active\" *ngIf=\"isLoggedIn\">\n                <a class=\"nav-link\" href=\"#\" (click)=\"isMenuCollapsed = true; logout()\">Logout</a>\n            </li>\n        </ul>\n    </div>\n\n    <div *ngIf=\"!showPatientMenu && !showDoctorMenu && showAdminMenu\" [ngbCollapse]=\"isMenuCollapsed\" class=\"collapse navbar-collapse\">\n        <!-- admin area -->\n        <!-- <ul class=\"navbar-nav text-center w-100\">\n            <li class=\"nav-item \">\n                <a class=\"nav-link text_grey\" [routerLink]=\"['/patient/profile']\" routerLinkActive=\"active\" (click)=\"isMenuCollapsed = true\">Profile</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link text_grey\" [routerLink]=\"['/patient/settings']\" routerLinkActive=\"active\" (click)=\"isMenuCollapsed = true\">Settings</a>\n            </li>\n            <li class=\"nav-item\">\n                <a class=\"nav-link text_grey\" [routerLink]=\"['/search']\" routerLinkActive=\"active\" (click)=\"isMenuCollapsed = true\">Search</a>\n            </li>\n            <li class=\"flex-fill\">\n            </li>\n        </ul> -->\n\n    </div>\n</nav>","export class Appointment {\n    id:string;\n    patientId:string;\n    doctorId:string;\n    state:string;\n    appointmentDate:string; \n    bookingDate:string;\n    description:string;\n}","export enum CallState {\n    Ongoing,\n    Denied,\n    Ended,\n    Ringing,\n    Canceled,\n    Idle,\n}","import { ClinicLocation } from './ClinicLocation';\nexport class Clinic{\n    name:string;\n    description:string;\n    services:Array<string>;\n    specialities:Array<string>;\n    city:string;\n    country:string;\n    address:string;\n    minPrice:number;\n    maxPrice:number;\n    consultPrice:number;\n    location:ClinicLocation;\n\n    static empty():Clinic{\n        return {\n            name:\"\",\n            description:\"\",\n            services:[],\n            specialities:[],\n            city:\"\",\n            country:\"\",\n            address:\"\",\n            minPrice:0,\n            maxPrice:0,\n            consultPrice:0,\n            location:new ClinicLocation(0, 0, 2)\n        };\n    }\n}","export class ClinicLocation {\n    latitude:number;\n    longitude:number;\n    zoom:number;\n\n    constructor(latitude:number, longitude:number, zoom:number){\n        this.latitude = latitude;\n        this.longitude = longitude;\n        this.zoom = zoom;\n    }\n}","export class Contact {\n    name:string;\n    id:number;\n    message : string;\n    email:string;\n    phone?:string;\n  \n  }\n  \n","export class Like {\n    authorId:string;\n\n    constructor(authorId:string){\n        this.authorId = authorId;\n    }\n}","export class Password{\n    oldPassword:string;\n    newPassword:string;\n\n    constructor(oldPassword:string, newPassword:string){\n        this.oldPassword = oldPassword;\n        this.newPassword = newPassword;\n    }\n}","import { Like } from './Like';\n\nexport class Review {\n    id:string;\n    content:string;\n    rating:number;\n    patientId:string;\n    likes:Like[];\n    \n    constructor(content:string, likes:Like[], rating:number, authorId:string){\n        this.content = content;\n        this.likes = likes;\n        this.rating = rating;\n        this.patientId = authorId;\n    };\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- Page Content -->\n<div class=\"content\">\n    <div class=\"container\">\n        <div class=\"row d-flex justify-content-center\">\n            <div class=\"col-8\">\n                <div class=\"about\">\n                    <p>AirDoc est une application marocaine fondée en 2020 \n                        qui propose un service de gestion en ligne des consultations \n                        pour les professionnels de santé et un service de prise de rendez-vous en ligne \n                        pour les patients</p>  \n                </div>\n                                \n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../services/auth.service'\nimport { TokenStorageService } from '../../../services/token-storage.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from 'src/app/models/User';\n\n\n@Component({\n  selector: 'app-admin-login',\n  templateUrl: './admin-login.component.html',\n  styleUrls: ['./admin-login.component.css']\n})\nexport class AdminLoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n  retUrl:string = \"admin/profile\";\n\n  constructor(\n    private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    private router:Router,\n    private activatedRoute:ActivatedRoute) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n    this.activatedRoute.queryParamMap\n                .subscribe(params => {\n            this.retUrl = params.get('retUrl'); \n            console.log( 'LoginComponent/ngOnInit '+ this.retUrl);\n        });\n  }\n\n  onSubmit() {\n    this.authService.adminLogin(this.form).subscribe(\n      (user:User) => {\n        this.tokenStorage.saveToken(user.accessToken);\n        this.tokenStorage.saveUser(user);\n        this.tokenStorage.saveUserType(user.userType);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.authService.getLoggedInUser.emit(user);\n        console.log(\"login successful\");\n        console.log(this.tokenStorage.getUser());\n        console.log( 'return to '+ this.retUrl);\n           if (this.retUrl!=null) {\n                this.router.navigate( [this.retUrl]);\n           } else {\n                this.router.navigate( ['admin/profile']);\n           }\n           \n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  \n}","<div class=\"content \">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n\n                <!-- Login Tab Content -->\n                <div class=\"account-content\">\n                    <div class=\"row align-items-center justify-content-center\">\n                        <div class=\"col-md-7 col-lg-6 login-left\">\n                            <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"AirDoc Login\">\n                        </div>\n                        <div class=\"col-md-12 col-lg-6 login-right\">\n                            <div class=\"login-header\">\n                                <h3>Login <span>AirDoc</span></h3>\n                            </div>\n                            <form *ngIf=\"!isLoggedIn\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                                novalidate>\n                                <div class=\"form-group\">\n                                    <div\n                                      class=\"alert alert-danger\"\n                                      role=\"alert\"\n                                      *ngIf=\"f.submitted && isLoginFailed\"\n                                    >\n                                      Login failed: {{ errorMessage }}\n                                    </div>\n                                  </div>\n                                <div class=\"form-group form-focus\">\n                                    <input class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\" required\n                                        #email=\"ngModel\" type=\"email\" class=\"form-control floating\">\n                                    <label class=\"focus-label\">Email</label>\n                                    \n                                    </div>\n                                    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && email.invalid\"> Email is required!</div>\n                                    <div class=\"form-group form-focus\">\n                                        <input name=\"password\" [(ngModel)]=\"form.password\" required minlength=\"6\"\n                                            #password=\"ngModel\" type=\"password\" class=\"form-control floating\">\n                                        <label class=\"focus-label\">Password</label>\n                                        \n                                    </div>\n                                    <div class=\"alert alert-danger\" role=\"alert\"\n                                            *ngIf=\"f.submitted && password.invalid\">\n                                            <div *ngIf=\"password.errors.required\">Password is required</div>\n                                            <div *ngIf=\"password.errors.minlength\">\n                                                Password must be at least 6 characters\n                                            </div>\n                                        </div>\n                                    <div class=\"text-right\">\n                                        <a class=\"forgot-link\" routerLink=\"/doctor/forgot-password\">Forgot Password ?</a>\n                                    </div>\n                                    <button class=\"btn btn-primary btn-block btn-lg login-btn\"\n                                        type=\"submit\">Login</button>\n                                    \n                            </form>\n                        </div>\n                    </div>\n                </div>\n                <!-- /Login Tab Content -->\n\n            </div>\n        </div>\n\n    </div>\n\n</div>\n<!-- /Page Content -->","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin-profile',\n  templateUrl: './admin-profile.component.html',\n  styleUrls: ['./admin-profile.component.css']\n})\nexport class AdminProfileComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>admin-profile works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { Patient } from 'src/app/models/Patient';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { AppointmentService } from 'src/app/services/appointment.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-booking',\n  templateUrl: './booking.component.html',\n  styleUrls: ['./booking.component.css']\n})\nexport class BookingComponent implements OnInit {\n  doctor:Doctor;\n  doctorAvatar:any\n  patient:Patient;\n  appointment:Appointment = new Appointment();\n  // appointmentDate:string;\n  successMessage:string=\"\";\n  constructor(\n    private route:ActivatedRoute, \n    //private location:Location,\n    private router:Router,\n    private authService:AuthService,\n    private doctorService:DoctorService,\n    private patientService:PatientService,\n    private appointmentService:AppointmentService) { }\n\n  ngOnInit(): void {\n    this.route.params\n  .subscribe(\n    (params: Params) => {\n       params['id'];\n      this.doctorService.getById(params['id']).subscribe(res =>{\n        this.doctor = res;\n        this.appointment.doctorId = this.doctor.id;\n\n        console.log(\"Doctor: \" + this.doctor.id);\n      });\n      this.doctorService.getAvatar(params['id']).subscribe(avatar =>{\n        this.doctorAvatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      })\n  });\n  this.authService.getCurrentUser().subscribe(user => {\n    this.patientService.getById(user.id).subscribe(res => {\n      this.patient = res;\n      this.appointment.patientId = this.patient.id;\n      console.log(\"Patient: \" + this.patient.id);\n    })\n  });\n  \n}\n\nonSubmit(){\n  // console.log(\"date : \", this.appointmentDate);\n  // console.log(JSON.stringify(this.appointment));\n  // const bookingDate = new Date(Date.now());\n  const bookingDate = new Date(); //TODO cela devrait être fait à back-end\n  this.appointment.state = \"PENDING\";\n  // this.appointment.appointmentDate = appDate.toISOString();\n  this.appointment.bookingDate = bookingDate.toISOString();\n  console.log(\"iso date booking\", bookingDate.toISOString());\n  console.log(\"appoin\", JSON.stringify(this.appointment));\n  this.appointmentService.add(this.appointment).subscribe(res => {\n    console.log(\"appointment added\", JSON.stringify(res));\n    // this.appointmentDate = \"\";\n    this.appointment.description = \"\";\n    this.successMessage = \"Appointments Sent\";\n    setTimeout(()=>{   \n      this.successMessage = '';\n }, 3000);\n  });\n  \n  //this.location.back();\n  //this.router.navigate([\"home\"]);\n}\n\n}\n","<!-- Breadcrumb -->\n<div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center\">\n            <div class=\"col-md-12 col-12\">\n                <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Home</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Booking</li>\n                    </ol>\n                </nav>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- /Breadcrumb -->\n\n<!-- Page Content -->\n<div class=\"container mb-2\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <!-- <a routerLink=\"/doctor/profile/{{doctor.id}}\">\n                            <img *ngIf=\"doctorAvatar.length > 100\" [src]=\"doctorAvatar\" alt=\"Doctor Image\">\n                            <img *ngIf=\"doctorAvatar.length < 100\" src=\"assets/img/default-doctor.png\"\n                                alt=\"Doctor Image\">\n\n                        </a> -->\n\n                        <div class=\"col-12\" *ngIf=\"doctorAvatar\">\n                            <a *ngIf=\"doctorAvatar.length > 100\"  data-fancybox=\"gallery\" [href]=\"doctorAvatar\">\n                                <img class=\"img-fluid img-thumbnail doctor-img\" [src]=\"doctorAvatar\" alt=\"Doctor Image\">\n                            </a>\n                            <a *ngIf=\"doctorAvatar.length < 100\"  data-fancybox=\"gallery\" href=\"assets/img/default-patient.jpeg\">\n                                <img src=\"assets/img/default-doctor.png\" class=\"img-fluid img-thumbnail doctor-img\" alt=\"Doctor Image\">\n                            </a>\n                        </div>\n                        \n                        <div class=\"col-12\">\n                            <h4><a class=\"text_secondary\" routerLink=\"/doctor/profile/{{doctor?.id}}\">Dr. {{doctor?.firstname | titlecase }}\n                                    {{doctor?.lastname | titlecase }}</a></h4>\n                            <app-rating-star [currentRate]=\"doctor?.rating\" [readonly]=\"true\"></app-rating-star>\n                        </div>\n                        <!-- <p class=\"text-muted mb-0\"><i class=\"fas fa-map-marker-alt\"></i> , </p> -->\n                    </div>\n                </div>\n            </div>\n            <!-- Schedule Widget -->\n\n            <div class=\"card mb-3\">\n                <div class=\"card-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <div class=\"form-group\">\n                                <label class=\"control-label\">Description</label>\n                                <textarea [(ngModel)]=\"appointment.description\" class=\"form-control\"\n                                    rows=\"5\"></textarea>\n                            </div>\n                        </div>\n\n                        <!-- <div class=\"col-md-4\">\n                            <div class=\"form-group\">\n                                <label class=\"control-label\">Appointment Date</label>\n                                <input [(ngModel)]=\"appointmentDate\" type=\"datetime-local\" class=\"form-control\"\n                                    name=\"appointmentDate\">\n                            </div>\n                            \n                        </div> -->\n                        <div class=\"col-12 \">\n                            <input (click)=\"onSubmit()\" type=\"submit\" class=\"btn btn_primary \" value=\"Submit\">\n                        </div>\n\n                        \n                        \n\n                    </div>\n                    <div *ngIf=\"successMessage\" class=\"alert alert-success p-2\">\n                        <strong>Success!</strong> {{successMessage}}\n                    </div>\n                </div>\n            </div>\n            <!-- /Schedule Widget -->\n\n        </div>\n    </div>\n</div>","import { ContactService } from '../../services/contact.service'\nimport { Router } from '@angular/router';\nimport { Contact } from '../../models/Contact';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n  styleUrls: ['./contact.component.css']\n})\nexport class ContactComponent implements OnInit {\n\n  contact: Contact = new Contact();\n  submitted = false;\n  successMessage: string = '';\n  constructor(\n    private contactService: ContactService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    console.log(\"submiting contact Contact \", JSON.stringify(this.contact));\n    this.contactService.addContact(this.contact).subscribe(res => {\n      console.log(\"submiting contact Contact \", JSON.stringify(res));\n      this.successMessage = \"Message Sent\";\n      setTimeout(() => {\n        this.successMessage = '';\n      }, 3000);\n    });\n  }\n}\n","<section class=\"cmspage mtb-40\">\n    <div class=\"container\">\n      <div class=\"page-desc\">\n        <div class=\"row justify-content-center\">\n          <div class=\"col-md-8\">\n            <h1>Contact</h1>\n            <form (ngSubmit)=\"onSubmit(); addContact.reset()\" #addContact=\"ngForm\">\n              <div class=\"form-group\">\n                <input type=\"text\" name=\"name\" id=\"name\" [(ngModel)]=\"contact.name\" class=\"form-control\" placeholder=\"Name\" required #name=\"ngModel\">\n                <div *ngIf=\"name.invalid && (name.dirty || name.touched)\" class=\"error\">\n                  <div *ngIf=\"name.errors.required\">\n                    Name is required.\n                  </div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <input type=\"text\" name=\"email\" id=\"email\" [(ngModel)]=\"contact.email\" class=\"form-control\" placeholder=\"E-Mail\" required email #email=\"ngModel\">\n                <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"error\">\n                  <div *ngIf=\"email.errors.required\">Email is required.</div>\n                  <div *ngIf=\"email.errors.email\">Email must be a valid email address.</div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <input type=\"text\" name=\"phone\" id=\"phone\" [(ngModel)]=\"contact.phone\" class=\"form-control\" placeholder=\"Phone\">\n              </div>\n              <div class=\"form-group\">\n                <textarea name=\"message\" id=\"message\" [(ngModel)]=\"contact.message\" rows=\"5\" class=\"form-control\" placeholder=\"Message\" required #message=\"ngModel\"></textarea>\n                <div *ngIf=\"message.invalid && (message.dirty || message.touched)\" class=\"error\">\n                  <div *ngIf=\"message.errors.required\">Message is required.</div>\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <button [disabled]=\"!addContact.form.valid\" class=\"btn btn-success\">Send Message</button>\n              </div>\n            </form>\n            <div *ngIf=\"successMessage\" class=\"alert alert-success\">\n              <strong>Success!</strong> {{successMessage}}\n            </div>\n          </div>\n          \n        </div>\n      </div>\n    </div>\n  </section>","import { Component, OnInit, Type } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { Clinic } from 'src/app/models/Clinic';\nimport { HttpEventType, HttpResponse } from '@angular/common/http';\nimport { ClinicLocation } from 'src/app/models/ClinicLocation';\n\n@Component({\n  selector: 'app-clinic-settings',\n  templateUrl: './clinic-settings.component.html',\n  styleUrls: ['./clinic-settings.component.css']\n})\nexport class ClinicSettingsComponent implements OnInit {\n\n  avatar:any;\n  doctor:Doctor;\n  clinic:Clinic;\n  clinicPhotos:Array<any>\n  specialities:string;\n  services:string;\n\n  uploadProgress:number;\n  uploadErrorMessage:string;\n  currentSelectedPhoto:any;\n  successMessage:string='';\n\n  constructor(private authService:AuthService, private doctorService:DoctorService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(res => {\n      this.doctorService.getAvatar(res.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n      this.doctorService.getById(res.id).subscribe(doctor => {\n        this.doctor = doctor;\n      });\n      this.doctorService.getClinic(res.id).subscribe(clinic => {\n        this.clinic = clinic;\n        console.log(\"Clinic : : \", JSON.stringify(this.clinic))\n        if (!!!this.clinic){\n          console.log(\"empty Clinic: \", JSON.stringify(this.clinic));\n          this.clinic = Clinic.empty();\n        }\n        this.services = this.clinic.services.join(', ');\n        this.specialities = this.clinic.specialities.join(', ');\n      });\n      this.doctorService.getClinicPhotos(res.id).subscribe(photos => {\n        photos = photos.filter((photo) => {\n          console.log(\"photo \", photo);\n          return photo !== null;\n        });\n        this.clinicPhotos = photos.map(photo => {\n          return {\n            \"id\": photo.id,\n            \"image\": 'data:image/jpeg;base64,' + photo.image.data\n          };\n        });\n      });\n    })\n  }\n\n  onSubmit(){\n    console.log(\"services: \", this.services.split(','));\n    console.log(\"services: \", this.specialities.split(','));\n    this.clinic.services = this.services.split(',');\n    this.clinic.specialities = this.specialities.split(',');\n    console.log(\"clinic new name: \", JSON.stringify(this.clinic));\n     this.doctorService.updateClinic(this.doctor.id, this.clinic).subscribe(clinic => {\n       this.clinic = clinic;\n       console.log(\"clinic: \", JSON.stringify(this.clinic))\n        this.successMessage = \"Change Saved\";\n        setTimeout(()=>{   \n          this.successMessage = '';\n     }, 3000);\n    });\n  }\n\n  deleteClinicPhoto(photoId:string){\n    console.log(\"Photo ID: \", photoId);\n    this.doctorService.deleteClinicPhoto(this.doctor.id, photoId).subscribe(res =>{\n      console.log(\"photo Deleted\", JSON.stringify(res));\n      this.doctorService.getClinicPhotos(this.doctor.id).subscribe(photos => {\n        console.log(JSON.stringify(photos));\n        // photos = photos.filter((photo, index, photos) => {\n        //   console.log(\"photo \", photo);\n        //   if(photo === null){\n        //     console.log(\"photo is null\");\n        //     photos = photos.slice(index, 1);\n        //   };\n        // });\n        photos = photos.filter((photo) => {\n          console.log(\"photo \", photo);\n          if(photo === null){\n            console.log(\"photo is null\");\n            return false;\n          };\n          return true;\n        });\n        console.log(\"photos after filter: \", JSON.stringify(photos));\n        this.clinicPhotos = photos.map(photo => {\n          console.log(\"photo : \", JSON.stringify(photo));\n          return {\n            \"id\": photo.id,\n            \"image\": 'data:image/jpeg;base64,' + photo.image.data\n          };\n        });\n      });\n    });\n  }\n\n\n  uploadClinicPhoto(event){\n    this.currentSelectedPhoto = event.target.files.item(0);\n    this.doctorService.uploadClinicPhoto(this.doctor.id,this.currentSelectedPhoto ).subscribe(\n      event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.uploadProgress = Math.round(100 * event.loaded / event.total);\n        } else if (event instanceof HttpResponse) {\n          this.doctorService.getClinicPhotos(this.doctor.id).subscribe(photos => {\n            this.clinicPhotos = photos.map(photo => {\n              return {\n                \"id\": photo.id,\n                \"image\": 'data:image/jpeg;base64,' + photo.image.data\n              };\n            });\n            this.uploadProgress = 0;\n            this.currentSelectedPhoto = undefined;\n          });\n        }\n      },\n      err => {\n        this.uploadProgress = 0;\n        this.uploadErrorMessage = 'Could not upload the Photo!';\n        this.currentSelectedPhoto = undefined;\n      });\n  }\n\n  dragEnd(latitude:number, longitude:number){\n    console.log(\"latitude: \", latitude, \"longitude: \", longitude);\n    this.clinic.location.latitude = latitude;\n    this.clinic.location.longitude = longitude;\n    \n  }\n\n  zoomChange(zoom:number){\n    console.log(\"zoom: \", zoom);\n    this.clinic.location.zoom = zoom;\n    \n  }\n\n}\n","<div class=\"container-fluid mb-3 m-2\">\n    <div class=\"row\">\n        <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n            <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n        </div>\n        <div class=\"col-md-7 col-lg-8 col-xl-9\">\n            <!-- Clinic Info -->\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <h4 class=\"card-title\">Clinic Info</h4>\n                    <div class=\"row form-row\">\n                        <div class=\"col-md-6\">\n                            <div class=\"form-group\">\n                                <label>Clinic Name</label>\n                                <input type=\"text\" class=\"form-control\" [ngModel]=\"clinic?.name\"\n                                    (ngModelChange)=\"clinic.name=$event\">\n                            </div>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <div class=\"form-group\">\n                                <label>Clinic Full Address</label>\n                                <input [value]=\"clinic?.address\" type=\"text\" class=\"form-control\"\n                                    [ngModel]=\"clinic?.address\" (ngModelChange)=\"clinic.address=$event\">\n                            </div>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <div class=\"form-group\">\n                                <label>Country</label>\n                                <input [value]=\"clinic?.country\" type=\"text\" class=\"form-control\"\n                                    [ngModel]=\"clinic?.country\" (ngModelChange)=\"clinic.country=$event\">\n                            </div>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <div class=\"form-group\">\n                                <label>City</label>\n                                <input [value]=\"clinic?.city\" [ngModel]=\"clinic?.city\"\n                                    (ngModelChange)=\"clinic.city=$event\" type=\"text\" class=\"form-control\">\n                            </div>\n                        </div>\n                        <div class=\"col-md-12\">\n                            <div class=\"form-group\">\n                                <label>Description</label>\n                                <textarea [value]=\"clinic?.description\" [ngModel]=\"clinic?.description\"\n                                    (ngModelChange)=\"clinic.description=$event\" class=\"form-control\"\n                                    rows=\"5\"></textarea>\n                            </div>\n                        </div>\n                        <div class=\"col-md-4\">\n                            <div class=\"form-group\">\n                                <label>Min Price</label>\n                                <input [value]=\"clinic?.minPrice\" [ngModel]=\"clinic?.minPrice\"\n                                    (ngModelChange)=\"clinic.minPrice=$event\" type=\"number\" class=\"form-control\">\n                            </div>\n                        </div>\n                        <div class=\"col-md-4\">\n                            <div class=\"form-group\">\n                                <label>Max Price</label>\n                                <input [value]=\"clinic?.maxPrice\" [ngModel]=\"clinic?.maxPrice\"\n                                    (ngModelChange)=\"clinic.maxPrice=$event\" type=\"number\" class=\"form-control\">\n                            </div>\n                        </div>\n                        <div class=\"col-md-4\">\n                            <div class=\"form-group\">\n                                <label>Consulte Price</label>\n                                <input [value]=\"clinic?.consultPrice\" [ngModel]=\"clinic?.consultPrice\"\n                                    (ngModelChange)=\"clinic.consultPrice=$event\" type=\"number\" class=\"form-control\">\n                            </div>\n                        </div>\n                        <div class=\"col-md-12\">\n                            <div class=\"form-group\">\n                                <label>Clinic Images</label>\n                                <!-- <form action=\"#\" class=\"dropzone\"></form> -->\n                                <div *ngIf=\"currentSelectedPhoto\" class=\"progress\">\n                                    <div class=\"progress-bar progress-bar-info progress-bar-striped\" role=\"progressbar\"\n                                        attr.aria-valuenow=\"{{ uploadProgress }}\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                                        [ngStyle]=\"{ width: uploadProgress + '%' }\">\n                                        {{ uploadProgress }}%\n                                    </div>\n                                </div>\n                                <div class=\"text-center\">\n                                    <div class=\"add-photo-btn\">\n                                        <span><i class=\"fa fa-upload\"></i> Upload Photo</span>\n                                        <input type=\"file\" class=\"upload\" (change)=\"uploadClinicPhoto($event)\">\n                                    </div>\n                                    <small class=\"form-text text-muted\">Allowed JPG, GIF or PNG. Max size of\n                                        2MB</small>\n                                </div>\n                                <!-- <input type=\"file\" class=\"upload\" (change)=\"uploadClinicPhoto($event)\" /> -->\n                            </div>\n                            <div class=\"upload-wrap\">\n                                <div *ngFor=\"let clinicPhoto of clinicPhotos\" class=\"upload-images border\">\n                                    <img [src]=\"clinicPhoto?.image\" alt=\"Upload Image\">\n                                    <a (click)=\"deleteClinicPhoto(clinicPhoto?.id)\"\n                                        class=\"btn btn-icon btn-danger btn-sm\"><i class=\"fa fa-trash\"></i></a>\n                                </div>\n                            </div>\n\n                        </div>\n\n                        <div class=\"col-md-12 mt-5\">\n                            <div class=\"form-group\">\n                                <label>Services</label>\n                                <input [value]=\"services\" [ngModel]=\"services\" (ngModelChange)=\"services=$event\"\n                                    type=\"text\" class=\"form-control\">\n                                <small class=\"form-text text-muted\">Note : Type , to enter to multiple\n                                    Services</small>\n                            </div>\n                        </div>\n                        <div class=\"col-md-12\">\n                            <div class=\"form-group\">\n                                <label>Specialisation</label>\n                                <input [value]=\"specialities\" [ngModel]=\"specialities\"\n                                    (ngModelChange)=\"specialities=$event\" type=\"text\" class=\"form-control\">\n                                <small class=\"form-text text-muted\">Note : Type , to enter to multiple\n                                    Specializations</small>\n                            </div>\n                        </div>\n                        <div *ngIf=\"clinic?.location\" class=\"col-md-12\">\n                            <div class=\"form-group\">\n                                <label>Clinic Location</label>\n                                <agm-map [latitude]=\"clinic.location.latitude\" [longitude]=\"clinic.location.longitude\"\n                                    [zoom]=\"clinic.location.zoom\" (zoomChange)=\"zoomChange($event)\">\n                                    <agm-marker [latitude]=\"clinic.location.latitude\"\n                                        [longitude]=\"clinic.location.longitude\" [markerDraggable]=\"true\"\n                                        (dragEnd)=\"dragEnd($event.coords.lat, $event.coords.lng)\">\n                                    </agm-marker>\n                                </agm-map>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"m-3 \">\n                    <button (click)=\"onSubmit()\" type=\"submit\" class=\"btn btn_secondary\">Save Changes</button>\n                </div>\n                <div *ngIf=\"successMessage\" class=\"alert alert-success\">\n                    <strong>Success!</strong> {{successMessage}}\n                </div>\n            </div>\n            <!-- /Clinic Info -->\n\n\n\n\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { Patient } from 'src/app/models/Patient';\nimport { AppointmentService } from 'src/app/services/appointment.service';\nimport { PatientService } from 'src/app/services/patient.service';\n\n@Component({\n  selector: 'app-doctor-appointment',\n  templateUrl: './doctor-appointment.component.html',\n  styleUrls: ['./doctor-appointment.component.css']\n})\nexport class DoctorAppointmentComponent implements OnInit {\n\n  @Input() appointment:Appointment;\n  // appointmentDate:Date;\n  // bookingDate:Date;\n  patient:Patient;\n  avatar:any;\n  \n  constructor(\n    private appointmentService:AppointmentService,\n    private patientService:PatientService) { }\n\n  ngOnInit(): void {\n    // if (this.appointment.appointmentDate){\n    //   this.appointmentDate = new Date(this.appointment.appointmentDate);\n    // }\n    // if(this.appointment.bookingDate){\n    //   this.bookingDate = new Date(this.appointment.bookingDate);\n    // }\n    this.patientService.getById(this.appointment.patientId).subscribe(res => {\n      this.patient = res;\n    });\n    this.patientService.getAvatar(this.appointment.patientId).subscribe(avatar => {\n      this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n    });\n  }\n\n  acceptAppointment(){\n    console.log(\"appointement date\", this.appointment.appointmentDate);\n    if(!this.appointment.appointmentDate){\n      return ;\n    }\n    // this.appointment.appointmentDate = this.appointmentDate.toISOString();\n    this.appointment.appointmentDate = new Date(this.appointment.appointmentDate).toISOString(); //fix zone problem\n    this.appointment.state = \"ACCEPTED\";\n    this.appointmentService.update(this.appointment).subscribe(res => {\n      this.appointment = res;\n    });\n  }\n\n  cancelAppointment(){\n    this.appointment.state = \"CANCELED\";\n    this.appointmentService.update(this.appointment).subscribe(res => {\n      this.appointment = res;\n    });\n  }\n\n  viewAppoitment(){\n    // navigate to appoitment page;\n  }\n}\n","<!-- Appointment List -->\n<div class=\"card\">\n    <div class=\"card-body\">\n        <div class=\"row\" *ngIf=\"patient\">\n            <!-- <div class=\"col-md-3 col-sm-12\">\n                <a routerLink=\"/patient/profile/{{patient.id}}\">\n                    <img *ngIf=\"avatar?.length > 100\" [src]=\"avatar\" class=\"img-fluid rounded patient-img\" alt=\"Patient Image\">\n                    <img *ngIf=\"avatar?.length < 100\" src=\"assets/img/default-patient.jpeg\" class=\"img-fluid img-thumbnail rounded patient-img\" alt=\"Patient Image\">\n                                             \n                </a>\n                <h3><a class=\"\" routerLink=\"/patient/profile/{{patient.id}}\">{{patient.firstname | titlecase }} {{patient.lastname | titlecase }}</a></h3>\n            </div> -->\n            <div class=\"col-md-3 col-sm-12 \">\n                <a routerLink=\"/patient/profile/{{patient.id}}\">\n                    <img *ngIf=\"avatar?.length > 100\" [src]=\"avatar\" class=\"img-fluid rounded patient-img\"\n                        alt=\"Patient Image\">\n                    <img *ngIf=\"avatar?.length < 100\" src=\"assets/img/default-patient.jpeg\"\n                        class=\"img-fluid img-thumbnail rounded patient-img\" alt=\"Patient Image\">\n\n                </a>\n                <h3><a class=\"\" routerLink=\"/patient/profile/{{patient.id}}\">{{patient.firstname | titlecase }}\n                        {{patient.lastname | titlecase }}</a></h3>\n            </div>\n            <div class=\"col-md-9 col-sm-12\">\n                <div class=\"d-flex flex-column w-100 h-100\">\n                    <div class=\"flex-fill\">\n                        <p class=\"h5\">{{appointment.description}}</p>\n                    </div>\n                    <div class=\"d-flex flex-column justify-conter-start align-items-start\">\n                       \n                            <h6 *ngIf=\"patient?.email\"><i class=\"fa fa-envelope\"></i> {{patient.email}}</h6>\n                        <h6 *ngIf=\"patient?.phone\" class=\"mb-0\"><i class=\"fa fa-phone\"></i> {{patient.phone}}</h6>\n                        <h6  class=\"mb-0\"><i class=\"fa fa-phone\"></i> 0606060606</h6>\n                        <h6 *ngIf=\"appointment.appointmentDate\"><i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i> Appointement : {{appointment.appointmentDate | date: 'short': 'locale'}}</h6>\n                        <h6 *ngIf=\"appointment.bookingDate\"><i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i> Booking Date : {{appointment.bookingDate | date: 'short': 'locale' }}</h6>\n                        <div *ngIf=\"appointment.state == 'PENDING'\" class=\"form-group p-0 m-1 align-self-end\">\n                            <input [(ngModel)]=\"appointment.appointmentDate\" type=\"datetime-local\" class=\"form-control\"\n                                name=\"appointmentDate\">\n                        </div>\n                    </div>\n                    <div class=\" d-flex flex-row justify-content-end\">\n                        <div class=\"flex-fill\">\n                            <a *ngIf=\"appointment.state == 'ACCEPTED'\" routerLink=\"/doctor/chat/video/{{patient.id}}\"\n                                class=\"btn btn-sm bg-success text-left m-1\">\n                                <i class=\"fa fa-video-camera\" aria-hidden=\"true\"></i> Appointement\n                            </a>\n                        </div>\n                        <a *ngIf=\"appointment.state == 'PENDING'\" (click)=\"acceptAppointment()\"\n                            class=\"btn btn-sm bg-success flex-shrink-0 m-1\">\n                            <i class=\"fa fa-check\"></i>Accept\n                        </a>\n\n                        <a *ngIf=\"appointment.state == 'PENDING'\" (click)=\"cancelAppointment()\"\n                            class=\"btn btn-sm bg-danger  m-1\">\n                            <i class=\"fa fa-times\"></i> Cancel\n                        </a>\n                        <a *ngIf=\"appointment.state == 'ACCEPTED'\" class=\"btn btn-sm bg-info  m-1\">\n                            <i class=\"fa fa-check\"></i> {{appointment.state}}\n                        </a>\n                        <a *ngIf=\"appointment.state == 'CANCELED'\" class=\"btn btn-sm  bg-danger  m-1\">\n                            <i class=\"fa fa-times\"></i> {{appointment.state}}\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <!-- <div class=\"col-md-5 col-sm-12\">\n                <div class=\"row\">\n                    <div class=\"col-12 p-2\">\n                        <p class=\"h5\">{{appointment.description}}</p>\n                    </div>\n                    <div class=\"col-12\">\n                        <h6><i class=\"fa fa-clock\"></i> {{appointmentDate | date:'full'}}</h6>\n                       \n                        <h6 *ngIf=\"patient?.email\"><i class=\"fa fa-envelope\"></i> {{patient.email}}</h6>\n                        <h6 *ngIf=\"patient?.phone\" class=\"mb-0\"><i class=\"fa fa-phone\"></i> {{patient.phone}}</h6>\n                    </div>\n                </div>\n            </div> -->\n            <!-- <div class=\"col-md-4 col-sm-12\">\n                  <a *ngIf=\"appointment.state == 'PENDING'\" (click)=\"acceptAppointment()\" class=\"btn btn-sm bg-success flex-shrink-0\">\n                 <i class=\"fa fa-check\"></i>\n                     Accept\n                \n                </a>\n                    \n                <a *ngIf=\"appointment.state == 'PENDING'\"  (click)=\"cancelAppointment()\" class=\"btn btn-sm bg-danger\">\n                    <i class=\"fa fa-times\"></i> Cancel\n                </a>\n                <a *ngIf=\"appointment.state == 'ACCEPTED'\"  class=\"btn btn-sm bg-success\">\n                    <i class=\"fa fa-check\"></i> {{appointment.state}}\n                </a>\n                <a *ngIf=\"appointment.state == 'CANCELED'\"  class=\"btn btn-sm  bg-danger\">\n                    <i class=\"fa fa-times\"></i> {{appointment.state}}\n                </a>\n            \n            </div> -->\n        </div>\n    </div>\n</div>\n\n<!-- /Appointment List -->","import { Component, OnInit } from '@angular/core';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { AppointmentService } from 'src/app/services/appointment.service';\n\n@Component({\n  selector: 'app-doctor-appointments',\n  templateUrl: './doctor-appointments.component.html',\n  styleUrls: ['./doctor-appointments.component.css']\n})\nexport class DoctorAppointmentsComponent implements OnInit {\n  avatar:any;\n  doctor:Doctor;\n  appointments:Appointment[];\n  constructor(\n    private autService:AuthService,\n    private doctorService:DoctorService,\n    private appotmentService:AppointmentService) { }\n\n  ngOnInit(): void {\n    this.autService.getCurrentUser().subscribe(user => {\n      this.doctorService.getById(user.id).subscribe(doctor => {\n        this.doctor = doctor;\n      });\n      this.doctorService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n      this.appotmentService.getAllDoctorAppoitments(user.id).subscribe(apps => {\n        this.appointments = apps;\n      })\n    });\n  }\n\n}\n","<!-- Breadcrumb -->\n<div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center\">\n            <div class=\"col-md-12 col-12\">\n                <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a routerLink=\"/home\">Home</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Appointments</li>\n                    </ol>\n                </nav>\n                <h2 class=\"breadcrumb-title\">Appointments</h2>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- /Breadcrumb -->\n\n<!-- Page Content -->\n\n    <div class=\"container-fluid mb-2\">\n        <div class=\"row\">\n            <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n            </div>\n\n\n            <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                <div>\n                    <app-doctor-appointment\n                    *ngFor=\"let appointment of appointments\" \n                    [appointment]=\"appointment\"></app-doctor-appointment>\n                    <div *ngIf=\"appointments?.length === 0\" class=\"list-group-item\">\n                        <h6 >You Have No appointments</h6>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n<!-- Page Content -->","import { Component, OnInit } from '@angular/core';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { Password } from 'src/app/models/Password';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-doctor-change-password',\n  templateUrl: './doctor-change-password.component.html',\n  styleUrls: ['./doctor-change-password.component.css']\n})\nexport class DoctorChangePasswordComponent implements OnInit {\n\n  isPasswordFailed = false;\n  isPasswordSuccess = false;\n  errorMessage = '';\n  successMessage = '';\n  passwordMatch:boolean = true;\n  form:any = {};\n  doctor:Doctor;\n  avatar:any;\n  constructor(\n    private doctorSerive:DoctorService,\n    private authService:AuthService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.doctorSerive.getById(user.id).subscribe(doc => {\n        this.doctor = doc;\n      });\n      this.doctorSerive.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      })\n    })\n  }\n\n  onSubmit(){\n    if (this.form.newPassword !== this.form.confirmPassword){\n      this.passwordMatch = false;\n      console.log(\"password does not match\");\n      return;\n    }\n    const password = new Password(this.form.oldPassword, this.form.newPassword);\n    this.doctorSerive.updatePassword(this.doctor.id, password).subscribe(message =>{\n      console.log(\"password success: \", JSON.stringify(message));\n      this.isPasswordFailed = false;\n      this.isPasswordSuccess = true;\n      this.successMessage = message.message;\n      setTimeout(() => this.successMessage = '', 2000);\n    }, err => {\n      this.isPasswordFailed = true;\n      console.log(\"password failed: \", JSON.stringify(err));\n      this.errorMessage = err.error.message;\n    });\n  }\n}\n","<div class=\"main-wrapper\">\n    <div class=\"breadcrumb-bar\">\n        <div class=\"container-fluid\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-md-12 col-12\">\n                    <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                        <ol class=\"breadcrumb\">\n                            <li class=\"breadcrumb-item\"><a href=\"#\">Patient</a></li>\n                            <li class=\"breadcrumb-item active\" aria-current=\"page\">Change Password</li>\n                        </ol>\n                    </nav>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n        <div class=\"container-fluid\">\n            <div class=\"row\">\n\n                <!-- Profile Sidebar -->\n                <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                    <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n                </div>\n\n\n                <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <div class=\"row\">\n                                <div class=\"col-md-12 col-lg-6\">\n                                    <form  name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate>\n                                        <input type=\"password\" class=\"form-control floating\" name=\"oldPassword\"\n                                            [(ngModel)]=\"form.oldPassword\" required minlength=\"8\" maxlength=\"20\"\n                                            #oldPassword=\"ngModel\">\n                                        <label class=\"focus-label\">Old Password</label>\n                                        <div class=\"alert-danger\" *ngIf=\"f.submitted && oldPassword.invalid\">\n                                            <div *ngIf=\"oldPassword.errors.required\">Password is required</div>\n                                            <div *ngIf=\"oldPassword.errors.minlength\">\n                                                Password must be at least 8 characters\n                                            </div>\n                                            <div *ngIf=\"oldPassword.errors.maxlength\">\n                                                Password must be at most 20 characters\n                                            </div>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control floating\" name=\"newPassword\"\n                                            [(ngModel)]=\"form.newPassword\" required minlength=\"8\" maxlength=\"20\"\n                                            #newPassword=\"ngModel\">\n                                        <label class=\"focus-label\">New Password</label>\n                                        <div class=\"alert-danger\" *ngIf=\"f.submitted && newPassword.invalid\">\n                                            <div *ngIf=\"newPassword.errors.required  && !successMessage\">Password is required</div>\n                                            <div *ngIf=\"newPassword.errors.minlength\">\n                                                Password must be at least 8 characters\n                                            </div>\n                                            <div *ngIf=\"newPassword.errors.maxlength\">\n                                                Password must be at most 20 characters\n                                            </div>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control floating\" name=\"confirmPassword\"\n                                            [(ngModel)]=\"form.confirmPassword\" required minlength=\"8\" maxlength=\"20\"\n                                            #confirmPassword=\"ngModel\">\n                                        <label class=\"focus-label\">Confirm New Password</label>\n                                        <div class=\"alert-danger\" *ngIf=\"f.submitted && confirmPassword.invalid\">\n                                            <div *ngIf=\"confirmPassword.errors.required && !successMessage\">Password is required</div>\n                                            <div *ngIf=\"confirmPassword.errors.minlength\">\n                                                Password must be at least 8 characters\n                                            </div>\n                                            <div *ngIf=\"confirmPassword.errors.maxlength\">\n                                                Password must be at most 20 characters\n                                            </div>\n                                            \n                                        </div>\n                                        <div class=\"alert alert-danger\"  *ngIf=\"!passwordMatch\">\n                                            new Password and Confirm Password must match\n                                        </div>\n                                        <div class=\"alert alert-danger\" *ngIf=\"f.submitted && isPasswordFailed\">\n                                            Password failed!<br />{{ errorMessage }}\n                                        </div>\n                                        <div class=\"alert alert-success\" *ngIf=\"f.submitted && successMessage \">\n                                            <br/>\n                                            <b>Success</b>{{ successMessage }}\n                                        </div>\n                                        <div class=\"submit-section\">\n                                            <button type=\"submit\" class=\"btn btn_primary\">Submit</button>\n                                        </div>\n                                    </form>\n                                    <!-- /Change Password Form -->\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-doctor-dash-board',\n  templateUrl: './doctor-dash-board.component.html',\n  styleUrls: ['./doctor-dash-board.component.css']\n})\nexport class DoctorDashBoardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>doctor-dash-board works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { HttpEventType, HttpResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-doctor-profile-settings',\n  templateUrl: './doctor-profile-settings.component.html',\n  styleUrls: ['./doctor-profile-settings.component.css']\n})\nexport class DoctorProfileSettingsComponent implements OnInit {\n\n  doctor:Doctor;\n  avatar:any;\n  currentSelectedAvatar:any;\n  uploadProgress:number;\n  uploadErrorMessage:string;\n\n  constructor(\n    private doctorService:DoctorService,\n    private authService:AuthService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(res => {\n      this.doctorService.getById(res.id).subscribe(doc => {\n        this.doctor = doc;\n      });\n      this.doctorService.getAvatar(res.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      })\n    })\n  }\n\n  \n  onSubmit(){\n    console.log(\"clinic new name: \", JSON.stringify(this.doctor));\n     this.doctorService.updateDoctor(this.doctor).subscribe(doc => {\n       this.doctor = doc;\n       window.location.reload();\n    });\n  }\n\n\n  uploadAvatar(event){\n    this.currentSelectedAvatar = event.target.files.item(0);\n    this.doctorService.uploadAvatar(this.doctor.id,this.currentSelectedAvatar ).subscribe(\n      event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.uploadProgress = Math.round(100 * event.loaded / event.total);\n        } else if (event instanceof HttpResponse) {\n          this.doctorService.getAvatar(this.doctor.id).subscribe(avatar => {\n            this.avatar = 'data:image/jpeg;base64,' + avatar.image.data\n            this.uploadProgress = 0;\n            this.currentSelectedAvatar = undefined;\n          });\n        }\n      },\n      err => {\n        this.uploadProgress = 0;\n        this.uploadErrorMessage = 'Could not upload the Photo!';\n        this.currentSelectedAvatar = undefined;\n      });\n  }\n}\n","\n    <div class=\"container-fluid mb-2 \">\n        <div *ngIf=\"doctor\" class=\"row\">\n            <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n\n                <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n            </div>\n            <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                <!-- Basic Information -->\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\">Basic Information</h4>\n                        <div class=\"row form-row\">\n\n                            <div class=\"col-12 col-md-12 \">\n                                <div class=\"form-group\">\n                                    <div class=\"row\">\n                                        <div class=\"col-2\">\n                                            <!-- <img [src]=\"avatar\" alt=\"Patient Image\"> -->\n                                            <img class=\"img-fluid patient-img\" *ngIf=\"avatar.length > 100\"\n                                                [src]=\"avatar\" alt=\"Doctor Image\">\n                                            <img class=\"img-fluid patient-img\" *ngIf=\"avatar.length < 100\"\n                                                src=\"assets/img/default-doctor.png\" alt=\"Doctor Image\">\n                                        </div>\n                                        <div class=\"col-10\">\n                                            <div class=\"row\">\n                                                <div class=\"col-12\">\n                                                    <div class=\"text-center\">\n                                                        <div class=\"change-photo-btn btn_primary\">\n                                                            <label for=\"file\"><i class=\"fa fa-upload\"></i> Upload\n                                                                Photo</label>\n                                                            <input id=\"file\" type=\"file\" class=\"upload\"\n                                                                (change)=\"uploadAvatar($event)\">\n                                                        </div>\n                                                        <small class=\"form-text text-muted\">Allowed JPG, GIF or PNG. Max\n                                                            size of\n                                                            2MB</small>\n                                                    </div>\n\n                                                </div>\n                                                <div class=\"col-12\">\n                                                    <div *ngIf=\"currentSelectedAvatar\">\n                                                        <div class=\"progress-bar progress-bar-info progress-bar-striped\"\n                                                            role=\"progressbar\" attr.aria-valuenow=\"{{ uploadProgress }}\"\n                                                            aria-valuemin=\"0\" aria-valuemax=\"100\"\n                                                            [ngStyle]=\"{ width: uploadProgress + '%' }\">\n                                                            {{ uploadProgress }}%\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n\n\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Username <span class=\"text-danger\">*</span></label>\n                                    <input [value]=\"doctor.username\" type=\"text\" class=\"form-control\" readonly>\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Email <span class=\"text-danger\">*</span></label>\n                                    <input [value]=\"doctor.email\" type=\"email\" class=\"form-control\" readonly>\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>First Name <span class=\"text-danger\">*</span></label>\n                                    <input [value]=\"doctor.firstname\" [(ngModel)]=\"doctor.firstname\" type=\"text\"\n                                        class=\"form-control\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Last Name <span class=\"text-danger\">*</span></label>\n                                    <input [value]=\"doctor.lastname\" [(ngModel)]=\"doctor.lastname\" type=\"text\"\n                                        class=\"form-control\">\n                                </div>\n                            </div>\n                            <!-- <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Phone Number</label>\n                                    <input type=\"text\" class=\"form-control\">\n                                </div>\n                            </div> -->\n                            <!-- <div class=\"col-md-6\">\n                                <div class=\"form-group\">\n                                    <label>Gender</label>\n                                    <select class=\"form-control select\">\n                                        <option>Select</option>\n                                        <option>Male</option>\n                                        <option>Female</option>\n                                    </select>\n                                </div>\n                            </div> -->\n                            <!-- <div class=\"col-md-6\">\n                                <div class=\"form-group mb-0\">\n                                    <label>Date of Birth</label>\n                                    <input type=\"text\" class=\"form-control\">\n                                </div>\n                            </div> -->\n                            <div class=\"col-md-6\">\n                                <div class=\"form-group mb-0\">\n                                    <label>Speciality</label>\n                                    <input [value]=\"doctor.speciality\" [(ngModel)]=\"doctor.speciality\" type=\"text\"\n                                        class=\"form-control\">\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <!-- /Basic Information -->\n\n                <!-- About Me -->\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\">About Me</h4>\n                        <div class=\"form-group mb-0\">\n                            <label>Biography</label>\n                            <textarea [value]=\"doctor.aboutMe\" [(ngModel)]=\"doctor.aboutMe\" class=\"form-control\"\n                                rows=\"5\"></textarea>\n                        </div>\n                    </div>\n                    <div class=\"ml-3\">\n                        <button (click)=\"onSubmit()\" type=\"submit\" class=\"btn btn_secondary m-2 \">Save\n                            Changes</button>\n                    </div>\n                    \n                </div>\n                <!-- /About Me -->\n           \n\n\n                   \n                        \n            \n            \n            </div>\n        </div>\n    </div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Review } from 'src/app/models/Review';\nimport { Patient } from 'src/app/models/Patient';\nimport { PatientService } from 'src/app/services/patient.service';\n\n@Component({\n  selector: 'app-doctor-review',\n  templateUrl: './doctor-review.component.html',\n  styleUrls: ['./doctor-review.component.css']\n})\nexport class DoctorReviewComponent implements OnInit {\n\n  @Input() review:Review;\n  patient:Patient;\n  patientAvatar:any;\n  constructor(private patientService:PatientService) { }\n\n  ngOnInit(): void {\n    this.patientService.getById(this.review.patientId).subscribe(patient => {\n      this.patient = patient;\n    });\n    this.patientService.getAvatar(this.review.patientId).subscribe(avatar => {\n      this.patientAvatar = 'data:image/jpeg;base64,' + avatar.image.data;\n    })\n  }\n\n}\n","<li style=\"list-style: none;\">\n    <div class=\"comment\">\n        <!-- <img class=\"avatar avatar-sm rounded-circle\" alt=\"Patient Image\" [src]=\"patientAvatar\"> -->\n        <div class=\"comment-body\">\n            <div class=\"row pl-2\">\n                <div class=\"col-4\">\n                    <div class=\"row\">\n                        <img class=\"avatar avatar-sm rounded-circle\" alt=\"Patient Image\" [src]=\"patientAvatar\">\n                    </div>\n\n                    <div class=\"row mt-2\">\n                        <div class=\"meta-data\">\n                            <div class=\"row\">\n                                <span *ngIf=\"patient\" class=\"comment-author\">{{patient.firstname | titlecase}} {{patient.lastname | titlecase}}</span>\n                            </div>\n                            \n                            <div class=\"row mt-2\">\n                                <app-rating-star [currentRate]=\"review?.rating\" [readonly]=\"true\"></app-rating-star>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-8\">\n                    <p class=\"comment-content\">\n                        {{review?.content}}\n                    </p>\n                </div>\n            </div>\n            \n            \n        </div>\n    </div>\n</li>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { Review } from 'src/app/models/Review';\nimport { ReviewService } from 'src/app/services/review.service';\nimport { Doctor } from 'src/app/models/Doctor';\n\n@Component({\n  selector: 'app-doctor-reviews',\n  templateUrl: './doctor-reviews.component.html',\n  styleUrls: ['./doctor-reviews.component.css']\n})\nexport class DoctorReviewsComponent implements OnInit {\n\n  avatar:any;\n  doctor:Doctor;\n  reviews:Review[]\n  constructor(\n    private authService:AuthService,\n    private reviewService:ReviewService,\n    private doctorService:DoctorService\n  ) {\n    this.authService.getCurrentUser().subscribe(user => {\n      console.log(\"user \", JSON.stringify(user));\n      this.doctorService.getById(user.id).subscribe(doc => {\n        this.doctor = doc;\n      })\n      this.doctorService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n      this.reviewService.getReviews(user.id).subscribe(reviews => {\n        this.reviews = reviews;\n      });\n    });\n   }\n\n  ngOnInit(): void {\n    \n  }\n\n}\n","<div class=\"main-wrapper\">\n    <div class=\"breadcrumb-bar\">\n        <div class=\"container-fluid\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-md-12 col-12\">\n                    <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                        <ol class=\"breadcrumb\">\n                            <li class=\"breadcrumb-item\"><a href=\"#\">Patient</a></li>\n                            <li class=\"breadcrumb-item active\" aria-current=\"page\">Doctor Reviews</li>\n                        </ol>\n                    </nav>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"content\">\n        <div class=\"container-fluid\">\n            <div class=\"row\">\n                <!-- Profile Sidebar -->\n                <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                    <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n                </div>\n                <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <div class=\"row\">\n                                <div class=\"col-md-12\">\n                                    <!-- <div class=\"widget review-listing\">\n                                        \n                                        \n                                        </ul>\n                                    </div> -->\n                                    <ul class=\"comments-list\">\n                                        <app-doctor-review *ngFor=\"let review of reviews\" [review]=\"review\">\n                                        </app-doctor-review>\n                                        <li style=\"list-style: none\" *ngIf=\"reviews.length === 0\" class=\"appointments\">\n                                            <h6>You Have No Reviews</h6>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-doctor-side-bar',\n  templateUrl: './doctor-side-bar.component.html',\n  styleUrls: ['./doctor-side-bar.component.css']\n})\nexport class DoctorSideBarComponent implements OnInit {\n\n  @Input() avatar: any;\n  // @Input() doctor:Doctor;\n  showDefaultAvatar: boolean = false;\n  doctor: Doctor;\n  // avatar:any;\n  constructor(private authService: AuthService,\n    private doctorService: DoctorService,\n    private tokenStorageService: TokenStorageService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.doctorService.getById(user.id).subscribe(doc => {\n        this.doctor = doc;\n        console.log(\"print avatar : \", this.avatar);\n        // if (!this.avatar) {\n        //   this.showDefaultAvatar = true;\n        //   console.log(\"show default\");\n        // } else {\n        //   this.showDefaultAvatar = false;\n        // }\n      });\n      \n      // this.doctorService.getAvatar(user.id).subscribe(avatar => {\n      //   this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      // // });\n      // if (!this.avatar) {\n      //   this.showDefaultAvatar = true;\n      //   console.log(\"show default\");\n      // } else {\n      //   this.showDefaultAvatar = false;\n      // }\n\n    })\n  }\n\n  logout() {\n    this.tokenStorageService.signOut();\n    //window.location.reload();\n    this.router.navigate([\"home\"]).then(() => {\n      window.location.reload();\n    });\n  }\n\n\n}\n","<div class=\"card p-1\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <div class=\"row text-center pb-2\">\n                <div class=\"col-12\">\n                    <a *ngIf=\"avatar?.length > 100\" data-fancybox=\"gallery\" [href]=\"avatar\">\n                        <img class=\"img-fluid img-thumbnail doctor-img\" [src]=\"avatar\" alt=\"Doctor Image\">\n                    </a>\n                    <a *ngIf=\"avatar?.length < 100\" data-fancybox=\"gallery\" href=\"assets/img/default-doctor.png\">\n                        <img src=\"assets/img/default-doctor.png\" class=\"img-fluid img-thumbnail doctor-img\"\n                            alt=\"Patient Image\">\n                    </a>\n                </div>\n                <div class=\"col-12\">\n                    <h3>Dr. {{doctor?.firstname | titlecase}} {{doctor?.lastname | titlecase }}</h3>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-12\">\n            <div class=\"nav-item\"  routerLinkActive=\"active\">\n                <a routerLink=\"/doctor/appointments\">\n                    <i class=\"fa fa-bookmark p-1\"aria-hidden=\"true\"></i>\n                    <span>Appointments</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"col-12\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a routerLink=\"/doctor/reviews\">\n                    <i class=\"fa fa-reply p-1\" aria-hidden=\"true\"></i>\n                    <span>Reviews</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"col-12\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a routerLink=\"/doctor/profile-settings\">\n                    <i class=\"fa fa-user p-1\"></i>\n                    <span>Profile Settings</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"col-12\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a routerLink=\"/doctor/clinic-settings\">\n                    <i class=\"fa fa-user p-1\"></i>\n                    <span>Clinic Settings</span>\n                </a>\n            </div>\n        </div>\n\n        <!-- <div class=\"col-12\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a routerLink=\"/chat/video\">\n                    <i class=\"fa fa-user p-1\"></i>\n                    <span>Video Chat</span>\n                </a>\n            </div>\n        </div> -->\n\n        <div class=\"col-12\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a routerLink=\"/doctor/change-password\">\n                    <i class=\"fa fa-lock p-1\"></i>\n                    <span>Change Password</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"col-12\" (click)=\"logout()\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a href=\"#\">\n                    <i class=\"fa fa-sign-out\"></i>\n                    <span>Logout</span>\n                </a>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../services/auth.service'\nimport { TokenStorageService } from '../../../services/token-storage.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from 'src/app/models/User';\n\n\n@Component({\n  selector: 'app-doctor-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n  retUrl:string = \"doctor/profile\";\n\n  constructor(\n    private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    private router:Router,\n    private activatedRoute:ActivatedRoute) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n    this.activatedRoute.queryParamMap\n                .subscribe(params => {\n            this.retUrl = params.get('retUrl'); \n            console.log( 'LoginComponent/ngOnInit '+ this.retUrl);\n        });\n  }\n\n  onSubmit() {\n    this.authService.doctorLogin(this.form).subscribe(\n      (user:User) => {\n        this.tokenStorage.saveToken(user.accessToken);\n        this.tokenStorage.saveUser(user);\n        this.tokenStorage.saveUserType(user.userType);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.authService.getLoggedInUser.emit(user);\n        console.log(\"login successful\");\n        console.log(this.tokenStorage.getUser());\n        console.log( 'return to '+ this.retUrl);\n           if (this.retUrl!=null) {\n                this.router.navigate( [this.retUrl]);\n           } else {\n                this.router.navigate( ['doctor/appointments']);\n           }\n           \n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  \n}","\n<!-- doctor login -->\n\n<div class=\"container-fluid m-0 bg-white\">\n    <div class=\"row pt-5 pb-5 \">\n        <div class=\"col-md-8 offset-md-2\">\n\n            <!-- Login Tab Content -->\n            <div class=\"account-content\">\n                <div class=\"row align-items-center justify-content-center\">\n                    <div class=\"col-md-7 col-lg-6 login-left\">\n                        <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"Doccure Login\">\n                    </div>\n                    <div class=\"col-md-12 col-lg-6 login-right\">\n                        <div class=\"login-header\">\n                            <h3>Login <span>AirDoc</span></h3>\n                        </div>\n                        <form *ngIf=\"!isLoggedIn\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                            novalidate>\n                            <div class=\"form-group\">\n                                <div\n                                  class=\"alert alert-danger\"\n                                  role=\"alert\"\n                                  *ngIf=\"f.submitted && isLoginFailed\"\n                                >\n                                  Login failed: {{ errorMessage }}\n                                </div>\n                              </div>\n                            <div class=\"form-group form-focus\">\n                                <input class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\" required\n                                    #email=\"ngModel\" type=\"email\" class=\"form-control floating\">\n                                <label class=\"focus-label\">Email</label>\n                                \n                                </div>\n                                <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && email.invalid\"> Email is required!</div>\n                                <div class=\"form-group form-focus\">\n                                    <input name=\"password\" [(ngModel)]=\"form.password\" required minlength=\"6\"\n                                        #password=\"ngModel\" type=\"password\" class=\"form-control floating\">\n                                    <label class=\"focus-label\">Password</label>\n                                    \n                                </div>\n                                <div class=\"alert alert-danger\" role=\"alert\"\n                                        *ngIf=\"f.submitted && password.invalid\">\n                                        <div *ngIf=\"password.errors.required\">Password is required</div>\n                                        <div *ngIf=\"password.errors.minlength\">\n                                            Password must be at least 6 characters\n                                        </div>\n                                    </div>\n                                <div class=\"text-right\">\n                                    <a class=\"forgot-link\" routerLink=\"/doctor/forgot-password\">Forgot Password ?</a>\n                                </div>\n                                <button class=\"btn btn_primary btn-block\"\n                                    type=\"submit\">Login</button>\n                                <div class=\"text-center dont-have\">Don’t have an account? <a\n                                        routerLink=\"/doctor/signup\">Register</a></div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            <!-- /Login Tab Content -->\n\n        </div>\n    </div>\n\n</div>\n\n<!-- /Page Content -->","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { Clinic } from 'src/app/models/Clinic';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  doctor: Doctor;\n  clinic: Clinic;\n  avatar: any;\n  showDefaultAvatar: boolean = false;\n  clinicPhotos: Array<any>\n  id: string = \"\";\n  isPatient: boolean = false;\n  constructor(private route: ActivatedRoute,\n    private doctorService: DoctorService,\n    private tokenStorage: TokenStorageService) { }\n\n  ngOnInit() {\n    this.route.params\n      .subscribe(\n        (params: Params) => {\n          this.id = params['id'];\n          console.log(\"Doctor id\" + this.id);\n          //Get Doctor\n          this.doctorService.getById(this.id).subscribe(res => {\n            this.doctor = res;\n            console.log(\"rating: \", this.doctor.rating);\n          });\n          this.doctorService.getAvatar(this.id).subscribe(res => {\n            this.avatar = 'data:image/jpeg;base64,' + res?.image?.data;\n            console.log(\"print avatar : \", this.avatar);\n            if (res?.image?.data === undefined) {\n              this.showDefaultAvatar = true;\n              console.log(\"show default\");\n\n            }\n          });\n          this.doctorService.getClinic(this.id).subscribe(res => {\n            this.clinic = res;\n            console.log(\"clinic from Profile\", this.clinic);\n          });\n          this.doctorService.getClinicPhotos(this.id).subscribe(res => {\n            //Convert image to base64 and return it;\n            this.clinicPhotos = res.map(photo => 'data:image/jpeg;base64,' + photo.image.data);\n          });\n          this.isPatient = this.tokenStorage.getUserType() == \"PATIENT\";\n\n\n        }\n      );\n  }\n\n  refresh() {\n    this.doctorService.getById(this.doctor.id).subscribe(res => {\n      this.doctor = res;\n    })\n  }\n\n\n}\n","<div class=\"container\">\n\t<!-- Doctor Widget -->\n\t<div class=\"card m-2\">\n\t\t<div class=\"card-body\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-8 col-sm-12\">\n\t\t\t\t\t<div class=\"row text-md-left text-center\">\n\t\t\t\t\t\t<div class=\"col-md-4 col-sm-12\">\n\t\t\t\t\t\t\t<a routerLink=\"/doctor/profile/{{doctor?.id}}\">\n\t\t\t\t\t\t\t\t<!-- <img [src]=\"retrievedAvatar\" class=\"img-fluid\" alt=\"Doctor Image\"> -->\n\t\t\t\t\t\t\t\t<img *ngIf=\"!showDefaultAvatar\" [src]=\"avatar\" class=\"img-fluid w-100\"  alt=\"Doctor Image\">\n\t\t\t\t\t\t\t\t<img *ngIf=\"showDefaultAvatar\" src=\"assets/img/default-doctor.png\"  class=\"doc-img img-fluid w-100\" alt=\"Doctor Image\">\n\t\t\t\t\t\t   \n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-8 col-sm-12 text-md-left text-center\">\n\t\t\t\t\t\t\t<h4 class=\"doc-name\"><a routerLink=\"/doctor/profile/{{doctor?.id}}\">{{doctor?.firstname | titlecase}} {{doctor?.lastname | titlecase}}</a></h4>\n\t\t\t\t\t\t\t<p class=\"doc-speciality text-dark\">{{doctor?.speciality }}</p>\n\t\t\t\t\t\t\t<h5 class=\"text_primary\">{{doctor?.speciality}}</h5>\n\t\t\t\t\t\t\t<div class=\"rating\">\n\t\t\t\t\t\t\t\t<app-rating-star [currentRate]=\"doctor?.rating\" ></app-rating-star>\n\t\t\t\t\t\t\t\t<!-- <ngb-rating [(rate)]=\"selected\" (hover)=\"hovered=$event\" (leave)=\"hovered=0\" [readonly]=\"readonly\"></ngb-rating> -->\n\t\t\t\t\t\t\t\t<span class=\"d-inline-block h5\">({{doctor?.averageRating}})</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"clinic-details\">\n\t\t\t\t\t\t\t\t<p class=\"doc-location\"><i class=\"fa fa-map-marker\" aria-hidden=\"true\"></i>  {{clinic?.country | titlecase }} {{clinic?.city | titlecase}}</p>\n\t\t\t\t\t\t\t\t<ul class=\"d-flex flex-row\">\n\t\t\t\t\t\t\t\t\t<li class=\"m-1 clinic-photo\" *ngFor=\"let photo of clinicPhotos\">\n\t\t\t\t\t\t\t\t\t\t<!-- <a routerLink=\"/doctor/profile/{{doctor?.id}}\" data-fancybox=\"gallery\">\n\t\t\t\t\t\t\t\t\t\t<img class=\"w-100\" [src]=\"photo\" alt=\"Feature\">  \n\t\t\t\t\t\t\t\t\t\t</a> -->\n\t\t\t\t\t\t\t\t\t\t<a  data-fancybox=\"gallery\" [href]=\"photo\"><img class=\"img-fluid w-100\" [src]=\"photo\"></a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"clinic-services\">\n\t\t\t\t\t\t\t\t<span class=\"service border\" *ngFor=\" let clinicService of clinic?.services\"> {{clinicService}} </span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4 col-sm-12 text-md-left text-center\">\n\t\t\t\t\t<div class=\"clini-infos p-2\">\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li><i class=\"fa fa-comment\"></i> {{doctor?.reviews?.length}} Feedback</li>\n\t\t\t\t\t\t\t<li><i class=\"fa fa-map-marker\" aria-hidden=\"true\"></i> {{clinic?.country + \" \" + clinic?.city | titlecase}}</li>\n\t\t\t\t\t\t\t<li><i class=\"fa fa-money\" aria-hidden=\"true\"></i> {{clinic?.minPrice | currency}} - {{clinic?.maxPrice | currency}}  </li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"text-center\">\n\t\t\t\t\t\t<a class=\"app_btn\" routerLink=\"/booking/{{doctor?.id}}\">BOOK APPOINTMENT</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\n\t<!-- /Doctor Widget -->\n\n\n\t<!-- Doctor Details Tab -->\n\t<div class=\"card m-2\">\n\n\n\t\t<div class=\"card-body pt-0\">\n\n\t\t\t<!-- Tab Menu -->\n\t\t\t<ul ngbNav #nav=\"ngbNav\" class=\"nav-tabs\">\n\t\t\t\t<li [ngbNavItem]=\"1\">\n\t\t\t\t\t<a ngbNavLink>Overview</a>\n\t\t\t\t\t<ng-template ngbNavContent>\n\t\t\t\t\t\t<app-over-view [doctor]=\"doctor\" [clinic]=\"clinic\"></app-over-view>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</li>\n\t\t\t\t<li [ngbNavItem]=\"2\">\n\t\t\t\t\t<a ngbNavLink>Clinic</a>\n\t\t\t\t\t<ng-template ngbNavContent>\n\t\t\t\t\t\t<app-clinic *ngIf=\"clinic\" [clinic]=\"clinic\" [doctor]=\"doctor\"></app-clinic>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</li>\n\t\t\t\t<li [ngbNavItem]=\"3\">\n\t\t\t\t\t<a ngbNavLink>Reviews</a>\n\t\t\t\t\t<ng-template ngbNavContent>\n\t\t\t\t\t\t<app-reviews (refresh)=\"refresh()\" *ngIf=\"doctor\" [doctor]=\"doctor\" [isPatient]=\"isPatient\">\n\t\t\t\t\t\t</app-reviews>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<!-- /Tab Menu -->\n\n\n\t\t\t\n\t\t\t<!-- Tab Content -->\n\t\t\t<div [ngbNavOutlet]=\"nav\" class=\"mt-2\"></div>\n\t\t\t<!-- /Tab Content -->\n\t\t</div>\n\n\n\t</div>\n\t<!-- /Doctor Details Tab -->\n\n\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-doctor-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  form: any = {};\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private router:Router, private authService: AuthService) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    this.authService.doctorRegister(this.form).subscribe(\n      data => {\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n        this.router.navigate([\"doctor/login\"]);\n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n  }\n}\n","\n    <div class=\"container-fluid bg-white\">\n        <div class=\"rowpt-5 pb-5 m-0\">\n            <div class=\"col-md-8 offset-md-2\">\n\n                <!-- Account Content -->\n         \n                    <div class=\"row align-items-center justify-content-center\">\n                        <div class=\"col-md-7 col-lg-6 login-left\">\n                            <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"Login Banner\">\n                        </div>\n                        <div class=\"col-md-12 col-lg-6 login-right\">\n                            <div class=\"login-header\">\n                                <h3>Doctor Register <a class=\"text_primary h6\" routerLink=\"patient/signup\">Not a Doctor?</a></h3>\n                            </div>\n\n                            <!-- Register Form -->\n                            <form *ngIf=\"!isSuccessful\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                                novalidate>\n                                \n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"firstname\"\n                                        [(ngModel)]=\"form.firstname\" required minlength=\"3\" maxlength=\"20\"\n                                        #firstname=\"ngModel\">\n                                    <label class=\"focus-label\">First Name</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && firstname.invalid\">\n                                        <div *ngIf=\"firstname.errors.required\">First Name is required</div>\n                                        <div *ngIf=\"firstname.errors.minlength\">\n                                            First Name must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"firstname.errors.maxlength\">\n                                            First Name must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"lastname\"\n                                        [(ngModel)]=\"form.lastname\" required minlength=\"3\" maxlength=\"20\"\n                                        #lastname=\"ngModel\">\n                                    <label class=\"focus-label\">Last Name</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && lastname.invalid\">\n                                        <div *ngIf=\"lastname.errors.required\">Last Name is required</div>\n                                        <div *ngIf=\"lastname.errors.minlength\">\n                                            Last Name must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"username.errors.maxlength\">\n                                            Last Name must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"username\"\n                                        [(ngModel)]=\"form.username\" required minlength=\"3\" maxlength=\"20\"\n                                        #username=\"ngModel\">\n                                    <label class=\"focus-label\">Username</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && username.invalid\">\n                                        <div *ngIf=\"username.errors.required\">Username is required</div>\n                                        <div *ngIf=\"username.errors.minlength\">\n                                            Username must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"username.errors.maxlength\">\n                                            Username must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"tel\" class=\"form-control floating\" name=\"phone\"\n                                    [(ngModel)]=\"form.phone\" required minlength=\"8\" maxlength=\"20\"\n                                    #phone=\"ngModel\">\n                                    <label class=\"focus-label\">Phone Number</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && phone.invalid\">\n                                        <div *ngIf=\"phone.errors.required\">Phone Number is required</div>\n                                        <div *ngIf=\"phone.errors.minlength\">\n                                            Phone Number must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"phone.errors.maxlength\">\n                                            Phone Number must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"email\" class=\"form-control floating\" name=\"email\"\n                                        [(ngModel)]=\"form.email\" required minlength=\"10\" maxlength=\"50\"\n                                        #email=\"ngModel\">\n                                    <label class=\"focus-label\">Email</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && email.invalid\">\n                                        <div *ngIf=\"email.errors.required\">Email is required</div>\n                                        <div *ngIf=\"email.errors.minlength\">\n                                            Email must be at least 10 characters\n                                        </div>\n                                        <div *ngIf=\"email.errors.maxlength\">\n                                            Email must be at most 50 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"password\" class=\"form-control floating\" name=\"password\"\n                                    [(ngModel)]=\"form.password\" required minlength=\"8\" maxlength=\"20\"\n                                    #password=\"ngModel\">\n                                    <label class=\"focus-label\">Create Password</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && password.invalid\">\n                                        <div *ngIf=\"password.errors.required\">Password is required</div>\n                                        <div *ngIf=\"password.errors.minlength\">\n                                            Password must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"password.errors.maxlength\">\n                                            Password must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"text-right\">\n                                    <a class=\"forgot-link\" routerLink=\"/doctor/login\">Already have an account?</a>\n                                </div>\n                                <button class=\"btn btn_secondary btn-block btn-lg\" type=\"submit\">Signup</button>\n                                <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n                                    Signup failed!<br />{{ errorMessage }}\n                                </div>\n                            </form>\n                            <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\n                                Your registration is successful!\n                              </div>\n                            <!-- /Register Form -->\n\n                        </div>\n                    </div>\n         \n                <!-- /Account Content -->\n\n            </div>\n        </div>\n\n    </div>\n\n","<div class=\"container-fluid mb-3 m-2\">\n    <div class=\"row\">\n        <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n            <app-doctor-side-bar [avatar]=\"avatar\"></app-doctor-side-bar>\n        </div>\n        <div class=\"col-md-7 col-lg-8 col-xl-9\">\n            <div class=\"row\">\n                <!-- <div class=\"col-lg-12 col-md-12\">\n                    <div id=\"container\">\n                        \n                        <video id=\"locale\" #localeVideo playsinline autoplay muted></video>\n                        <video id=\"remote\" #remoteVideo playsinline autoplay></video>\n                    </div>\n                </div>\n                <div class=\"col-lg-12\">\n                    <input type=\"text\" name=\"myname\" [(ngModel)]=\"myName\">\n                </div>\n                <div class=\"col-12\">\n                    <button class=\"btn btn_secondary\"   (click)=\"startCall()\">Start Call</button>\n                    <button class=\"btn btn_secondary\"  (click)=\"acceptCall()\">Accept Call</button>\n                    <button class=\"btn btn_secondary\"   (click)=\"denyCall()\">Deny Call</button>\n                    <button class=\"btn btn_secondary\"   (click)=\"closeCall()\">End Call</button>\n                </div>\n                <p>{{callerName}}</p> -->\n                <div class=\"col-lg-12 col-md-12\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <div id=\"container\">\n                                <div *ngIf=\"isIdle()\" id=\"idle\" class=\"ringing view-size\">\n                                    <div>\n                                        <div class=\"status\">\n                                            <h4>Ready</h4>\n                                        </div>\n                                        <div class=\"buttons\">\n                                            <button class=\"btn btn_secondary\" (click)=\"startCall()\">Call</button>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div *ngIf=\"isRinging()\" class=\"ringing view-size\">\n                                    <div>\n                                        <div class=\"status\">\n                                            <h4>Ringing</h4>\n                                        </div>\n                                        <div class=\"buttons\">\n                                            <button class=\"btn btn_secondary\" (click)=\"cancelCall()\">Cancel\n                                                Call</button>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div *ngIf=\"isEnded()\" class=\"ringing view-size\">\n                                    <div>\n                                        <div class=\"status\">\n                                            <h4>Ended</h4>\n                                        </div>\n                                        <div class=\"buttons\">\n                                            <button class=\"btn btn_secondary\" (click)=\"startCall()\">Call</button>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div *ngIf=\"isDenied()\" class=\"ringing view-size\">\n                                    <div>\n                                        <div class=\"status\">\n                                            <h4>Denied</h4>\n                                        </div>\n                                        <div class=\"buttons\">\n                                            <button class=\"btn btn_secondary\" (click)=\"startCall()\">Call</button>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div *ngIf=\"isCanceled()\" class=\"ringing view-size\">\n                                    <div>\n                                        <div class=\"status\">\n                                            <h4>Cancled</h4>\n                                        </div>\n                                        <div class=\"buttons\">\n                                            <button class=\"btn btn_secondary\" (click)=\"startCall()\">Call</button>\n                                        </div>\n                                    </div>\n                                </div>\n                                <video [hidden]=\"!isOngoing()\" id=\"locale\" #localeVideo playsinline autoplay\n                                    muted></video>\n                                <div *ngIf=\"isOngoing()\" id=\"ongoing\">\n                                    <video *ngIf=\"isOngoing()\" id=\"remote\" #remoteVideo playsinline autoplay></video>\n                                    <button class=\"btn btn_secondary end-call\" (click)=\"endCall()\">End Call</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script> -->","import { Component, OnInit, ElementRef, ViewChild} from '@angular/core';\nimport {CallState} from '../../../models/CallState'\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { Patient } from 'src/app/models/Patient';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { BASE_URL, BASE_SOCKET_URL } from 'src/app/shared';\n\n\n\nconst offerOptions: RTCOfferOptions = {\n  offerToReceiveAudio: true,\n  offerToReceiveVideo: true\n};\n\n@Component({\n  selector: 'app-video-chat',\n  templateUrl: './video-chat.component.html',\n  styleUrls: ['./video-chat.component.css']\n})\nexport class VideoChatComponent implements OnInit {\n\n  @ViewChild('localeVideo') localeVideo: ElementRef;\n  @ViewChild('remoteVideo') remoteVideo: ElementRef;\n\n  \n  localstream: MediaStream;\n\n  // websocket stuff\n  websocketUrl = BASE_SOCKET_URL+ \"/socket\"; // production url\n  // websocketUrl =  'ws://localhost:8080/socket' // dev url\n  conn: WebSocket;\n  peerConnection: RTCPeerConnection;\n  dataChannel: RTCDataChannel;\n\n  // call states\n  callState: CallState = CallState.Idle;\n\n  // patient\n  patient:Patient;\n  patientId:string;\n\n  // doctor info\n  doctor:Doctor;\n  avatar: any;\n\n\n\n  constructor(\n    private route:ActivatedRoute,\n    private patientService:PatientService,\n    private doctorService:DoctorService,\n    private authService:AuthService) { }\n\n  ngOnInit(): void {\n    // this.conn = new WebSocket('ws://' + location.hostname + (location.port ? ':' + location.port : '') + '/socket')\n    // getting patient info\n    this.route.params\n      .subscribe(\n        (params: Params) => {\n          this.patientId = params['id'];\n          this.patientService.getById(this.patientId).subscribe((patient:Patient) => {\n            this.patient = patient;\n          })\n        });\n\n    this.authService.getCurrentUser().subscribe(res => {\n          this.doctorService.getById(res.id).subscribe(doc => {\n            this.doctor = doc;\n          });\n          this.doctorService.getAvatar(res.id).subscribe(avatar => {\n            this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n          })\n        });\n    console.log(\"socket url\", this.websocketUrl);\n    this.conn = new WebSocket(this.websocketUrl);\n    this.conn.onopen = (ev: Event) => this.onOpen(ev);\n    this.conn.onmessage = (msg: MessageEvent) => this.onMessage(msg);\n  }\n\n  ngAfterViewInit() {\n    console.log('vid1', this.localeVideo);\n    console.log('vid2', this.remoteVideo);\n  }\n\n  onOpen(ev) {\n    console.log(\"Connected to the signaling server\", ev);\n  };\n\n  // on Message Recieved from WebSocket Server;\n  onMessage(msg: MessageEvent) {\n    console.log(\"Got message\", msg.data);\n    var content = JSON.parse(msg.data);\n    var data = content.data;\n    switch (content.event) {\n      // when somebody wants to call us\n      case \"offer\":\n        this.handleOffer(data);\n        break;\n      case \"answer\":\n        this.handleAnswer(data);\n        break;\n      // when a remote peer sends an ice candidate to us\n      case \"candidate\":\n        this.handleCandidate(data);\n        break;\n      case \"call\":\n        this.handleCall(data);\n        break;\n      case \"accept_call\":\n        this.handleAcceptCall(data);\n        break;\n      case \"deny_call\":\n        this.handleDenyCall(data);\n        break;\n      case \"end_call\":\n        this.handleEndCall(data);\n        break;\n      default:\n        break;\n    }\n  };\n\n\n  initializePeer() {\n    let configuration: RTCConfiguration = {\n      iceServers: [\n        { urls: \"stun:23.21.150.121\" },\n        { urls: \"stun:stun.l.google.com:19302\" },\n        { urls: \"turn:numb.viagenie.ca\", \"credential\": \"webrtcdemo\", \"username\": \"louis@mozilla.com\" }\n      ]\n    }\n    this.peerConnection = new RTCPeerConnection(configuration);\n    console.log(\"peer Connection created\", this.peerConnection);\n\n    // Setup ice handling\n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        this.send({\n          event: \"candidate\",\n          data: event.candidate\n        });\n      }\n    };\n    this.peerConnection.ontrack = (ev: RTCTrackEvent) => this.gotRemoteStream(ev);\n\n  }\n\n  initializingCall(): Promise<void> {\n    // creating peer connection\n    this.initializePeer();\n    // Adding support for video\n    const constraints = {\n      video: true, audio: true\n    };\n    // requesting Media Devices \n    return navigator.mediaDevices.getUserMedia(constraints).\n      then((stream) => {\n        /* use the stream */\n        //    stream.getTracks().forEach(track => pc1.addTrack(track, localStream));\n        stream.getTracks().forEach(track => this.peerConnection.addTrack(track, stream));\n        this.gotStream(stream);\n      })\n      .catch(function (err) {\n        /* handle the error */\n        console.log(\"error adding stream \", JSON.stringify(err));\n      });\n  }\n\n  send(message) {\n    console.log(\"sending message\", JSON.stringify(message));\n    this.conn.send(JSON.stringify(message));\n  }\n\n\n  createOffer() {\n    return this.peerConnection.createOffer(offerOptions).then((offer) => {\n      this.peerConnection.setLocalDescription(offer).then(() => this.send({\n        event: \"offer\",\n        data: offer\n      }));\n    }, (error) => {\n      alert(\"Error creating an offer\");\n      console.log(error);\n    });\n  }\n\n  handleOffer(offer: RTCSessionDescriptionInit) {\n    this.peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n\n    // create and send an answer to an offer\n    this.peerConnection.createAnswer().then((answer) => {\n      this.peerConnection.setLocalDescription(answer)\n      .then(() => \n      this.send({\n        event: \"answer\",\n        data: answer\n      }));\n    }, (error) => {\n      alert(\"Error creating an answer\");\n      console.log(\"handleOffer Error\", error);\n    });\n\n  };\n\n  handleCandidate(candidate: RTCIceCandidateInit) {\n    this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n    console.log(\"handel Candidate\", JSON.stringify(candidate));\n  };\n\n  handleAnswer(answer: RTCSessionDescriptionInit) {\n    this.peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n    console.log(\"connection established successfully!!\");\n  };\n\n\n  handleCall(caller) {\n    console.log(\"call form\", caller);\n    this.callerName = caller;\n    this.callState = CallState.Ringing;\n  }\n\n  async handleAcceptCall(data) {\n    console.log(\"handle accept call\", data);\n    console.log(\"creating offer\");\n    // setTimeout(() => this.createOffer(), 400);\n    await this.createOffer();\n    console.log(\"call accepted\");\n    this.callState = CallState.Ongoing;\n  }\n\n  handleDenyCall(data) {\n    console.log(\"handle deny call\", data);\n    this.callState = CallState.Denied;\n  }\n\n  handleEndCall(data) {\n    console.log(\"handle End call\", data);\n    this.callState = CallState.Ended;\n    this.stop();\n  }\n\n  callerName: string = \"\";\n  myName: string = \"\"\n  startCall() {\n    console.log(\"starting a call\");\n\n    if(!this.doctor){\n      console.log(\"need doctor info first\");\n      return;\n    }\n\n    if(!this.patient){\n      console.log(\"need patient info first\");\n      return;\n    }\n    \n    this.initializingCall().then(() => {\n      this.send({\n        data: this.myName,\n        event: \"call\",\n        calleeId: this.patient.id,\n        callerId: this.doctor.id,\n      });\n      this.callState = CallState.Ringing;\n    });\n  }\n\n  acceptCall() {\n    console.log(\"accept call\");\n    // requesting media\n    console.log(\"requesting media\");\n    // this.start();\n    this.initializingCall().then(() => {\n      this.send({\n        data: this.callerName,\n        event: \"accept_call\"\n      });\n      this.callState = CallState.Ongoing;\n    });\n  }\n\n  denyCall() {\n    console.log(\"deny call\");\n    this.send({\n      data: this.callerName,\n      event: \"deny_call\"\n    });\n    this.callState = CallState.Denied;\n  }\n\n  endCall() {\n    this.callState = CallState.Ended;\n    this.send({\n      data: this.callerName,\n      event: \"end_call\"\n    });\n    this.stop();\n  }\n\n  cancelCall(){\n    this.stop();\n    this.callState = CallState.Canceled;\n    this.send({\n      data: this.callerName,\n      event: \"cancel_call\"\n    });\n  }\n\n  gotRemoteStream(e) {\n    console.log('gotRemoteStream', e.track, e.streams[0]);\n    try {\n      this.remoteVideo.nativeElement.srcObject = null;\n      this.remoteVideo.nativeElement.srcObject = e.streams[0];;\n    } catch (error) {\n      console.log('error setting remote stream', error);\n      this.remoteVideo.nativeElement.src = URL.createObjectURL(e.streams[0]);\n    }\n\n  }\n\n  gotStream(stream) {\n    console.log('Received local stream');\n    try {\n      this.localeVideo.nativeElement.srcObject = stream;\n    } catch (error) {\n      console.log('error setting locale stream', error);\n      this.localeVideo.nativeElement.src = URL.createObjectURL(stream);\n    }\n    this.localstream = stream;\n  }\n\n  stop() {\n    console.log('Ending Call' + '\\n\\n');\n    this.peerConnection.close();\n    this.peerConnection = null;\n    this.localstream.getTracks().forEach((track) =>{\n      console.log('stoping doctor locale stream', track);\n      track.stop();\n    });\n\n    this.localeVideo.nativeElement.srcObject = null;\n    \n  }\n\n\n  isIdle():boolean {\n    return this.callState == CallState.Idle\n  }\n  isDenied():boolean {\n    return this.callState == CallState.Denied;\n  }\n  isOngoing():boolean {\n    return this.callState == CallState.Ongoing;\n  }\n  isEnded():boolean {\n    return this.callState == CallState.Ended;\n  }\n  isRinging():boolean {\n    return this.callState == CallState.Ringing;\n  }\n\n  isCanceled():boolean {\n    return this.callState == CallState.Canceled;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(\n    private router:Router) { }\n\n  ngOnInit(): void {\n  }\n  \n  search(city:string, query:string){\n    console.log(\"city: \" + city, \"query : \" + query);\n    this.router.navigate([\"search\"], { queryParams: { \"city\": city, \"query\": query} });\n  }\n}\n","<section class=\"section-search\">\n    <div class=\"text-center\">\n        <h1>Search Doctor, Make an Appointment</h1>\n        <p>Discover the best doctors, clinic & hospital the city nearest to you.</p>\n    </div>\n    <!-- Search -->\n    <!-- <div class=\"search-box p-lg-2 m-lg-2\">\n        <form>\n            <div class=\"row p-2\">\n                <div class=\"col-lg-2 col-xs-12\">\n                    <div #query class=\"form-group search-location\">\n                        <input #city type=\"text\" class=\"form-control\" placeholder=\"Search City\">\n                        <span class=\"form-text\">Based on your City</span>\n                    </div>\n                </div>\n                <div class=\"col-lg-8 col-xs-12\">\n                    <div class=\"form-group search-info\">\n                        <input type=\"text\" class=\"form-control\"\n                            placeholder=\"Search Doctors, Clinics, Hospitals, Diseases Etc\">\n                        <span class=\"form-text\">Ex : Dental or Sugar Check up etc</span>\n                    </div>\n                </div>\n                <div class=\"col-lg-2 col-xs-12\">\n                    <button (click)=\"search(city.value, query.value)\" type=\"submit\" class=\"btn btn_primary w-100\"><i\n                            class=\"fa fa-search\"></i> <span>Search</span></button></div>\n            </div>\n        </form>\n    </div> -->\n\n    <app-search-box></app-search-box>\n    <!-- /Search -->\n\n</section>","import { Component, OnInit } from '@angular/core';\nimport { Patient } from 'src/app/models/Patient';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Password } from 'src/app/models/Password';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.css']\n})\nexport class ChangePasswordComponent implements OnInit {\n\n  isPasswordFailed = false;\n  isPasswordSuccess = false;\n  errorMessage = '';\n  successMessage = '';\n  passwordMatch:boolean = true;\n  form:any = {};\n  patient:Patient;\n  avatar:any;\n  constructor(\n    private patientService:PatientService,\n    private authService:AuthService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.patientService.getById(user.id).subscribe(patient => {\n        this.patient = patient;\n      });\n      this.patientService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      })\n    })\n  }\n\n  onSubmit(){\n    if (this.form.newPassword !== this.form.confirmPassword){\n      this.passwordMatch = false;\n      setTimeout(() =>  this.passwordMatch = true, 2000);\n      console.log(\"password does not match\");\n      return;\n    }\n    const password = new Password(this.form.oldPassword, this.form.newPassword);\n    this.patientService.updatePassword(this.patient.id, password).subscribe(message =>{\n      console.log(\"password success: \", JSON.stringify(message));\n      this.isPasswordFailed = false;\n      this.isPasswordSuccess = true;\n      this.successMessage = message.message;\n      setTimeout(() => this.successMessage = '', 2000);\n    }, err => {\n      this.isPasswordFailed = true;\n      setTimeout(() => this.isPasswordFailed = false, 2000);\n      console.log(\"password failed: \", JSON.stringify(err));\n      this.errorMessage = err.error.message;\n    });\n  }\n}","<div class=\"main-wrapper\">\n    <div class=\"breadcrumb-bar\">\n        <div class=\"container-fluid\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-md-12 col-12\">\n                    <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                        <ol class=\"breadcrumb\">\n                            <li class=\"breadcrumb-item\"><a href=\"#\">Patient</a></li>\n                            <li class=\"breadcrumb-item active\" aria-current=\"page\">Change Password</li>\n                        </ol>\n                    </nav>\n                    <h2 class=\"breadcrumb-title\">Change Password</h2>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n\n            <!-- Profile Sidebar -->\n            <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                <app-patient-side-bar [avatar]=\"avatar\"></app-patient-side-bar>\n            </div>\n\n\n            <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"row\">\n                            <div class=\"col-md-12 col-lg-6\">\n                                <form name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\" novalidate>\n                                    <input type=\"password\" class=\"form-control floating\" name=\"oldPassword\"\n                                        [(ngModel)]=\"form.oldPassword\" required minlength=\"8\" maxlength=\"20\"\n                                        #oldPassword=\"ngModel\">\n                                    <label class=\"focus-label\">Old Password</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && oldPassword.invalid\">\n                                        <div *ngIf=\"oldPassword.errors.required\">Password is required</div>\n                                        <div *ngIf=\"oldPassword.errors.minlength\">\n                                            Password must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"oldPassword.errors.maxlength\">\n                                            Password must be at most 20 characters\n                                        </div>\n                                    </div>\n                                    <input type=\"password\" class=\"form-control floating\" name=\"newPassword\"\n                                        [(ngModel)]=\"form.newPassword\" required minlength=\"8\" maxlength=\"20\"\n                                        #newPassword=\"ngModel\">\n                                    <label class=\"focus-label\">New Password</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && newPassword.invalid\">\n                                        <div *ngIf=\"newPassword.errors.required\">Password is required</div>\n                                        <div *ngIf=\"newPassword.errors.minlength\">\n                                            Password must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"newPassword.errors.maxlength\">\n                                            Password must be at most 20 characters\n                                        </div>\n                                    </div>\n                                    <input type=\"password\" class=\"form-control floating\" name=\"confirmPassword\"\n                                        [(ngModel)]=\"form.confirmPassword\" required minlength=\"8\" maxlength=\"20\"\n                                        #confirmPassword=\"ngModel\">\n                                    <label class=\"focus-label\">Confirm New Password</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && confirmPassword.invalid\">\n                                        <div *ngIf=\"confirmPassword.errors.required\">Password is required</div>\n                                        <div *ngIf=\"confirmPassword.errors.minlength\">\n                                            Password must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"confirmPassword.errors.maxlength\">\n                                            Password must be at most 20 characters\n                                        </div>\n\n                                    </div>\n                                    <div class=\"alert alert-danger\" *ngIf=\"!passwordMatch\">\n                                        new Password and Confirm Password must match\n                                    </div>\n                                    <div class=\"alert alert-danger\" *ngIf=\"f.submitted && isPasswordFailed\">\n                                        Password failed!<br />{{ errorMessage }}\n                                    </div>\n                                    <div class=\"alert alert-success\" *ngIf=\"f.submitted && successMessage \">\n                                        <br />\n                                        <b>Success</b>{{ successMessage }}\n                                    </div>\n                                    <div class=\"submit-section\">\n                                        <button type=\"submit\" class=\"btn btn_primary\">Submit</button>\n                                    </div>\n                                </form>\n                                <!-- /Change Password Form -->\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../../services/auth.service'\nimport { TokenStorageService } from '../../../services/token-storage.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from 'src/app/models/User';\n\n\n@Component({\n  selector: 'app-patient-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {};\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  roles: string[] = [];\n  retUrl:string = \"patient/profile\";\n\n  constructor(\n    private authService: AuthService,\n    private tokenStorage: TokenStorageService,\n    private router:Router,\n    private activatedRoute:ActivatedRoute) { }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.roles = this.tokenStorage.getUser().roles;\n    }\n    this.activatedRoute.queryParamMap\n                .subscribe(params => {\n            this.retUrl = params.get('retUrl'); \n            console.log( 'LoginComponent/ngOnInit '+ this.retUrl);\n        });\n  }\n\n  onSubmit() {\n    this.authService.patientLogin(this.form).subscribe(\n      (user:User) => {\n        this.tokenStorage.saveToken(user.accessToken);\n        this.tokenStorage.saveUser(user);\n        this.tokenStorage.saveUserType(user.userType);\n\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.roles = this.tokenStorage.getUser().roles;\n        this.authService.getLoggedInUser.emit(user);\n        console.log(\"login successful\");\n        console.log(this.tokenStorage.getUser());\n        console.log( 'return to '+ this.retUrl);\n           if (this.retUrl!=null) {\n                this.router.navigate( [this.retUrl]);\n           } else {\n                this.router.navigate( ['patient/appointments']);\n           }\n           \n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  \n}","<div class=\"container-fluid m-0 bg-white\">\n    <div class=\"row pt-5 pb-5 \">\n        <div class=\"col-md-8 offset-md-2\">\n\n            <!-- Login Tab Content -->\n            <div class=\"account-content\">\n                <div class=\"row align-items-center justify-content-center\">\n                    <div class=\"col-md-7 col-lg-6 d-none d-md-block\">\n                        <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"Login\">\n                    </div>\n                    <div class=\"col-md-12 col-lg-6\">\n                        <div>\n                            <h3 class=\"d-inline\">Login</h3>\n                            <div class=\"text-right\"><a class=\"text_primary\" routerLink=\"/doctor/login\">Not a Patient?</a></div>\n                        </div>\n                        <form *ngIf=\"!isLoggedIn\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                            novalidate>\n                            <div class=\"form-group\">\n                                <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && isLoginFailed\">\n                                    Login failed: {{ errorMessage }}\n                                </div>\n                            </div>\n                            <div class=\"form-group form-focus\">\n                                <input class=\"form-control\" name=\"email\" [(ngModel)]=\"form.email\" required\n                                    #email=\"ngModel\" type=\"email\" class=\"form-control floating\">\n                                <label class=\"focus-label\">Email</label>\n\n                            </div>\n                            <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && email.invalid\"> Email is\n                                required!</div>\n                            <div class=\"form-group form-focus\">\n                                <input name=\"password\" [(ngModel)]=\"form.password\" required minlength=\"6\"\n                                    #password=\"ngModel\" type=\"password\" class=\"form-control floating\">\n                                <label class=\"focus-label\">Password</label>\n\n                            </div>\n                            <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f.submitted && password.invalid\">\n                                <div *ngIf=\"password.errors.required\">Password is required</div>\n                                <div *ngIf=\"password.errors.minlength\">\n                                    Password must be at least 6 characters\n                                </div>\n                            </div>\n                            <div class=\"text-right\">\n                                <a class=\"forgot-link text_primary\" routerLink=\"/patient/forgot-password\">Forgot Password ?</a>\n                            </div>\n                            <button class=\"btn btn-block btn-lg btn_secondary text-white\" type=\"submit\">Login</button>\n                            <div class=\"text-center text-dark\">Don’t have an account?\n                                 <a class=\"text_primary\" routerLink=\"/patient/signup\">Register</a></div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            <!-- /Login Tab Content -->\n\n        </div>\n    </div>\n\n</div>\n\n<!-- /Page Content -->","import { Component, OnInit, Input } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { DoctorService } from 'src/app/services/doctor.service';\n\n@Component({\n  selector: 'app-patient-appointment',\n  templateUrl: './patient-appointment.component.html',\n  styleUrls: ['./patient-appointment.component.css']\n})\nexport class PatientAppointmentComponent implements OnInit {\n\n  @Input() appointment:Appointment;\n  doctor:Doctor;\n  doctorAvatar:any;\n  appointmentDate:Date;\n  bookingDate:Date;\n  \n  config = {\n    leftTime: 0,\n    size: 'large',\n    demand: false\n  };\n\n  constructor(private doctorSerivce:DoctorService) { }\n\n  ngOnInit(): void {\n    this.config.leftTime = Math.floor( new Date(this.appointment.appointmentDate).getTime() - (new Date().getTime())/1000);\n    console.log(\"left time\" ,this.config.leftTime);\n    this.appointmentDate = new Date(this.appointment.appointmentDate);\n    this.bookingDate = new Date(this.appointment.bookingDate);\n    this.doctorSerivce.getById(this.appointment.doctorId).subscribe(doc => {\n      this.doctor = doc;\n      console.log(\"debug appointment doctor: \", JSON.stringify(this.doctor));\n    });\n    this.doctorSerivce.getAvatar(this.appointment.doctorId).subscribe(avatar => {\n      this.doctorAvatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n    })\n  }\n\n  onFinished(){\n    console.log(\"timer finished\");\n  }\n\n}\n","<li class=\"list-group-item \">\n    <a routerLink=\"/patient/chat/video/{{appointment.id}}\" class=\"text-dark\">\n    <div class=\"row\">\n        <div class=\"col-sm\">\n            <a routerLink=\"/doctor/profile/{{appointment.doctorId}}\">\n                <div class=\"avatar\">\n                    <!-- <img class=\"avatar-img rounded-circle\" alt=\"Doctor Image\" [src]=\"doctorAvatar\"> -->\n                    <img *ngIf=\"doctorAvatar.length > 100\" [src]=\"doctorAvatar\" alt=\"Doctor Image\">\n                    <img *ngIf=\"doctorAvatar.length < 100\" src=\"assets/img/default-doctor.png\"\n                        class=\"avatar-img rounded-circle\" alt=\"Doctor Image\">\n                </div>\n                <h6>Dr {{doctor.firstname | titlecase }} {{doctor.lastname | titlecase}}</h6>\n            </a>\n        </div>\n\n        <div class=\"col-sm\">{{appointment.description | slice:0:30}}</div>\n        <div class=\"col-sm\">{{appointmentDate | date:'medium'}}</div>\n        <div class=\"col-sm\">{{bookingDate | date:'medium'}}</div>\n        <div *ngIf=\"appointment.state == 'ACCEPTED'\" class=\"col-sm\"><span\n                class=\"badge badge-pill bg-success\">{{appointment.state | titlecase}}</span></div>\n        <div *ngIf=\"appointment.state == 'CANCELED'\" class=\"col-sm\"><span\n                class=\"badge badge-pill bg-danger\">{{appointment.state | titlecase}}</span></div>\n        <div *ngIf=\"appointment.state == 'PENDING'\" class=\"col-sm\"><span\n                class=\"badge badge-pill badge-warning\">{{appointment.state | titlecase}}</span></div>\n        <div class=\"col-sm\">\n            <countdown [config]=\"config\" (finished)=\"onFinished()\">$!h!:$!m!:$!s!</countdown>\n        </div>\n    </div>\n    </a>\n</li>","import { Component, OnInit } from '@angular/core';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { AppointmentService } from 'src/app/services/appointment.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Patient } from 'src/app/models/Patient';\nimport { PatientService } from 'src/app/services/patient.service';\n\n@Component({\n  selector: 'app-patient-appointments',\n  templateUrl: './patient-appointments.component.html',\n  styleUrls: ['./patient-appointments.component.css']\n})\nexport class PatientAppointmentsComponent implements OnInit {\n\n  avatar:any;\n  appointments:Appointment[] =[];\n  patient:Patient;\n  constructor(\n    private appointmentService:AppointmentService,\n    private authService:AuthService,\n    private patientService:PatientService) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.patientService.getById(user.id).subscribe(patient =>{\n        this.patient = patient;\n      });\n      this.patientService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n      this.appointmentService.getAllPatientAppoitments(user.id).subscribe(apps =>{\n        this.appointments = apps;\n        console.log(\"appointments: \", JSON.stringify(apps));\n      });\n    })\n  }\n\n}\n","<!-- Breadcrumb -->\n<div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center\">\n            <div class=\"col-md-12 col-12\">\n                <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Home</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Appointments</li>\n                    </ol>\n                </nav>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- /Breadcrumb -->\n\n<!-- Page Content -->\n    <div class=\"container-fluid mb-2\">\n\n        <div class=\"row\">\n            <!-- Profile-SideBar -->\n            <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n                <app-patient-side-bar [avatar]=\"avatar\"></app-patient-side-bar>\n            </div>\n\n            <!-- Profile-SideBar -->\n            <div class=\"col-md-7 col-lg-8 col-xl-9\">\n                <ul class=\"list-group\">\n                    <li class=\"list-group-item\">\n                        <div class=\"row\">\n                            <div class=\"col-sm\">\n                                Doctor\n                            </div>\n                            <div class=\"col-sm\">\n                                Description\n                            </div>\n                            <div class=\"col-sm\">\n                                Appointment Date\n                            </div>\n                            <div class=\"col-sm\">\n                                Booking Date\n                            </div>\n                            <div class=\"col-sm\">\n                                State\n                            </div>\n                            <div class=\"col-sm\">\n                                Time Left\n                            </div>\n                            \n                            \n                        </div>\n                    </li>\n                    <app-patient-appointment *ngFor=\"let appointment of appointments\" [appointment]=\"appointment\">\n                    </app-patient-appointment>\n                    <li *ngIf=\"appointments?.length === 0\" class=\"list-group-item\">\n                        <h6>You Have No appointments</h6>\n                    </li>\n                </ul>\n            </div>\n        </div>\n\n    </div>\n\n<!-- /Page Content -->","import { Component, OnInit, Input } from '@angular/core';\nimport { Patient } from 'src/app/models/Patient';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { TokenStorageService } from 'src/app/services/token-storage.service';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-patient-side-bar',\n  templateUrl: './patient-side-bar.component.html',\n  styleUrls: ['./patient-side-bar.component.css']\n})\nexport class PatientSideBarComponent implements OnInit {\n\n  @Input() avatar:any;\n  patient:Patient;\n  constructor(\n    private authService:AuthService,\n    private patientService:PatientService,\n    private tokenStorageService: TokenStorageService,\n    private router:Router) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.patientService.getById(user.id).subscribe(patient => {\n        this.patient = patient;\n      });\n    })\n    \n  }\n\n\n  logout() {\n    this.tokenStorageService.signOut();\n    //window.location.reload();\n    this.router.navigate([\"home\"]).then(() => {\n      window.location.reload();\n    });\n  }\n\n}\n","<!-- Profile Sidebar -->\n<div class=\"card p-1\">\n    <div class=\"row\">\n        <div class=\"col-12\">\n            <div class=\"row text-center pb-2\">\n                <div class=\"col-12\">\n                    <a *ngIf=\"avatar?.length > 100\" data-fancybox=\"gallery\" [href]=\"avatar\">\n                        <img class=\"img-fluid img-thumbnail patient-img\" [src]=\"avatar\" alt=\"Patient Image\">\n                    </a>\n                    <a *ngIf=\"avatar?.length < 100\" data-fancybox=\"gallery\" href=\"assets/img/default-patient.jpeg\">\n                        <img src=\"assets/img/default-patient.jpeg\" class=\"img-fluid img-thumbnail patient-img\"\n                            alt=\"Patient Image\">\n                    </a>\n                </div>\n                <div class=\"col-12\">\n\n                    <h3>{{patient?.firstname | titlecase }} {{patient?.lastname | titlecase }}</h3>\n                    <div class=\"patient-details\">\n                        <h5 *ngIf=\"patient?.birthday\"><i class=\"fa fa-birthday-cake\"></i> {{patient.birthday | date }}\n                        </h5>\n                        <h5 *ngIf=\"patient?.country && patient?.city\" class=\"mb-0\"><i class=\"fas fa-map-marker-alt\"></i>\n                            {{patient.country | titlecase }}, {{patient.city | titlecase }}\n                        </h5>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-12\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a routerLink=\"/patient/appointments\">\n                    <i class=\"fa fa-bookmark p-1\"></i>\n                    <span>Appointments</span>\n                </a>\n            </div>\n\n        </div>\n        <div class=\"col-12\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a routerLink=\"/patient/profile\">\n                    <i class=\"fa fa-user p-1\"></i>\n                    <span>Profile Settings</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"col-12\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a routerLink=\"/patient/change-password\">\n                    <i class=\"fa fa-lock p-1\"></i>\n                    <span>Change Password</span>\n                </a>\n            </div>\n        </div>\n        <div class=\"col-12\" (click)=\"logout()\">\n            <div class=\"nav-item\" routerLinkActive=\"active\">\n                <a href=\"#\">\n                    <i class=\"fa fa-sign-out\"></i>\n                    <span>Logout</span>\n                </a>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- / Profile Sidebar -->","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { Patient } from 'src/app/models/Patient';\nimport { HttpResponse, HttpEventType } from '@angular/common/http';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  patient:Patient;\n  avatar:any;\n  birthday:string;\n  currentSelectedAvatar:any;\n  uploadProgress:number;\n  uploadErrorMessage:string;\n  constructor(\n    private authService:AuthService,\n    private patientService:PatientService\n  ) { }\n\n  ngOnInit(): void {\n    this.authService.getCurrentUser().subscribe(user => {\n      this.patientService.getById(user.id).subscribe(patient => {\n        this.patient = patient;\n        // const isoBirthday = new Date(patient.birthday);\n        // this.birthday = isoBirthday.toISOString().substr(0, 10);;\n        console.log(\"birthday : \", this.patient.birthday); \n      });\n      this.patientService.getAvatar(user.id).subscribe(avatar => {\n        this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n      });\n    })\n  }\n\n\n  onSubmit(){\n    console.log(\"patient new name: \", JSON.stringify(this.patient));\n    // const birthday = new Date(this.birthday)\n    // this.patient.birthday = birthday.toISOString();\n    this.patientService.updatePatient(this.patient).subscribe(patient => {\n       this.patient = patient;\n       window.location.reload();\n    });\n  }\n\n\n  uploadAvatar(event){\n    console.log(\"upload started\");\n    this.currentSelectedAvatar = event.target.files.item(0);\n    this.patientService.uploadAvatar(this.patient.id,this.currentSelectedAvatar ).subscribe(\n      event => {\n        if (event.type === HttpEventType.UploadProgress) {\n          this.uploadProgress = Math.round(100 * event.loaded / event.total);\n        } else if (event instanceof HttpResponse) {\n          this.patientService.getAvatar(this.patient.id).subscribe(avatar => {\n            this.avatar = 'data:image/jpeg;base64,' + avatar.image.data\n            this.uploadProgress = 0;\n            this.currentSelectedAvatar = undefined;\n          });\n        }\n      },\n      err => {\n        this.uploadProgress = 0;\n        this.uploadErrorMessage = 'Could not upload the Photo!';\n        this.currentSelectedAvatar = undefined;\n      });\n  }\n}\n","<div class=\"breadcrumb-bar\">\n  <div class=\"container-fluid\">\n    <div class=\"row align-items-center\">\n      <div class=\"col-md-12 col-12\">\n        <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n          <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item\"><a href=\"#\">Patient</a></li>\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">Profile Settings</li>\n          </ol>\n        </nav>\n        <h2 class=\"breadcrumb-title\">Profile Settings</h2>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"container-fluid\">\n  <div class=\"row mb-3\">\n    <div class=\"col-md-5 col-lg-4 col-xl-3\">\n      <app-patient-side-bar [avatar]=\"avatar\"></app-patient-side-bar>\n    </div>\n    <div class=\"col-md-7 col-lg-8 col-xl-9 \">\n      <div class=\"card p-1 m-1\">\n        <div *ngIf=\"!!patient\">\n\n          <!-- Profile Settings Form -->\n          <form (ngSubmit)=\"onSubmit()\">\n            <div class=\"row \">\n              <div class=\"col-12 col-md-12 \">\n                <div class=\"form-group\">\n                  <div class=\"row\">\n                    <div class=\"col-2\">\n                      <!-- <img [src]=\"avatar\" alt=\"Patient Image\"> -->\n                      <img class=\"img-fluid patient-img\" *ngIf=\"avatar.length > 100\" [src]=\"avatar\" alt=\"Patient Image\">\n                      <img class=\"img-fluid patient-img\" *ngIf=\"avatar.length < 100\"\n                        src=\"assets/img/default-patient.jpeg\" alt=\"Patient Image\">\n                    </div>\n                    <div class=\"col-10\">\n                      <div class=\"row\">\n                        <div class=\"col-12\">\n                          <div class=\"text-center\">\n                            <div class=\"change-photo-btn btn_primary\">\n                              <label for=\"file\"><i class=\"fa fa-upload\"></i> Upload Photo</label>\n                              <input id=\"file\" type=\"file\" class=\"upload\" (change)=\"uploadAvatar($event)\">\n                            </div>\n                            <small class=\"form-text text-muted\">Allowed JPG, GIF or PNG. Max size of\n                              2MB</small>\n                          </div>\n                          \n                        </div>\n                        <div class=\"col-12\">  <div *ngIf=\"currentSelectedAvatar\">\n                          <div class=\"progress-bar progress-bar-info progress-bar-striped\" role=\"progressbar\"\n                            attr.aria-valuenow=\"{{ uploadProgress }}\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                            [ngStyle]=\"{ width: uploadProgress + '%' }\">\n                            {{ uploadProgress }}%\n                          </div>\n                        </div></div>\n                      </div>\n                    \n                      \n                      \n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"col-12 col-md-6\">\n                <div class=\"form-group\">\n                  <label>First Name</label>\n                  <input [value]=\"patient.firstname\" [(ngModel)]=\"patient.firstname\" name=\"firstname\" type=\"text\"\n                    class=\"form-control\">\n                </div>\n              </div>\n              <div class=\"col-12 col-md-6\">\n                <div class=\"form-group\">\n                  <label>Last Name</label>\n                  <input [value]=\"patient.lastname\" [(ngModel)]=\"patient.lastname\" name=\"lastname\" type=\"text\"\n                    class=\"form-control\">\n                </div>\n              </div>\n              <div class=\"col-12 col-md-6\">\n                <div class=\"form-group\">\n                  <label>Date of Birth</label>\n                  <input [(ngModel)]=\"patient.birthday\" name=\"birthday\" type=\"date\" class=\"form-control \">\n                </div>\n              </div>\n              <div class=\"col-12 col-md-6\">\n                <div class=\"form-group\">\n                  <label>Blood Group</label>\n                  <select [value]=\"patient?.bloodGroup\" [(ngModel)]=\"patient.bloodGroup\" name=\"bloodGroup\"\n                    class=\"form-control select\">\n                    <option>A-</option>\n                    <option>A+</option>\n                    <option>B-</option>\n                    <option>B+</option>\n                    <option>AB-</option>\n                    <option>AB+</option>\n                    <option>O-</option>\n                    <option>O+</option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"col-12 col-md-6\">\n                <div class=\"form-group\">\n                  <label>Email ID</label>\n                  <input [value]=\"patient.email\" [(ngModel)]=\"patient.email\" name=\"email\" type=\"email\"\n                    class=\"form-control\" readonly>\n                </div>\n              </div>\n              <div class=\"col-12 col-md-6\">\n                <div class=\"form-group\">\n                  <label>Mobile</label>\n                  <input [value]=\"patient.phone\" [(ngModel)]=\"patient.phone\" name=\"phone\" type=\"text\"\n                    class=\"form-control\">\n                </div>\n              </div>\n              <div class=\"col-12\">\n                <div class=\"form-group\">\n                  <label>Address</label>\n                  <input [value]=\"patient.address\" [(ngModel)]=\"patient.address\" name=\"address\" type=\"text\"\n                    class=\"form-control\">\n                </div>\n              </div>\n              <div class=\"col-12 col-md-6\">\n                <div class=\"form-group\">\n                  <label>City</label>\n                  <input [value]=\"patient.city\" [(ngModel)]=\"patient.city\" name=\"city\" type=\"text\" class=\"form-control\">\n                </div>\n              </div>\n              <div class=\"col-12 col-md-6\">\n                <div class=\"form-group\">\n                  <label>Zip Code</label>\n                  <input [value]=\"patient.zipCode\" [(ngModel)]=\"patient.zipCode\" name=\"zipCode\" type=\"text\"\n                    class=\"form-control\">\n                </div>\n              </div>\n              <div class=\"col-12 col-md-6\">\n                <div class=\"form-group\">\n                  <label>Country</label>\n                  <input [value]=\"patient.country\" [(ngModel)]=\"patient.country\" name=\"country\" type=\"text\"\n                    class=\"form-control\">\n                </div>\n              </div>\n            </div>\n            <div class=\"submit-section\">\n              <button type=\"submit\" class=\"btn btn_primary\">Save</button>\n            </div>\n          </form>\n          <!-- /Profile Settings Form -->\n\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!-- /Page Content -->","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-patient-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  form: any = {};\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private router:Router, private authService: AuthService) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit() {\n    this.authService.patientRegister(this.form).subscribe(\n      data => {\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n        this.router.navigate([\"patient/login\"]);\n        \n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n  }\n}\n","    <div class=\"container-fluid m-0 bg-white\">\n        <div class=\"row pt-5 pb-5 m-0\">\n            <div class=\"col-md-8 offset-md-2\">\n\n                <!-- Account Content -->\n                    <div class=\"row align-items-center justify-content-center\">\n                        <div class=\"col-md-7 col-lg-6 d-none d-md-block\">\n                            <img src=\"assets/img/login-banner.png\" class=\"img-fluid\" alt=\"Login Banner\">\n                        </div>\n                        <div class=\"col-md-12 col-lg-6 login-right\">\n                            <div class=\"login-header\">\n                                <h3>Patient Register <a class=\"text_primary h6\" routerLink=\"/doctor/signup\">Not a Patient?</a></h3>\n                            </div>\n\n                            <!-- Register Form -->\n                            <form *ngIf=\"!isSuccessful\" name=\"form\" (ngSubmit)=\"f.form.valid && onSubmit()\" #f=\"ngForm\"\n                                novalidate>\n                                \n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"firstname\"\n                                        [(ngModel)]=\"form.firstname\" required minlength=\"3\" maxlength=\"20\"\n                                        #firstname=\"ngModel\">\n                                    <label class=\"focus-label\">First Name</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && firstname.invalid\">\n                                        <div *ngIf=\"firstname.errors.required\">First Name is required</div>\n                                        <div *ngIf=\"firstname.errors.minlength\">\n                                            First Name must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"firstname.errors.maxlength\">\n                                            First Name must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"lastname\"\n                                        [(ngModel)]=\"form.lastname\" required minlength=\"3\" maxlength=\"20\"\n                                        #lastname=\"ngModel\">\n                                    <label class=\"focus-label\">Last Name</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && lastname.invalid\">\n                                        <div *ngIf=\"lastname.errors.required\">Last Name is required</div>\n                                        <div *ngIf=\"lastname.errors.minlength\">\n                                            Last Name must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"username.errors.maxlength\">\n                                            Last Name must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"text\" class=\"form-control floating\" name=\"username\"\n                                        [(ngModel)]=\"form.username\" required minlength=\"3\" maxlength=\"20\"\n                                        #username=\"ngModel\">\n                                    <label class=\"focus-label\">Username</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && username.invalid\">\n                                        <div *ngIf=\"username.errors.required\">Username is required</div>\n                                        <div *ngIf=\"username.errors.minlength\">\n                                            Username must be at least 3 characters\n                                        </div>\n                                        <div *ngIf=\"username.errors.maxlength\">\n                                            Username must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"tel\" class=\"form-control floating\" name=\"phone\"\n                                    [(ngModel)]=\"form.phone\" required minlength=\"8\" maxlength=\"20\"\n                                    #phone=\"ngModel\">\n                                    <label class=\"focus-label\">Phone Number</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && phone.invalid\">\n                                        <div *ngIf=\"phone.errors.required\">Phone Number is required</div>\n                                        <div *ngIf=\"phone.errors.minlength\">\n                                            Phone Number must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"phone.errors.maxlength\">\n                                            Phone Number must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"email\" class=\"form-control floating\" name=\"email\"\n                                        [(ngModel)]=\"form.email\" required minlength=\"10\" maxlength=\"50\"\n                                        #email=\"ngModel\">\n                                    <label class=\"focus-label\">Email</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && email.invalid\">\n                                        <div *ngIf=\"email.errors.required\">Email is required</div>\n                                        <div *ngIf=\"email.errors.minlength\">\n                                            Email must be at least 10 characters\n                                        </div>\n                                        <div *ngIf=\"email.errors.maxlength\">\n                                            Email must be at most 50 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"form-group form-focus\">\n                                    <input type=\"password\" class=\"form-control floating\" name=\"password\"\n                                    [(ngModel)]=\"form.password\" required minlength=\"8\" maxlength=\"20\"\n                                    #password=\"ngModel\">\n                                    <label class=\"focus-label\">Create Password</label>\n                                    <div class=\"alert-danger\" *ngIf=\"f.submitted && password.invalid\">\n                                        <div *ngIf=\"password.errors.required\">Password is required</div>\n                                        <div *ngIf=\"password.errors.minlength\">\n                                            Password must be at least 8 characters\n                                        </div>\n                                        <div *ngIf=\"phone.errors.maxlength\">\n                                            Password must be at most 20 characters\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"text-right\">\n                                    <a class=\"forgot-link text_primary\" routerLink=\"patient/login\">Already have an account?</a>\n                                </div>\n                                <button class=\"btn btn_secondary btn-block btn-lg \" type=\"submit\">Signup</button>\n                                <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n                                    Signup failed!<br />{{ errorMessage }}\n                                </div>\n                            </form>\n                            <div class=\"alert alert-success \" *ngIf=\"isSuccessful\">\n                                Your registration is successful!\n                              </div>\n                            <!-- /Register Form -->\n\n                        </div>\n                    </div>\n                <!-- /Account Content -->\n\n            </div>\n        </div>\n\n    </div>","<!-- Breadcrumb -->\n<div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center\">\n            <div class=\"col-md-12 col-12\">\n                <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a routerLink=\"/\">Home</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Video Chat</li>\n                    </ol>\n                </nav>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- /Breadcrumb -->\n\n<!-- Page Content -->\n<div class=\"container-fluid m-3\">\n    <div class=\"row\">\n        <!-- Profile-SideBar -->\n        <div class=\"col-md-5 col-lg-4 col-xl-3 theiaStickySidebar\">\n            <app-patient-side-bar [avatar]=\"avatar\" ></app-patient-side-bar>\n        </div>\n        <!-- Profile-SideBar -->\n        <div class=\"col-md-7 col-lg-8 col-xl-9\">\n            <div class=\"row\">\n                <div class=\"col-lg-12 col-md-12\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <div id=\"container\">\n                                <div *ngIf=\"isIdle()\" id=\"idle\"\n                                    class=\"d-flex justify-content-center align-items-center view-size\">\n                                    <div class=\"status\">\n                                        <div>\n                                            <h4>Waiting</h4>\n                                            <!-- <countdown #cd></countdown> -->\n                                            <!-- <countdown #cd [config]=\"config\" (finished)=\"onFinished()\">$!h!:$!m!:$!s!</countdown> -->\n                                        </div>\n                                    </div>\n                                </div>\n                                <div *ngIf=\"isRinging()\" id=\"ringing\" class=\"view-size\">\n                                    <div>\n                                        <div class=\"status\">\n                                            <h4>Ringing</h4>\n                                        </div>\n                                        <div class=\"buttons\">\n                                            <button class=\"btn btn_secondary\" (click)=\"acceptCall()\">Accept Call</button>\n                                            <button class=\"btn btn_secondary\" (click)=\"denyCall()\">Deny Call</button>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div *ngIf=\"isEnded()\" id=\"ended\"\n                                    class=\"d-flex justify-content-center align-items-center view-size\">\n                                    <div class=\"status\">\n                                        <h4>Ended</h4>\n                                    </div>\n                                </div>\n                                <div *ngIf=\"isDenied()\" id=\"ended\"\n                                    class=\"d-flex justify-content-center align-items-center view-size\">\n                                    <div class=\"status\">\n                                        <h4>Denied</h4>\n                                    </div>\n                                </div>\n                                <div *ngIf=\"isCanceled()\" id=\"ended\"\n                                    class=\"d-flex justify-content-center align-items-center view-size\">\n                                    <div class=\"status\">\n                                        <h4>Canceled</h4>\n                                    </div>\n                                </div>\n                                <video [hidden]=\"!isOngoing()\" id=\"locale\" #localeVideo playsinline autoplay\n                                    muted></video>\n                                <div *ngIf=\"isOngoing()\" id=\"ongoing\">\n                                    <video *ngIf=\"isOngoing()\" id=\"remote\" #remoteVideo playsinline autoplay></video>\n                                        <button class=\"btn btn_secondary end-call\" (click)=\"endCall()\">End Call</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- /Page Content -->","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { CallState } from 'src/app/models/CallState';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { AppointmentService } from 'src/app/services/appointment.service';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { Appointment } from 'src/app/models/Appointment';\nimport { Patient } from 'src/app/models/Patient';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { PatientService } from 'src/app/services/patient.service';\nimport { CountdownComponent } from 'ngx-countdown';\nimport { BASE_SOCKET_URL } from 'src/app/shared';\n\nconst offerOptions: RTCOfferOptions = {\n  offerToReceiveAudio: true,\n  offerToReceiveVideo: true\n};\n\n@Component({\n  selector: 'app-video-chat',\n  templateUrl: './video-chat.component.html',\n  styleUrls: ['./video-chat.component.css']\n})\nexport class VideoChatComponent implements OnInit {\n\n  @ViewChild('localeVideo') localeVideo: ElementRef;\n  @ViewChild('remoteVideo') remoteVideo: ElementRef;\n\n  @ViewChild('cd') cd:CountdownComponent;\n\n\n  localstream: MediaStream;\n\n  // websocket stuff\n  websocketUrl = BASE_SOCKET_URL + \"/socket\"; // production url\n  // websocketUrl = 'ws://localhost:8080/socket' // dev url\n  conn: WebSocket;\n  peerConnection: RTCPeerConnection;\n  dataChannel: RTCDataChannel;\n\n  // call states\n  callState: CallState = CallState.Idle;\n  // callState: CallState = CallState.Ringing;\n\n\n  callerName:string = \"\";\n\n  appointment:Appointment;\n\n  patient:Patient;\n  avatar:any;\n\n  doctor:Doctor;\n  doctorAvatar:any;\n\n  config = {\n    leftTime: 0,\n    size: 'large',\n    demand: true\n  };\n\n  constructor(\n    private route:ActivatedRoute,\n    private appointmentService:AppointmentService,\n    private doctorService:DoctorService,\n    private patientService:PatientService\n  ) { }\n\n  ngOnInit(): void {\n\n    // getting patient info\n    this.route.params\n      .subscribe(\n        (params: Params) => {\n          const appointmentId = params['id'];\n          this.appointmentService.getById(appointmentId).subscribe((appointment:Appointment) => {\n            this.appointment = appointment;\n            // get coundown time \n            this.config.leftTime = Math.floor( new Date(this.appointment.appointmentDate).getTime() - (new Date().getTime())/1000);\n            console.log(\"left time\", this.config.leftTime);\n            this.patientService.getById(appointment.doctorId).subscribe(patient => {\n              this.patient = patient;\n            });\n            this.patientService.getAvatar(appointment.doctorId).subscribe(avatar => {\n              this.avatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n            });\n            this.doctorService.getById(appointment.doctorId).subscribe(doc => {\n              this.doctor = doc;\n            });\n            this.doctorService.getAvatar(appointment.doctorId).subscribe(avatar => {\n              this.doctorAvatar = 'data:image/jpeg;base64,' + avatar?.image?.data;\n            });\n          })\n        });\n    this.conn = new WebSocket(this.websocketUrl);\n    this.conn.onopen = (ev: Event) => this.onOpen(ev);\n    this.conn.onmessage = (msg: MessageEvent) => this.onMessage(msg);\n  }\n\n  ngAfterViewInit() {\n    console.log('vid1', this.localeVideo);\n    console.log('vid2', this.remoteVideo);\n    this.config.leftTime = Math.floor( new Date(this.appointment.appointmentDate).getTime() - (new Date().getTime())/1000);\n    this.cd.begin();\n   \n  }\n\n\n  onOpen(ev) {\n    console.log(\"Connected to the signaling server\", ev);\n  };\n\n   // on Message Recieved from WebSocket Server;\n   onMessage(msg: MessageEvent) {\n    console.log(\"Got message\", msg.data);\n    var content = JSON.parse(msg.data);\n    var data = content.data;\n    switch (content.event) {\n      // when somebody wants to call us\n      case \"offer\":\n        this.handleOffer(data);\n        break;\n      case \"answer\":\n        this.handleAnswer(data);\n        break;\n      // when a remote peer sends an ice candidate to us\n      case \"candidate\":\n        this.handleCandidate(data);\n        break;\n      case \"call\":\n        this.handleCall(data);\n        break;\n      case \"accept_call\":\n        this.handleAcceptCall(data);\n        break;\n      case \"deny_call\":\n        this.handleDenyCall(data);\n        break;\n      case \"cancel_call\":\n        this.handleCancelCall(data);\n        break;\n      case \"end_call\":\n          this.handleEndCall(data);\n          break;\n      default:\n        break;\n    }\n  };\n\n\n  createOffer() {\n    return this.peerConnection.createOffer(offerOptions).then((offer) => {\n      this.peerConnection.setLocalDescription(offer).then(() => this.send({\n        event: \"offer\",\n        data: offer\n      }));\n    }, (error) => {\n      alert(\"Error creating an offer\");\n      console.log(error);\n    });\n  } \n\n\n  initializePeer() {\n    let configuration: RTCConfiguration = {\n      iceServers: [\n        { urls: \"stun:23.21.150.121\" },\n        { urls: \"stun:stun.l.google.com:19302\" },\n        { urls: \"turn:numb.viagenie.ca\", \"credential\": \"webrtcdemo\", \"username\": \"louis@mozilla.com\" }\n      ]\n    }\n    this.peerConnection = new RTCPeerConnection(configuration);\n    console.log(\"peer Connection created\", this.peerConnection);\n\n    // Setup ice handling\n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        this.send({\n          event: \"candidate\",\n          data: event.candidate\n        });\n      }\n    };\n    this.peerConnection.ontrack = (ev: RTCTrackEvent) => this.gotRemoteStream(ev);\n\n  }\n\n\n  initializingCall(): Promise<void> {\n    // creating peer connection\n    this.initializePeer();\n    // Adding support for video\n    // const constraints = {\n    //   video: true, audio: true\n    // };\n    const constraints = {\n      video: { width: 1280, height: 720 }, \n      audio: true\n    };\n    // requesting Media Devices \n    return navigator.mediaDevices.getUserMedia(constraints).\n      then((stream) => {\n        /* use the stream */\n        //    stream.getTracks().forEach(track => pc1.addTrack(track, localStream));\n        stream.getTracks().forEach(track => this.peerConnection.addTrack(track, stream));\n        this.gotStream(stream);\n      })\n      .catch(function (err) {\n        /* handle the error */\n        console.log(\"error adding stream \", JSON.stringify(err));\n      });\n  }\n\n\n  handleOffer(offer: RTCSessionDescriptionInit) {\n    this.peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n\n    // create and send an answer to an offer\n    this.peerConnection.createAnswer().then((answer) => {\n      this.peerConnection.setLocalDescription(answer)\n      .then(() => \n      this.send({\n        event: \"answer\",\n        data: answer\n      }));\n    }, (error) => {\n      alert(\"Error creating an answer\");\n      console.log(\"handleOffer Error\", error);\n    });\n\n  };\n\n  handleCandidate(candidate: RTCIceCandidateInit) {\n    this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n    console.log(\"handel Candidate\", JSON.stringify(candidate));\n  };\n\n  handleAnswer(answer: RTCSessionDescriptionInit) {\n    this.peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n    console.log(\"connection established successfully!!\");\n  };\n\n\n  handleCall(caller) {\n    console.log(\"call form\", caller);\n    this.callerName = caller;\n    this.callState = CallState.Ringing;\n  }\n\n  async handleAcceptCall(data) {\n    console.log(\"handle accept call\", data);\n    console.log(\"creating offer\");\n    // setTimeout(() => this.createOffer(), 400);\n    await this.createOffer();\n    console.log(\"call accepted\");\n  }\n\n  handleDenyCall(data) {\n    console.log(\"handle deny call\", data);\n    this.callState = CallState.Denied;\n    this.stop();\n  }\n\n  handleCancelCall(data) {\n    console.log(\"handle deny call\", data);\n    this.callState = CallState.Canceled;\n    this.stop();\n  }\n\n  handleEndCall(data) {\n    console.log(\"handle End call\", data);\n    this.callState = CallState.Ended;\n    this.stop();\n  }\n\n\n  acceptCall() {\n    console.log(\"accept call\");\n    // requesting media\n    console.log(\"requesting media\");\n    // this.start();\n    this.initializingCall().then(() => {\n      this.send({\n        data: this.callerName,\n        event: \"accept_call\"\n      });\n      this.callState = CallState.Ongoing;\n    });\n  }\n\n  denyCall() {\n    console.log(\"deny call\");\n    this.send({\n      data: this.callerName,\n      event: \"deny_call\"\n    });\n    this.callState = CallState.Denied;\n    this.stop();\n  }\n\n  endCall() {\n    this.stop();\n    this.callState = CallState.Ended;\n    this.send({\n      data: this.callerName,\n      event: \"end_call\"\n    });\n\n  }\n\n  send(message) {\n    console.log(\"sending message\", JSON.stringify(message));\n    this.conn.send(JSON.stringify(message));\n  }\n\n\n  gotRemoteStream(e) {\n    // console.log('gotRemoteStream', e.track, e.streams[0]);\n    try {\n      this.remoteVideo.nativeElement.srcObject = null;\n      this.remoteVideo.nativeElement.srcObject = e.streams[0];\n    } catch (error) {\n      console.log('error setting remote stream', error);\n      this.remoteVideo.nativeElement.src = URL.createObjectURL(e.streams[0]);\n    }\n  }\n\n  gotStream(stream) {\n    console.log('Received local stream');\n    try {\n      this.localeVideo.nativeElement.srcObject = stream;\n    } catch (error) {\n      console.log('error setting locale stream', error);\n      this.localeVideo.nativeElement.src = URL.createObjectURL(stream);\n    }\n    this.localstream = stream;\n  }\n\n  stop() {\n    console.log('Ending Call' + '\\n\\n');\n    this.peerConnection.close();\n    this.peerConnection = null;\n    this.localstream.getTracks().forEach((track) =>{\n      console.log(\"stoping stream\", track);\n      track.stop();\n    });\n    this.localeVideo.nativeElement.srcObject = null;\n  }\n\n\n  isIdle():boolean {\n    return this.callState == CallState.Idle\n  }\n  isDenied():boolean {\n    return this.callState == CallState.Denied;\n  }\n  isOngoing():boolean {\n    return this.callState == CallState.Ongoing;\n  }\n  isEnded():boolean {\n    return this.callState == CallState.Ended;\n  }\n  isRinging():boolean {\n    return this.callState == CallState.Ringing;\n  }\n  isCanceled():boolean {\n    return this.callState == CallState.Canceled;\n  }\n\n\n\n  onFinished(){\n    console.log(\"timer finished\");\n  }\n\n\n\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Doctor } from 'src/app/models/Doctor';\nimport { Review } from 'src/app/models/Review';\nimport { DoctorService } from 'src/app/services/doctor.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  doctors: Array<Doctor> = [];\n  searchCity:string = \"\";\n  searchQuery:string = \"\";\n\n  constructor(\n    private doctorService: DoctorService,\n    private activatedRoute:ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.queryParamMap\n                .subscribe(params => {\n            this.searchCity = params.get('city');\n            this.searchQuery = params.get('query');\n            this.search(this.searchCity, this.searchQuery);\n        });\n    // this.doctorService.getDoctors().subscribe((doctors) => {\n    //     console.log(doctors);\n    //     this.doctors = doctors;\n    //   });\n\n    \n\n  }\n\n  search(location:string, query:string){\n    console.log(\"searchCom\", \"location: \" + location, \"query: \" +query);\n    this.doctorService\n    .search(location, query)\n    .subscribe(doctors => this.doctors = doctors);\n  }\n\n}\n","<!-- Breadcrumb -->\n<div class=\"bg-white\">\n\n<div class=\"breadcrumb-bar\">\n    <div class=\"container-fluid\">\n        <div class=\"row align-items-center\">\n            <div class=\"col-md-8 col-12\">\n                <nav aria-label=\"breadcrumb\" class=\"page-breadcrumb\">\n                    <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a routerLink=\"/home\">Home</a></li>\n                        <li class=\"breadcrumb-item active\" aria-current=\"page\">Search</li>\n                    </ol>\n                </nav>\n                <h2 class=\"breadcrumb-title\">{{doctors.length}} matches found for : {{searchQuery}} In {{searchCity}}\n                </h2>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- /Breadcrumb -->\n<!-- Search -->\n<app-search-box></app-search-box>\n<!-- Search end -->\n\n<!-- Page Content -->\n<div class=\"container-fluid bg_dark\">\n    <div class=\"row\">\n        <div class=\"col-md-12 col-lg-10 p-md-3 p-sm-2 m-auto\">\n            <app-doctor *ngFor=\"let doctor of doctors\" [doctor]=\"doctor\"></app-doctor>\n        </div>\n    </div>\n\n</div>\n</div>","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { TokenStorageService } from './token-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminAuthGuard implements CanActivate {\n  constructor(private router: Router, private authStorage: TokenStorageService) {\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      if ((this.authStorage.getUser() == null) || (this.authStorage.getUserType() !== \"ADMIN\")){\n        alert('You are not allowed to view this page. You are redirected to login Page');\n        console.log(\"next : \" + next);\n        console.log(\"state : \" + state);\n        this.router.navigate([\"admin/login\"],{ queryParams: { retUrl: state.url} });\n            return false;\n      }\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Appointment } from '../models/Appointment';\nimport { Observable } from 'rxjs';\nimport { REST, BASE_URL } from '../shared';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppointmentService {\n\n\n\n  // appoitmentUrl:string= \"http://localhost:8080/appointments\";\n  appoitmentUrl:string = BASE_URL + \"/appointments\";\n  // appoitmentUrl:string= \"/appointments\";\n\n  appURL:string =  REST + '/appointments';\n  \n  constructor(private http:HttpClient) {\n    console.log(\"appURL\", this.appURL);\n   }\n\n\n  add(appointment:Appointment):Observable<Appointment>{\n   return this.http.post<Appointment>(this.appoitmentUrl, appointment);\n  }\n\n  update(appointment:Appointment):Observable<Appointment>{\n    return this.http.put<Appointment>(this.appoitmentUrl, appointment);\n   }\n\n  getAppointments():Observable<Appointment[]>{\n    return this.http.get<Appointment[]>(this.appoitmentUrl);\n  }\n\n  getAllDoctorAppoitments(doctorId:string):Observable<Appointment[]>{\n    return this.http.get<Appointment[]>(this.appoitmentUrl + '/doctor/' + doctorId);\n  }\n\n  getAllPatientAppoitments(patientId:string):Observable<Appointment[]>{\n    return this.http.get<Appointment[]>(this.appoitmentUrl + '/patient/' + patientId);\n  }\n\n  getById(id:string):Observable<Appointment>{\n    return this.http.get<Appointment>(this.appoitmentUrl + '/' + id);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\nimport { TokenStorageService } from './token-storage.service';\n\nconst TOKEN_HEADER_KEY = 'Authorization';\nconst USER_TYPE_HEADER_KEY = 'User-Type';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private token: TokenStorageService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    let authReq = req;\n    const token = this.token.getToken();\n    const userType = this.token.getUserType();\n    let headers = req.headers;\n    if (token != null) {\n      headers = headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token);\n    }\n\n    if (userType != null) {\n      console.log(\"userType\", userType);\n      headers = headers.set(USER_TYPE_HEADER_KEY, userType);\n    }\n    authReq = req.clone({headers: headers});\n    return next.handle(authReq);\n  }\n}","import { Injectable, Output , EventEmitter} from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../models/User';\nimport { REST, BASE_URL } from '../shared';\n\nconst AUTH_API = REST +'/api/auth';\nconst USER = AUTH_API + '/user';\nconst DOCTOR = AUTH_API + '/doctor';\nconst PATIENT = AUTH_API + '/patient';\nconst ADMIN = AUTH_API + '/admin';\n// const AUTH_USER = 'http://localhost:8080/api/auth/user'\nconst AUTH_USER = BASE_URL +'/api/auth/user'\n// const DOCTOR_API = 'http://localhost:8080/api/auth/doctor/'; //TODO make this just /auth/doctor/\nconst DOCTOR_API = BASE_URL + '/api/auth/doctor/'; //TODO make this just /auth/doctor/\n// const PATIENT_API = 'http://localhost:8080/api/auth/patient/';\nconst PATIENT_API = BASE_URL + '/api/auth/patient/';\n// const ADMIN_API = 'http://localhost:8080/api/auth/admin/';\nconst ADMIN_API = BASE_URL + '/api/auth/admin/';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  @Output() getLoggedInUser: EventEmitter<User> = new EventEmitter();\n\n  constructor(private http: HttpClient) { \n    console.log(\"AUTH URL\", AUTH_API);\n  }\n\n  login(credentials, api:string): Observable<User> {\n    console.log(\"email: \" + credentials.email + \" password: \" + credentials.password);\n    return this.http.post<User>(api + 'signin', {\n      email: credentials.email,\n      password: credentials.password\n    }, httpOptions);\n    \n  }\n\n  //TODO define registration params\n  register(user, api:string): Observable<any> {\n    return this.http.post(api + 'signup', {\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      username: user.username,\n      lastname: user.lastname,\n      firstname: user.firstname\n    }, httpOptions);\n  }\n  //TODO define patients\n\n  doctorLogin(credentials): Observable<User> {\n    return this.login(credentials, DOCTOR_API); \n  }\n\n  //TODO define registration params\n  doctorRegister(user): Observable<any> {\n    return this.register(user, DOCTOR_API);\n  }\n  \n  patientLogin(credentials): Observable<any> {\n    return this.login(credentials, PATIENT_API); \n  }\n\n  //TODO define registration params\n  patientRegister(user): Observable<any> {\n    return this.register(user, PATIENT_API);\n  }\n  \n  adminLogin(credentials): Observable<any> {\n    return this.login(credentials, ADMIN_API); \n  }\n\n  //TODO define registration params\n  adminRegister(user): Observable<any> {\n    return this.register(user, ADMIN_API);\n  }\n\n  getCurrentUser():Observable<User>{\n    return this.http.get<User>(AUTH_USER);\n  }\n  \n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Contact } from '../models/Contact';\nimport { REST, BASE_URL } from '../shared';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactService {\n  // contactUrl:string = \"http://localhost:8080/contacts\";\n  contactUrl:string = BASE_URL + \"/contacts\";\n  contactURL:string = REST + '/contacts';\n\n  constructor(private http:HttpClient) { \n    console.log(\"CONTACT URL\", this.contactURL);\n  }\n\n  getContacts():Observable<Contact[]> {\n    return this.http.get<Contact[]>(this.contactUrl);\n  }\n\n  addContact(contact:Contact):Observable<Contact> {\n    return this.http.post<Contact>(this.contactUrl, contact);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { TokenStorageService } from './token-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DoctorAuthGuard implements CanActivate {\n\n  constructor(private router: Router, private authStorage: TokenStorageService) {\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      \n      if ((this.authStorage.getUser() == null) || (this.authStorage.getUserType() !== \"DOCTOR\")){\n        // alert('You are not allowed to view this page. You are redirected to login Page');\n        this.router.navigate([\"doctor/login\"],{ queryParams: { retUrl: state.url} });\n            return false;\n      }\n    return true;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient , HttpParams, HttpEvent, HttpEventType, HttpRequest} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from  'rxjs/operators';\nimport { Doctor } from '../models/Doctor';\nimport { Clinic } from '../models/Clinic';\nimport { Password } from '../models/Password';\nimport { REST, BASE_URL } from '../shared';\n\n// const API_URL = 'http://localhost:8080/api/test/';\nconst API_URL = BASE_URL + '/api/test/';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DoctorService {\n  // doctorUrl:string = \"http://localhost:8080/doctors\";\n  doctorUrl:string = BASE_URL + \"/doctors\";\n  doctorURL:string = REST + '/doctors';\n  \n  constructor(private http:HttpClient) {\n    console.log(\"doctor URL\", this.doctorURL);\n   }\n\n  \n  getDoctors():Observable<Doctor[]> {\n    return this.http.get<Doctor[]>(this.doctorUrl);\n  }\n\n  getById(id:string):Observable<Doctor>{\n    return this.http.get<Doctor>(this.doctorUrl + \"/\" + id);\n  }\n\n  updateDoctor(doctor:Doctor):Observable<Doctor>{\n    return this.http.put<Doctor>(this.doctorUrl, doctor);\n  }\n  \n  \n  getByUsername(username:string):Observable<Doctor>{\n    return this.http.get<Doctor>(this.doctorUrl + \"/username/\" + username);\n  }\n\n  \n  search(city:string, query:string):Observable<Doctor[]>{\n    const params = new HttpParams()\n      .set('city', city)\n      .set('query', query);\n    console.log(\"doc service\", \"city: \" + city, \"query : \" + query);\n    return this.http.get<Doctor[]>(this.doctorUrl, {'params': params})\n  }\n\n  getAvatar(id:string): Observable<any>{\n    return this.http.get(this.doctorUrl +  \"/\" + id + '/avatar');\n  }\n\n  uploadAvatar(doctorId:string, file:File):Observable<HttpEvent<any>>{\n    const formData: FormData = new FormData();\n\n    formData.append('avatar', file);\n    const req = new HttpRequest('POST', this.doctorUrl + '/' + doctorId + '/avatar', formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n    return this.http.request(req);\n\n  }\n\n  getClinic(id:string): Observable<Clinic>{\n    return this.http.get<Clinic>(this.doctorUrl +  \"/\" + id + '/clinic');\n  }\n\n  getClinicPhotos(id:string): Observable<Array<any>>{\n    return this.http.get<Array<any>>(this.doctorUrl +  \"/\" + id + '/clinic/photos');\n  }\n\n  updateClinic(doctorId:string, clinic:Clinic):Observable<Clinic>{\n    return this.http.post<Clinic>(this.doctorUrl + '/' + doctorId + '/clinic', clinic);\n  }\n\n  deleteClinicPhoto(doctorId:string, photoId:string):Observable<any>{\n    return this.http.delete(this.doctorUrl + '/' + doctorId + '/clinic/photos/' + photoId);\n  }\n\n  uploadClinicPhoto(doctorId:string, file:File):Observable<HttpEvent<any>>{\n    const formData: FormData = new FormData();\n\n    formData.append('photo', file);\n    const req = new HttpRequest('POST', this.doctorUrl + '/' + doctorId + '/clinic/photos', formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n    return this.http.request(req);\n\n  }\n\n  updatePassword(doctorId:string, password:Password):Observable<any>{\n    return this.http.post<any>(this.doctorUrl + '/' + doctorId + '/password',password);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { TokenStorageService } from './token-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientAuthGuard implements CanActivate {\n  constructor(private router: Router, private authStorage: TokenStorageService) {\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      if ((this.authStorage.getUser() == null) || (this.authStorage.getUserType() !== \"PATIENT\")){\n        //alert('You are not allowed to view this page. You are redirected to login Page');\n        this.router.navigate([\"patient/login\"],{ queryParams: { retUrl: state.url} });\n            return false;\n      }\n    return true;\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpEvent} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Patient } from '../models/Patient';\nimport { Password } from '../models/Password';\nimport { REST, BASE_URL } from '../shared';\n\nconst baseUrl = BASE_URL + '/patients';\n// const baseUrl = 'http://localhost:8080/patients';\n\nconst PATIENT_URL = REST + '/patients';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n\n  constructor(private http: HttpClient) { \n    console.log(\"patient URL \", PATIENT_URL);\n  }\n  //TODO Ayoub chaque method doit avoir le type de retour\n  getAll() {\n    return this.http.get(baseUrl);\n  }\n  get(id) {\n    return this.http.get(`${baseUrl}/${id}`);\n  }\n  getById(id):Observable<Patient>{\n    return this.http.get<Patient>(`${baseUrl}/${id}`);\n  }\n  create(data) {\n    return this.http.post(baseUrl, data);\n  }\n  update(id, data) {\n    return this.http.put( `${baseUrl}/${id}`, data);\n  }\n  delete(id) {\n    return this.http.delete(`${baseUrl}/${id}`);\n  }\n  deleteAll() {\n    return this.http.delete(baseUrl);\n  }\n\n  getAvatar(id:string): Observable<any>{\n    return this.http.get(baseUrl +  \"/\" + id + '/avatar');\n  }\n\n  uploadAvatar(patientId:string, file:File):Observable<HttpEvent<any>>{\n    const formData: FormData = new FormData();\n\n    formData.append('avatar', file);\n    const req = new HttpRequest('POST', baseUrl + '/' + patientId + '/avatar', formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n    return this.http.request(req);\n\n  }\n\n  updatePassword(patientId:string, password:Password):Observable<any>{\n    return this.http.post<any>(baseUrl + '/' + patientId + '/password',password);\n  }\n\n  updatePatient(patirnt:Patient):Observable<Patient>{\n    return this.http.put<Patient>(baseUrl, patirnt);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Review } from '../models/Review';\nimport { HttpClient } from '@angular/common/http';\nimport { Like } from '../models/Like';\nimport { REST, BASE_URL } from '../shared';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReviewService {\n  doctorUrl:string = BASE_URL + \"/doctors\";\n  // doctorUrl:string = \"http://localhost:8080/doctors\";\n\n  doctorsURL:string = REST +'/doctors'\n  // doctorUrl = this.doctorsURL; // test if this works\n  constructor(private http:HttpClient) { \n    console.log(\"doctor URL\", this.doctorsURL);\n  }\n\n  getReviews(doctorId:string):Observable<Review[]>{\n    return this.http.get<Review[]>(this.doctorUrl + '/' + doctorId +  '/reviews');\n  }\n  addReview(doctorId:string, review:Review):Observable<Review>{\n    console.log(\"review in service: \", review);\n    return this.http.post<Review>(this.doctorUrl + '/' + doctorId + '/reviews', review);\n  }\n  updateReview(doctorId:string, review:Review):Observable<Review>{\n    return this.http.put<Review>(this.doctorUrl+ '/' + doctorId + '/reviews/' + review.id, review);\n  }\n\n  deleteReview(doctorId:string, reviewId:string):Observable<any>{\n    return this.http.delete(this.doctorUrl + '/' + doctorId + '/reviews/' + reviewId);\n  }\n\n  likeReview(reviewId:string, like:Like):Observable<Like>{\n    return this.http.post<Like>(this.doctorUrl+ '/reviews/' + reviewId +'/like', like);\n  }\n\n  unlikeReview(reviewId:string, like:Like):Observable<Like>{\n    return this.http.post<Like>(this.doctorUrl+ '/reviews/' + reviewId +'/unlike', like);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../models/User';\n\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\nconst USER_TYPE = 'user-type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n\n  constructor() { }\n\n  signOut() {\n    //window.sessionStorage.clear();\n    localStorage.clear();\n  }\n\n  \n  public saveToken(token: string) {\n    console.log(\"saving in storage \" + TOKEN_KEY  + \" : \" + token);\n    //window.sessionStorage.removeItem(TOKEN_KEY);\n    //window.sessionStorage.setItem(TOKEN_KEY, token);\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.setItem(TOKEN_KEY, token);\n  }\n  \n  public getToken(): string {\n    // return window.sessionStorage.getItem(TOKEN_KEY);\n    return localStorage.getItem(TOKEN_KEY);\n  }\n\n  \n  public saveUserType(userType: string) {\n    console.log(\"saving in storage \" + USER_TYPE  + \" : \" + userType);\n    // window.sessionStorage.removeItem(USER_TYPE);\n    // window.sessionStorage.setItem(USER_TYPE, userType);\n    localStorage.removeItem(USER_TYPE);\n    localStorage.setItem(USER_TYPE, userType);\n    \n  }\n\n  public getUserType(): string {\n    // return sessionStorage.getItem(USER_TYPE);\n    return localStorage.getItem(USER_TYPE);\n  }\n\n  \n\n  public saveUser(user:User) {\n    console.log(\"saving in storage \" + USER_KEY  + \" : \" + user);\n    localStorage.removeItem(USER_KEY);\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  public getUser():User{\n    return JSON.parse(localStorage.getItem(USER_KEY));\n  }\n}","// services \n\n// export const BASE_URL = location.hostname + (location.port ? ':' + location.port : '')\nexport const BASE_URL = location.origin;\nexport const BASE_SOCKET_URL = 'ws://' + location.hostname + (location.port ? ':' + location.port : '')\nexport const REST = BASE_URL + '/rest';\nconsole.log(\"rest URL\", REST);\nexport const CHAT = BASE_URL + '/chat';\nconsole.log(\"rest URL\", CHAT);\nexport const AUTH = BASE_URL + '/auth';\nconsole.log(\"rest URL\", AUTH);","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\n///<reference path=\"typings.d.ts\"/>\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}